<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gradle plugin on Simple...</title>
    <link>http://coofee.github.io/tags/gradle-plugin/</link>
    <description>Recent content in gradle plugin on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Thu, 01 Sep 2016 19:27:06 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/tags/gradle-plugin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android Gradle插件升级填坑指南</title>
      <link>http://coofee.github.io/post/android-gradle-plugin-compat/</link>
      <pubDate>Thu, 01 Sep 2016 19:27:06 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-gradle-plugin-compat/</guid>
      <description>[TOC]
Android Gradle插件升级填坑指南
1. 引子 自打android开发环境从eclipse迁移到android studio之后，android项目的打包就从ant迁移到了gradle。自此只要是在打包过程中需要干扰代码生成或执行其他特殊处理，都需要通过gradle脚本完成，具体来说就是通过在打包过程中插入task或者给现用task添加hook。 对于我们的项目而言，在插件化和热修复技术，为了降低打包成本，我们编写了自己的gradle插件，用于支持app的插件化和热修复打包。
2. 由instant-run引发的血案 时间来到了16年，随着Instant-Run功能的逐渐完善，我们也升级android studio和gradle来体验强大的Instant-Run，刚一运行就崩溃了。。。
查看一下报错日志，发现proguardDebug任务找不到；瞅了一下打包产生的临时目录，发现intermediates/classes-proguard目录也找不到了，并且还多出来了intermediates/transforms这个奇怪的目录，赶紧google一下，发现google在gradle插件高版本中引入了transform-api（主要是给大家提供了一个操作代码的接口，比如可以注入代码什么的），并且在高版本的gradle插件中使用transformClassesAndResourcesWithProguardForDebug任务替换了低版本的proguardDebug任务。
3. 兼容Transform Api 知道了问题所在，那就让我们撸起袖子干起来吧，将原本需要在proguardDebug之后执行的代码迁移到transformClassesAndResourcesWithProguardForDebug之后，并稍作改动就可以了。大概代码如下：
def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString() gradle.taskGraph.afterTask { Task task, TaskState state -&amp;gt; if (state.failure != null) { println &amp;quot;${task} error: ${state.failure}&amp;quot; state.failure.printStackTrace() state.rethrowFailure(); return; } if (task.name.equals(proguardTaskName)) { // 执行自己的代码，将先前的代码迁移至此，并稍作改动即可。 } }  4. 兼容不同版本 这里我们为了兼容各个版本的gradle插件，那么就出现了一个新问题如何区分某个gradle插件版本是否支持transform api？
查看官网，发现上面有这么一句话 &amp;gt; (The API existed in 1.4.0-beta2 but it&amp;rsquo;s been completely revamped in 1.5.0-beta1)
也就是说，这个api在1.4.0-beta2的时候就已经存在了，但是直到1.5.0-beta1版本的时候才改造完成。这么来看的话，通过版本来判断比较复杂，并且不一定靠谱，那么如何能够既简单又靠谱的判断呢？
答案很简单，直接判断project是否拥有transform的task即可，大概代码如下：</description>
    </item>
    
  </channel>
</rss>