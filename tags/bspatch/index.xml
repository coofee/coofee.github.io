<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bspatch on Simple...</title>
    <link>http://coofee.github.io/tags/bspatch/</link>
    <description>Recent content in bspatch on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Sat, 17 Sep 2016 22:01:24 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/tags/bspatch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>android jni bspatch</title>
      <link>http://coofee.github.io/post/jni-bspatch/</link>
      <pubDate>Sat, 17 Sep 2016 22:01:24 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/jni-bspatch/</guid>
      <description>[TOC]
1. 下载并配置NDK: https://developer.android.com/ndk/downloads/index.html
2. 编译Bsdiff 2.1 编写java类，创建native方法 package com.commons.utils; public class Bspatch { static { System.loadLibrary(&amp;quot;bspatch&amp;quot;); } public static native int applyPatch(String oldFile, String newFile, String patchFile); }  2.2 生成.h文件  使用javac编写Bspatch或者在ide里面编译，这里我在android studio中编写并执行gradle的compileDebugJavaWithJavac任务进行编译，编译完成后，切换到classes目录。
 使用javah生成.h文件
// 切换到编译好的类目录 cd app/build/intermediates/classes // 生成.h文件 javah -d h -classpath debug com.commons.utils.Bspatch   2.3 编译c/c++代码.  复制生成的.h文件到c/c++文件目录. 在存放c/c++代码的目录中添加Android.mk、Application.mk文件。 其中Android.mk用于指定要编译的类，模块名称等； Application.mk用于指定要生成特定abi类型的so文件，如：x86，armeabi等。  目录结构如下：
  app  build jni  bspatch bzip2 Android.</description>
    </item>
    
  </channel>
</rss>