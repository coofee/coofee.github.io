<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DynamicProxy on Simple...</title>
    <link>http://coofee.github.io/tags/dynamicproxy/</link>
    <description>Recent content in DynamicProxy on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Thu, 30 Jun 2016 00:04:39 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/tags/dynamicproxy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>groovy replace method</title>
      <link>http://coofee.github.io/post/groovy-replace-method/</link>
      <pubDate>Thu, 30 Jun 2016 00:04:39 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/groovy-replace-method/</guid>
      <description>[TOC]
Groovy 动态代理即替换方法 我们知道在Java中可以使用以下几种方法替换方法。
 JDK自带的动态代理只支持修改某个类所实现的接口的方法。java只支持单继承，所有的代理类都是Proxy的子类，所以只能覆盖接口的方法。 asm直接修改字节码，直接修改字节码，直接修改类的方法和所实现接口的方法。 javassist直接修改字节码，直接修改类的方法和所实现接口的方法。 cglib基于asm封装，直接修改类的方法和所实现接口的方法。  总的来说，使用jdk自带的方案有局限，使用第三方框架能够支持全部功能。下面我们就来看一下，groovy作为一门jvm语言如何更加方便的实现动态代理的。
1.1 演示类 class ReplaceMethod { // 用于演示替换实例方法 public List&amp;lt;String&amp;gt; getStreamInputs() { List&amp;lt;String&amp;gt; strings = &amp;quot;a, b, c, d&amp;quot;.split(&amp;quot;, &amp;quot;); return strings; } // 用于演示替换泛型方法，同时演示如何区分同名的方法。 public void genericMethod(List&amp;lt;String&amp;gt; strings) { println strings } public void genericMethod(List&amp;lt;String&amp;gt; strings, boolean num) { println strings } }  2 如何替换方法？  通过metaClass的pickMethod获取到原始的方法引用。 使用闭包替换metaClass上要替换的方法即可。  样例代码如下：
def repalceMethod = new ReplaceMethod(); println repalceMethod.getStreamInputs(); def oldMethod = ReplaceMethod.</description>
    </item>
    
  </channel>
</rss>