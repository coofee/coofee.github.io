<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Simple...</title>
    <link>http://coofee.github.io/tags/android/</link>
    <description>Recent content in android on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Mon, 12 Aug 2019 19:18:58 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to write sqlites extension</title>
      <link>http://coofee.github.io/post/how_to_write_sqlites_extension/</link>
      <pubDate>Mon, 12 Aug 2019 19:18:58 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/how_to_write_sqlites_extension/</guid>
      <description>0x00 SQLite sqlite是一个使用c语音编写的库，其实现了一个的小巧、快速、自含、高可靠性、全功能的SQL数据库引擎。它仅依赖少数的几个系统调用。它是一个非常流行的数据库，几乎打包到了所有的移动设备中，同时有无数的应用程序内嵌了它。
0x01 SQLite扩展 sqlite extension是可以在运行时被sqlite加载的库，其主要有以下作用：
 扩展sqlite的功能，如提供sqlite本身不支持的函数。 运行时加载扩展，可以动态更新，也可以保证只在需要时加载扩展，减少内存消耗。 扩展可以独立于sqlite本身单独开发，测试。  0x02 编写扩展 编写扩展时，我们可以从sqlite的官网复制一份模板代码，整个模板代码如下所示：
/* Add your header comment here */ #include &amp;lt;sqlite3ext.h&amp;gt; /* Do not use &amp;lt;sqlite3.h&amp;gt;! */ SQLITE_EXTENSION_INIT1 /* Insert your extension code here */ #ifdef _WIN32 __declspec(dllexport) #endif /* TODO: Change the entry point name so that &amp;quot;extension&amp;quot; is replaced by ** text derived from the shared library filename as follows: Copy every ** ASCII alphabetic character from the filename after the last &amp;quot;/&amp;quot; through ** the next following &amp;quot;.</description>
    </item>
    
    <item>
      <title>rxjava distinguish user cancel from others</title>
      <link>http://coofee.github.io/post/rxjava-distinguish-user-cancel-from-others/</link>
      <pubDate>Mon, 06 Nov 2017 20:35:58 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/rxjava-distinguish-user-cancel-from-others/</guid>
      <description>RxJava区分用户主动取消 0x00 取消订阅 首先我们知道使用rxjava执行操作的时候，基本流程大致如下，取消操作时只需要调用subscription.unsubscribe()即可：
Subscription subscription = Observable.&amp;lt;String&amp;gt;create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() { @Override public void call(Subscriber&amp;lt;? super String&amp;gt; subscriber) { try { Thread.sleep(5 * 1000); } catch (InterruptedException e) { } println(&amp;quot;call...&amp;quot;); subscriber.onNext(&amp;quot;aaaaaaa&amp;quot;); subscriber.onCompleted(); } }).subscribeOn(Schedulers.io()) .observeOn(Schedulers.newThread()) .unsubscribeOn(Schedulers.newThread()) .subscribe(new PrintSubscriber&amp;lt;&amp;gt;());  那么我们在执行操作的过程中，如何知道一个操作被取消了呢？熟悉rxjava的童鞋可能一下子就会想到，直接使用doOnUnsubscribe()不就可以了吗？这有什么好纠结的。
Subscription subscription = Observable.&amp;lt;String&amp;gt;create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() { @Override public void call(Subscriber&amp;lt;? super String&amp;gt; subscriber) { try { Thread.sleep(5 * 1000); } catch (InterruptedException e) { } println(&amp;quot;call...&amp;quot;); subscriber.onNext(&amp;quot;aaaaaaa&amp;quot;); subscriber.onCompleted(); } }).</description>
    </item>
    
    <item>
      <title>rxjava 2.0 head first</title>
      <link>http://coofee.github.io/post/rxjava2/</link>
      <pubDate>Tue, 10 Oct 2017 20:35:58 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/rxjava2/</guid>
      <description>RxJava 2.0 简单介绍 一年一年有一年，RxJava也新增了2.0版本，那么为什么是新增版本而不说升级版本呢？
因为2.0版本和1.0版本两者并不兼容，2.0版本是基于Reactive-Streams规范重新设计而来；同时1.x版本和2.x版本两者会并行开发维护，但是1.x版本只维护到2018-03-31。
下面我们简单介绍一下两者的不同。
0x00 依赖&amp;amp;包名不同 使用rxjava 1.x、2.x版本的依赖如下：
// rxjava 1.x compile &#39;io.reactivex:rxjava:1.1.6&#39; // rxjava 2.x compile &amp;quot;io.reactivex.rxjava2:rxjava:2.x.y&amp;quot;  包名修改如下：
// 1.x -&amp;gt; 2.x rx.** -&amp;gt; io.reactivex.**  0x01 Observable与Flowable Observable在2.0版本不支持backpressure，它会缓存全部的数据，一一发送给消费者，如果消费不及时，会产生OOM。于此对应，在2.x版本新增了Flowable，支持设置/自定义backpressure，同时在创建时必须制定backpressure。
Flowable.create(new FlowableOnSubscribe&amp;lt;Object&amp;gt;() { @Override public void subscribe(FlowableEmitter&amp;lt;Object&amp;gt; e) throws Exception { for (int i = 0; i &amp;lt; 256; i++) { e.onNext(i); } e.onComplete(); } }, BackpressureStrategy.BUFFER).subscribe(System.out::println, Throwable::printStackTrace);  0x02 Single 当使用Single时，生产者调用onSuccess()通知订阅者，同时终止整个事件流，生产者只能发送一个success事件，订阅者也只能收到一个success事件，适用于网络请求等确定只有单个事件的事件流。对于1.x版本而言，则需要主动调用onComplete()来终止事件流。
注意: Single没有onComplete()方法；只能产生success、error两种事件。
Single.create(s -&amp;gt; s.</description>
    </item>
    
    <item>
      <title>android check app running foreground</title>
      <link>http://coofee.github.io/post/android-check-app-running-foreground/</link>
      <pubDate>Tue, 25 Jul 2017 19:43:30 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-check-app-running-foreground/</guid>
      <description>0x00 使用Application.ActivityLifecycleCallbacks检测App运行在前台/后台 import android.app.Activity; import android.app.ActivityManager; import android.app.Application; import android.content.Context; import android.os.Bundle; import android.os.Handler; import android.util.Log; import java.util.List; public class ApplicationLifecycle implements Application.ActivityLifecycleCallbacks { private Handler mHandler = new Handler(); private Runnable mCheck = new Runnable() { @Override public void run() { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; mCounter=&amp;quot; + mCounter); if (mCounter == 0) { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; get runningAppProcessInfo.&amp;quot;); final ActivityManager am = (ActivityManager) mAppContext.getSystemService(Context.ACTIVITY_SERVICE); // NOTE: getRunningAppProcess() ONLY GIVE YOU THE PROCESS OF YOUR OWN PACKAGE IN ANDROID M // BUT THAT&#39;S ENOUGH HERE List&amp;lt;ActivityManager.</description>
    </item>
    
    <item>
      <title>catch react native IllegalViewOperationException</title>
      <link>http://coofee.github.io/post/catch-react-native-illegalviewoperationexception/</link>
      <pubDate>Fri, 21 Jul 2017 17:44:38 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/catch-react-native-illegalviewoperationexception/</guid>
      <description>0x00 React Native Default Exception Handler React Native官方支持在生成ReactInstanceManager时使用NativeModuleCallExceptionHandler接口来设置自己的异常处理器，防止js/react-native代码异常导致native端直接崩溃，样例代码如下：
ReactInstanceManagerBuilder builder = ReactInstanceManager.builder() .setApplication(context.getApplicationContext()) .addPackage(new MainReactPackage()) .setInitialLifecycleState(LifecycleState.BEFORE_CREATE) .setNativeModuleCallExceptionHandler(new NativeModuleCallExceptionHandler { @Override public void handleException(Exception e) { // 自己处理react-native异常. } });  0x01 com.facebook.react.uimanager.IllegalViewOperationException app发布到线上之后，仍然出现了少部分未能捕获的异常，堆栈信息如下:
com.facebook.react.uimanager.IllegalViewOperationException Trying to add unknown view tag: 500 detail: View tag:496 children(2): [ 497,498, ], viewsToAdd(1): [ [2,500], ], 1 com.facebook.react.uimanager.NativeViewHierarchyManager.manageChildren(NativeViewHierarchyManager.java:387) 2 com.facebook.react.uimanager.UIViewOperationQueue$ManageChildrenOperation.execute(UIViewOperationQueue.java:179) 3 com.facebook.react.uimanager.UIViewOperationQueue$2.run(UIViewOperationQueue.java:787) 4 com.facebook.react.uimanager.UIViewOperationQueue.flushPendingBatches(UIViewOperationQueue.java:843) 5 com.facebook.react.uimanager.UIViewOperationQueue.access$1600(UIViewOperationQueue.java:48) 6 com.facebook.react.uimanager.UIViewOperationQueue$DispatchUIFrameCallback.doFrameGuarded(UIViewOperationQueue.java:889) 7 com.facebook.react.uimanager.GuardedFrameCallback.doFrame(GuardedFrameCallback.java:31) 8 com.facebook.react.modules.core.ReactChoreographer$ReactChoreographerDispatcher.doFrame(ReactChoreographer.java:129) 9 com.</description>
    </item>
    
    <item>
      <title>upgrade android support library to 25.4.0</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>Android升级Support库版本至25.4.0
[TOC]
0x00 背景 support库是google官方提供的支持库，其主要功能在于兼容android高/低版本系统（如：support-v4、support-v7库），同时伴随着support库的不同版本，也会发布同版本的各种UI组件库（如Design、RecyclerView等）。support库的每次更新升级，一般都会包括bug修复、性能优化以及功能改进等等。
目前我们App使用的版本是23.0.1，截止目前google发布的最新稳定版本是25.4.0，中间相差了将近20个版本，其中包含大量的bug修复；同时又因为Design、RecyclerView等UI库的很多新组件也依赖于support库的升级，所以我们计划将support-v4、support-v7、Design、RecyclerView等库统一升级至25.4.0版本。
0x01 打包环境的影响及解决方案 1. 升级JDK &amp;amp; Android SDK  升级JDK到1.8 升级Android SDK到25  2. 升级CentOS或GLIBC 由于我们的jenkins打包服务器的系统是CentOS 6.5，其默认支持的GLIBC库版本最高为2.12，而android sdk高版本需要的GLIBC版本为2.14，所以要么升级系统CentOS到7.x版本，要么升级GLIBC版本到2.14.
当Android SDK需要的GLIBC版本不匹配时，出错信息大致如下:
[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt) [exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)  在CentOS系统中，使用strings /lib64/libc.so.6 | grep GLIBC命令可以查看其支持的GLIBC库的版本。
3. 指定gradle使用jdk1.8 由于android sdk需要在jdk1.8环境才能正常编译、打包，所以要么在系统中配置java环境变量为jdk1.8版本；要么在执行gradle时指定其运行环境为jdk1.8。
指定gradle使用jdk1.8，具体配置如下：
gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8  也可以直接在gradle.properties中指定jdk版本，如下所示：
org.gradle.java.home=/usr/java/jdk1.8  4. support库与build-tools版本 由于我们app原本使用的build-tools版本是22.0.1，当保持build-tools版本不变，只升级support库版本时，在HUAWEI P7-L00 4.4.2上面运行时，会出现如下错误，推测是因为support库版本和build-tools主版本号不一致导致，所以如果升级support库版本，最好保持和build-tools主版本号一致，防止各种诡异问题。
E/AndroidRuntime: FATAL EXCEPTION: main Caused by: android.</description>
    </item>
    
    <item>
      <title>android jni bspatch</title>
      <link>http://coofee.github.io/post/jni-bspatch/</link>
      <pubDate>Sat, 17 Sep 2016 22:01:24 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/jni-bspatch/</guid>
      <description>[TOC]
1. 下载并配置NDK: https://developer.android.com/ndk/downloads/index.html
2. 编译Bsdiff 2.1 编写java类，创建native方法 package com.commons.utils; public class Bspatch { static { System.loadLibrary(&amp;quot;bspatch&amp;quot;); } public static native int applyPatch(String oldFile, String newFile, String patchFile); }  2.2 生成.h文件  使用javac编写Bspatch或者在ide里面编译，这里我在android studio中编写并执行gradle的compileDebugJavaWithJavac任务进行编译，编译完成后，切换到classes目录。
 使用javah生成.h文件
// 切换到编译好的类目录 cd app/build/intermediates/classes // 生成.h文件 javah -d h -classpath debug com.commons.utils.Bspatch   2.3 编译c/c++代码.  复制生成的.h文件到c/c++文件目录. 在存放c/c++代码的目录中添加Android.mk、Application.mk文件。 其中Android.mk用于指定要编译的类，模块名称等； Application.mk用于指定要生成特定abi类型的so文件，如：x86，armeabi等。  目录结构如下：
  app  build jni  bspatch bzip2 Android.</description>
    </item>
    
    <item>
      <title>Android Gradle插件升级填坑指南</title>
      <link>http://coofee.github.io/post/android-gradle-plugin-compat/</link>
      <pubDate>Thu, 01 Sep 2016 19:27:06 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-gradle-plugin-compat/</guid>
      <description>[TOC]
Android Gradle插件升级填坑指南
1. 引子 自打android开发环境从eclipse迁移到android studio之后，android项目的打包就从ant迁移到了gradle。自此只要是在打包过程中需要干扰代码生成或执行其他特殊处理，都需要通过gradle脚本完成，具体来说就是通过在打包过程中插入task或者给现用task添加hook。 对于我们的项目而言，在插件化和热修复技术，为了降低打包成本，我们编写了自己的gradle插件，用于支持app的插件化和热修复打包。
2. 由instant-run引发的血案 时间来到了16年，随着Instant-Run功能的逐渐完善，我们也升级android studio和gradle来体验强大的Instant-Run，刚一运行就崩溃了。。。
查看一下报错日志，发现proguardDebug任务找不到；瞅了一下打包产生的临时目录，发现intermediates/classes-proguard目录也找不到了，并且还多出来了intermediates/transforms这个奇怪的目录，赶紧google一下，发现google在gradle插件高版本中引入了transform-api（主要是给大家提供了一个操作代码的接口，比如可以注入代码什么的），并且在高版本的gradle插件中使用transformClassesAndResourcesWithProguardForDebug任务替换了低版本的proguardDebug任务。
3. 兼容Transform Api 知道了问题所在，那就让我们撸起袖子干起来吧，将原本需要在proguardDebug之后执行的代码迁移到transformClassesAndResourcesWithProguardForDebug之后，并稍作改动就可以了。大概代码如下：
def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString() gradle.taskGraph.afterTask { Task task, TaskState state -&amp;gt; if (state.failure != null) { println &amp;quot;${task} error: ${state.failure}&amp;quot; state.failure.printStackTrace() state.rethrowFailure(); return; } if (task.name.equals(proguardTaskName)) { // 执行自己的代码，将先前的代码迁移至此，并稍作改动即可。 } }  4. 兼容不同版本 这里我们为了兼容各个版本的gradle插件，那么就出现了一个新问题如何区分某个gradle插件版本是否支持transform api？
查看官网，发现上面有这么一句话 &amp;gt; (The API existed in 1.4.0-beta2 but it&amp;rsquo;s been completely revamped in 1.5.0-beta1)
也就是说，这个api在1.4.0-beta2的时候就已经存在了，但是直到1.5.0-beta1版本的时候才改造完成。这么来看的话，通过版本来判断比较复杂，并且不一定靠谱，那么如何能够既简单又靠谱的判断呢？
答案很简单，直接判断project是否拥有transform的task即可，大概代码如下：</description>
    </item>
    
  </channel>
</rss>