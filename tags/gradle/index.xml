<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Gradle on Simple... </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://coofee.github.io/tags/gradle/</link>
    <language>en-us</language>
    <author>Coofee</author>
    
    <updated>Thu, 13 Jul 2017 19:52:39 CST</updated>
    
    <item>
      <title>upgrade android support library to 25.4.0</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>

&lt;p&gt;Android升级Support库版本至25.4.0&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h1&gt;

&lt;p&gt;support库是google官方提供的支持库，其主要功能在于兼容android高/低版本系统（如：&lt;code&gt;support-v4&lt;/code&gt;、&lt;code&gt;support-v7&lt;/code&gt;库），同时伴随着support库的不同版本，也会发布同版本的各种UI组件库（如&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等）。support库的每次更新升级，一般都会包括bug修复、性能优化以及功能改进等等。&lt;/p&gt;

&lt;p&gt;目前我们App使用的版本是&lt;strong&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/rev-archive.html#rev23-0-1&#34;&gt;23.0.1&lt;/a&gt;&lt;/strong&gt;，截止目前google发布的最新稳定版本是&lt;strong&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/revisions.html#25-4-0&#34;&gt;25.4.0&lt;/a&gt;&lt;/strong&gt;，中间相差了将近&lt;strong&gt;20&lt;/strong&gt;个版本，其中包含大量的bug修复；同时又因为&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等UI库的很多新组件也依赖于support库的升级，所以我们计划将&lt;code&gt;support-v4&lt;/code&gt;、&lt;code&gt;support-v7&lt;/code&gt;、&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等库统一升级至25.4.0版本。&lt;/p&gt;

&lt;h1 id=&#34;0x01-打包环境的影响及解决方案&#34;&gt;0x01 打包环境的影响及解决方案&lt;/h1&gt;

&lt;h2 id=&#34;1-升级jdk-android-sdk&#34;&gt;1. 升级JDK &amp;amp; Android SDK&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;升级JDK到1.8&lt;/li&gt;
&lt;li&gt;升级Android SDK到25&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-升级centos或glibc&#34;&gt;2. 升级CentOS或GLIBC&lt;/h2&gt;

&lt;p&gt;由于我们的jenkins打包服务器的系统是CentOS 6.5，其默认支持的GLIBC库版本最高为2.12，而android sdk高版本需要的GLIBC版本为2.14，所以要么升级系统CentOS到7.x版本，要么升级GLIBC版本到2.14.&lt;/p&gt;

&lt;p&gt;当Android SDK需要的GLIBC版本不匹配时，出错信息大致如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt)

[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在CentOS系统中，使用&lt;code&gt;strings /lib64/libc.so.6 | grep GLIBC&lt;/code&gt;命令可以查看其支持的GLIBC库的版本。&lt;/p&gt;

&lt;h2 id=&#34;3-指定gradle使用jdk1-8&#34;&gt;3. 指定gradle使用jdk1.8&lt;/h2&gt;

&lt;p&gt;由于android sdk需要在jdk1.8环境才能正常编译、打包，所以要么在系统中配置java环境变量为jdk1.8版本；要么在执行gradle时指定其运行环境为jdk1.8。&lt;/p&gt;

&lt;p&gt;指定gradle使用jdk1.8，具体配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以直接在&lt;code&gt;gradle.properties&lt;/code&gt;中指定jdk版本，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;org.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-support库与build-tools版本&#34;&gt;4. support库与build-tools版本&lt;/h2&gt;

&lt;p&gt;由于我们app原本使用的build-tools版本是22.0.1，当保持build-tools版本不变，只升级support库版本时，在HUAWEI P7-L00 4.4.2上面运行时，会出现如下错误，推测是因为support库版本和build-tools主版本号不一致导致，所以如果升级support库版本，最好保持和build-tools主版本号一致，防止各种诡异问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;E/AndroidRuntime: FATAL EXCEPTION: main
Caused by: android.content.res.Resources$NotFoundException: File res/drawable/abc_vector_test.xml from drawable resource ID #0x7f820053
  at android.content.res.Resources.loadDrawable(Resources.java:2154)
  at com.huawei.android.content.res.ResourcesEx.loadDrawable(ResourcesEx.java:723)
  at android.content.res.Resources.getDrawable(Resources.java:741)
  at android.support.v4.content.ContextCompat.getDrawable(ContextCompat.java:374)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:202)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:190)
  at android.support.v7.widget.AppCompatDrawableManager.checkVectorDrawableSetup(AppCompatDrawableManager.java:711)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:195)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:190)
  at android.support.v7.content.res.AppCompatResources
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-相关代码的影响及解决方案&#34;&gt;0x02 相关代码的影响及解决方案&lt;/h1&gt;

&lt;h2 id=&#34;1-使用google官方的maven仓库&#34;&gt;1. 使用google官方的Maven仓库&lt;/h2&gt;

&lt;p&gt;support库升级到25.4.0时，需要使用google官方的maven仓库(&lt;a href=&#34;https://maven.google.com)需要翻墙，解决方案如下:&#34;&gt;https://maven.google.com)需要翻墙，解决方案如下:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {
    repositories {
        maven {
            url &amp;quot;https://dl.google.com/dl/android/maven2/&amp;quot;
        }
        jcenter()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-targetsdkversion&#34;&gt;2. targetSdkVersion&lt;/h2&gt;

&lt;p&gt;当我们将app的targetSdkVersion升级到25时，由于libssl.so已经被系统移除了，此时当我们的So依赖该库时，在App运行时会直接崩溃，所以targetSdkVersion可以仍然保持为23，也可以自己做兼容。注: android 6.0已经使用&lt;code&gt;BoringSSL&lt;/code&gt;替换了&lt;code&gt;OpenSSL&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;3-coordinatorlayout&#34;&gt;3. CoordinatorLayout&lt;/h2&gt;

&lt;p&gt;support库升级到25.4.0时，使用&lt;code&gt;CoordinatorLayout&lt;/code&gt;控件的页面，Activity的主题必须继承&lt;code&gt;Theme.AppCompat&lt;/code&gt;，否则会直接崩溃，错误日志如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Caused by: java.lang.IllegalArgumentException: You need to use a Theme.AppCompat theme (or descendant) with the design library.
  at android.support.design.widget.ThemeUtils.checkAppCompatTheme(ThemeUtils.java:33)
  at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:206)
  at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:200)
  at java.lang.reflect.Constructor.newInstance0(Native Method) 
  at java.lang.reflect.Constructor.newInstance(Constructor.java:430) 
  at android.view.LayoutInflater.createView(LayoutInflater.java:656) 
  at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:798) 
  at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:738) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:495) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:426) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:377) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-recyclerview&#34;&gt;4. RecyclerView&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ItemView高度占满RecyclerView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RecyclerView在&lt;strong&gt;23.2&lt;/strong&gt;版本支持&lt;code&gt;setAutoMeasureEnabled()&lt;/code&gt;，当item布局是&lt;code&gt;match_parent&lt;/code&gt;时，这个item会占满整个RecyclerView的高度/宽度，所以当从低版本升级到高版本时需要将&lt;code&gt;match_parent&lt;/code&gt;替换为精确的宽度/高度，或者使用&lt;code&gt;wrap_content&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;原因如下:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The RecyclerView widget provides an advanced and flexible base for creating lists and grids as well as supporting animations. This release brings an exciting new feature to the LayoutManager API: auto-measurement! This allows a RecyclerView to size itself based on the size of its contents. This means that previously unavailable scenarios, such as using WRAP_CONTENT for a dimension of the RecyclerView, are now possible. You’ll find all built in LayoutManagers now support auto-measurement.&lt;/p&gt;

&lt;p&gt;Due to this change, make sure to double check the layout parameters of your item views: previously ignored layout parameters (such as MATCH_PARENT in the scroll direction) will now be fully respected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2016/02/android-support-library-232.html&#34;&gt;详见: RecyclerView 23.2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果布局xml非常多，修改麻烦的话，可以考虑在&lt;code&gt;Adapter.onCreateViewHolder()&lt;/code&gt;方法中直接修改itemView的属性即可，下面是一个竖直RecyclerView的样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ViewGroup.LayoutParams layoutParams = itemView.getLayoutParams();
if (layoutParams == null) {
    layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    itemView.setLayoutParams(layoutParams);

} else if (layoutParams.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    layoutParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;
    itemView.setLayoutParams(layoutParams);

}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;隐藏ItemView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在RecyclerView中即使itemView整个设置了GONE，仍然会占据空间，所以如果需要隐藏整个itemView的话，需要设置其宽度、高度为0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void hideItemView(View itemView) {
    if (itemView == null) {
        return;
    }

    itemView.setVisibility(View.GONE);
    ViewGroup.LayoutParams layoutParams = itemView.getLayoutParams();
    if (layoutParams == null) {
        layoutParams = new ViewGroup.LayoutParams(0, 0);
    }

    layoutParams.height = 0;
    layoutParams.width = 0;
    itemView.setLayoutParams(layoutParams);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x03-后续升级建议&#34;&gt;0x03 后续升级建议&lt;/h1&gt;

&lt;h2 id=&#34;1-multidex&#34;&gt;1. multidex&lt;/h2&gt;

&lt;p&gt;升级multidex库到1.0.2版本。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Allows multidexing of instrumentation APK.
Deprecates MultiDexTestRunner (AndroidJUnitRunner should be used instead).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides better protection against some bad archive extraction management of the app.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes a bug that could lead to abandoned temporary files.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides faster installation when done in concurrent process.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes an installation bug on API 19 and 20.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;升级1.0.2之后直接编译，会出现以下问题:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error:Conflict with dependency &#39;com.android.support:multidex&#39;. Resolved versions for app (1.0.2) and test app (1.0.1) differ. 
See http://g.co/androidstudio/app-test-app-conflict for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决这个问题，则需要在test依赖中手动指定&lt;code&gt;multidex&lt;/code&gt;的依赖是1.0.2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    androidTestCompile &#39;com.android.support:multidex:1.0.2&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以在全部依赖中强制使用1.0.2版本即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;configurations.all {
  resolutionStrategy {
    force &#39;com.android.support:multidex:1.0.2&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-fragment&#34;&gt;2. Fragment&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以考虑使用Fragment的&lt;code&gt;commitNow()&lt;/code&gt;同步方法代替异步&lt;code&gt;commit()&lt;/code&gt;，避免异步导致出现&lt;code&gt;Can not perform this action after onSaveInstanceState&lt;/code&gt;异常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以考虑使用FragmentTransaction.setAllowOptimization()优化fragment操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;0x04-参考&#34;&gt;0x04 参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/revisions.html#25-4-0&#34;&gt;support-library-25.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2016/02/android-support-library-232.html&#34;&gt;RecyclerView 23.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
