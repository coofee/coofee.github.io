<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Simple...</title>
    <link>http://coofee.github.io/series/android/</link>
    <description>Recent content in android on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Tue, 25 Jul 2017 19:43:30 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/series/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>android check app running foreground</title>
      <link>http://coofee.github.io/post/android-check-app-running-foreground/</link>
      <pubDate>Tue, 25 Jul 2017 19:43:30 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-check-app-running-foreground/</guid>
      <description>0x00 使用Application.ActivityLifecycleCallbacks检测App运行在前台/后台 import android.app.Activity; import android.app.ActivityManager; import android.app.Application; import android.content.Context; import android.os.Bundle; import android.os.Handler; import android.util.Log; import java.util.List; public class ApplicationLifecycle implements Application.ActivityLifecycleCallbacks { private Handler mHandler = new Handler(); private Runnable mCheck = new Runnable() { @Override public void run() { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; mCounter=&amp;quot; + mCounter); if (mCounter == 0) { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; get runningAppProcessInfo.&amp;quot;); final ActivityManager am = (ActivityManager) mAppContext.getSystemService(Context.ACTIVITY_SERVICE); // NOTE: getRunningAppProcess() ONLY GIVE YOU THE PROCESS OF YOUR OWN PACKAGE IN ANDROID M // BUT THAT&#39;S ENOUGH HERE List&amp;lt;ActivityManager.</description>
    </item>
    
    <item>
      <title>sha1-collision &amp; android signature algorithm</title>
      <link>http://coofee.github.io/post/upgrade-app-signature-algorithm/</link>
      <pubDate>Fri, 21 Jul 2017 18:35:56 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-app-signature-algorithm/</guid>
      <description>SHA1-Collision &amp;amp; Android Sign 参看SHA1-collision我们可以知道，SHA-1签名已经不安全了，签名算法可以考虑升级到SHA-2或者其他算法。
0x01 SHA1-Collision 1. SHA-1是什么？ SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）[2]。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数，参考：SHA-1
2. SHA1-Collision是什么？ 两个内容不同的数据，SHA-1算法会生成相同的摘要信息，参考：SHA1 collision Two PDF。
3. SHA1-Collision对Android的影响 Android SDK默认对apk使用SHA-1签名，在最坏的情况下，攻击者可以伪造SHA-1值相同的文件替换已签名apk中的文件来达到攻击的目的。
0x02 Android的证书验证机制 我们知道Android的Apk文件是一个压缩文件，文件结构大致如下:
. ├── AndroidManifest.xml ├── META-INF │ ├── CERT.RSA │ ├── CERT.SF │ └── MANIFEST.MF ├── assets ├── classes.dex ├── classes2.dex ├── classes3.dex ├── lib ├── res └── resources.arsc  apk相关的签名相关的文件在META-INF目录中，其中：
 MANIFEST.MF
遍历APK包中除了META-INF\文件夹以外的所有文件，利用SHA-1算法生成这些文件的消息摘要，然后转化为对应的base64编码。MANIFEST.MF存储的是文件的摘要值，保证完整性，防止文件被篡改。
 .SF
xx.SF文件（xx为使用者证书的自定义别名，默认为CERT，即CERT.SF），保存的是MANIFEST.MF的摘要值， 以及MANIFEST.MF中每一个摘要项的摘要值，然后转化成对应的base64编码。虽然该文件的后缀名.sf(SignatureFile)看起来是签名文件，但是并没有私钥参与运算，也不保存任何签名内容。
 .RSA/.DSA
.RSA/.DSA文件（后缀不同采用的签名算法不同，.RSA使用的是RSA算法，.DSA使用的是数字签名算法DSA，目前APK主要使用的是这两种算法），保存的是第二项.SF文件的数字签名，同时还会包括签名采用的数字证书（公钥）。特别说明，当使用多重证书签名时，每一个.sf文件必须有一个.RSA/.DSA文件与之对应，也就是说使用证书CERT1签名时有CERT1.SF和CERT1.RSA，同时采用证书CERT2签名时又会生成CERT2.SF和CERT2.RSA。
  Android 系统不允许安装没有任何数字签名的应用APK程序，所有应用程序必须使用某个证书进行签名（一般为应用开发者自签名证书），</description>
    </item>
    
    <item>
      <title>upgrade android support library to 25.4.0</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>Android升级Support库版本至25.4.0
[TOC]
0x00 背景 support库是google官方提供的支持库，其主要功能在于兼容android高/低版本系统（如：support-v4、support-v7库），同时伴随着support库的不同版本，也会发布同版本的各种UI组件库（如Design、RecyclerView等）。support库的每次更新升级，一般都会包括bug修复、性能优化以及功能改进等等。
目前我们App使用的版本是23.0.1，截止目前google发布的最新稳定版本是25.4.0，中间相差了将近20个版本，其中包含大量的bug修复；同时又因为Design、RecyclerView等UI库的很多新组件也依赖于support库的升级，所以我们计划将support-v4、support-v7、Design、RecyclerView等库统一升级至25.4.0版本。
0x01 打包环境的影响及解决方案 1. 升级JDK &amp;amp; Android SDK  升级JDK到1.8 升级Android SDK到25  2. 升级CentOS或GLIBC 由于我们的jenkins打包服务器的系统是CentOS 6.5，其默认支持的GLIBC库版本最高为2.12，而android sdk高版本需要的GLIBC版本为2.14，所以要么升级系统CentOS到7.x版本，要么升级GLIBC版本到2.14.
当Android SDK需要的GLIBC版本不匹配时，出错信息大致如下:
[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt) [exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)  在CentOS系统中，使用strings /lib64/libc.so.6 | grep GLIBC命令可以查看其支持的GLIBC库的版本。
3. 指定gradle使用jdk1.8 由于android sdk需要在jdk1.8环境才能正常编译、打包，所以要么在系统中配置java环境变量为jdk1.8版本；要么在执行gradle时指定其运行环境为jdk1.8。
指定gradle使用jdk1.8，具体配置如下：
gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8  也可以直接在gradle.properties中指定jdk版本，如下所示：
org.gradle.java.home=/usr/java/jdk1.8  4. support库与build-tools版本 由于我们app原本使用的build-tools版本是22.0.1，当保持build-tools版本不变，只升级support库版本时，在HUAWEI P7-L00 4.4.2上面运行时，会出现如下错误，推测是因为support库版本和build-tools主版本号不一致导致，所以如果升级support库版本，最好保持和build-tools主版本号一致，防止各种诡异问题。
E/AndroidRuntime: FATAL EXCEPTION: main Caused by: android.</description>
    </item>
    
  </channel>
</rss>