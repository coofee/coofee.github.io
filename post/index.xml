<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Simple... </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://coofee.github.io/post/</link>
    <language>en-us</language>
    <author>Coofee</author>
    
    <updated>Thu, 06 Sep 2018 19:36:14 CST</updated>
    
    <item>
      <title>golang dev</title>
      <link>http://coofee.github.io/post/golang-dev/</link>
      <pubDate>Thu, 06 Sep 2018 19:36:14 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/golang-dev/</guid>
      <description>

&lt;h1 id=&#34;配置golang开发环境-仅介绍mac平台&#34;&gt;配置Golang开发环境（仅介绍Mac平台）&lt;/h1&gt;

&lt;h2 id=&#34;install-homebrew&#34;&gt;install Homebrew&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-golang&#34;&gt;install golang&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install go
$ go version
go version go1.11 darwin/amd64

# 配置GOROOT
$ printf &amp;quot;\n\nexport GOROOT=/usr/local/Cellar/go/1.11/libexec \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# 配置GOPATH
$ mkdir -p ~/go/gopath
$ printf &amp;quot;export GOPATH=~/go/gopath \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# 追加到PATH
$ printf &amp;quot;export GOBIN=$GOROOT/bin \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
$ printf &amp;quot;export PATH=$PATH:$GOBIN:$GOPATH/bin \n\n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-privoxy&#34;&gt;install privoxy&lt;/h2&gt;

&lt;p&gt;privoxy可以将http请求代理到socks5，下面将 privoxy + shadowsocks 搭配使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install privoxy

# http代理地址
$ printf &amp;quot;\n\nlisten-address 0.0.0.0:7777 \n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config

# shadowsocks socks5代理地址
$ printf &amp;quot;forward-socks5 / 127.0.0.1:1080 .\n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config

# 内网地址不进行代理
$ printf &amp;quot;forward 192.168.*.*/ . \n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config
$ printf &amp;quot;forward 127.*.*.*/   . \n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config
$ printf &amp;quot;forward 10.*.*.*/    . \n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config
$ printf &amp;quot;forward *.xxx.com    . \n\n&amp;quot; &amp;gt;&amp;gt; /usr/local/etc/privoxy/config

# 启动privoxy服务
$ brew services start privoxy

# 配置http/https代理环境变量
$ printf &amp;quot;\n\nalias noproxy=&#39;unset http_proxy https_proxy&#39; \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
$ printf &amp;quot;alias goproxy=&#39;export http_proxy=127.0.0.1:7777 https_proxy=127.0.0.1:7777&#39; \n\n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
$ source ~/.bash_profile

# 测试代理
$ goproxy
$ curl -v www.google.com
$ noproxy
$ curl -v www.google.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-dep&#34;&gt;install dep&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install dep
$ dep version
dep:
 version     : v0.5.0
 build date  : 2018-07-26
 git hash    : 224a564
 go version  : go1.10.3
 go compiler : gc
 platform    : darwin/amd64
 features    : ImportDuringSolve=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置&lt;code&gt;~/.netrc&lt;/code&gt;使dep支持私有repo，在github中生成access_token，然后添加到&lt;code&gt;~/.netrc&lt;/code&gt;文件中即可，dep会自动使用&lt;code&gt;~/.netrc&lt;/code&gt;中的配置，操作如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ printf &amp;quot;\n\nmachine *.github.com
  login git_user
  password git_access_token \n&amp;quot; &amp;gt;&amp;gt; ~/.netrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/dep/blob/master/docs/FAQ.md#how-do-i-get-dep-to-authenticate-to-a-git-repo&#34;&gt;SEE FAQ: how-do-i-get-dep-to-authenticate-to-a-git-repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;dep可以使用branch/tag等作为版本号，一般为了保持依赖的稳定性，建议统一使用tag作为版本号。如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git tag v0.0.1
$ git push --tags
# 使用tag作为版本
$ dep ensure -v -add github.com/spf13/cobra@v0.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;golang-clone-source-code&#34;&gt;golang clone source code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/spf13/cobra $GOPATH/src/github.com/spf13/cobra &amp;amp;&amp;amp; cd $GOPATH/src/github.com/spf13/cobra 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>flutter</title>
      <link>http://coofee.github.io/post/flutter/</link>
      <pubDate>Thu, 06 Sep 2018 19:33:10 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/flutter/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;0x00-flutter&#34;&gt;0x00 Flutter&lt;/h1&gt;

&lt;p&gt;flutter是google开发的移动端UI框架，支持android和ios。该框架使用dart语言进行开发，在skia的基础上开发了一套公共组件达到android与ios共用代码的目的。&lt;/p&gt;

&lt;h2 id=&#34;1-flutter系统架构&#34;&gt;1. Flutter系统架构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/flutter_arch.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-platform-channels&#34;&gt;2. Platform Channels&lt;/h2&gt;

&lt;p&gt;flutter使用methodChannel/flutterMethodChannel来访问系统原生api。
&lt;img src=&#34;http://coofee.github.io/flutter/platform_channels.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;0x01-使用flutter开发应用程序&#34;&gt;0x01 使用Flutter开发应用程序&lt;/h1&gt;

&lt;h2 id=&#34;1-下载配置flutter-sdk&#34;&gt;1. 下载配置Flutter SDK&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;由于众所周知的原因，我们首先需要进行如下配置，让flutter通过国内镜像下载sdk等依赖。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;export PUB_HOSTED_URL=https://pub.flutter-io.cn
export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装sdk&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ git clone -b beta https://github.com/flutter/flutter.git
$ export PATH=`pwd`/flutter/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;flutter doctor&lt;/code&gt;检测本机环境，然后根据提示安装依赖软件。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ flutter doctor
Doctor summary (to see all details, run flutter doctor -v):
[✓] Flutter (Channel beta, v0.1.5, on Mac OS X 10.11.6 15G19009, locale zh-Hans)
[✓] Android toolchain - develop for Android devices (Android SDK 27.0.3)
[!] iOS toolchain - develop for iOS devices (Xcode 7.2.1)
    ✗ Flutter requires a minimum Xcode version of 9.0.0.
      Download the latest version or update via the Mac App Store.
    ✗ ios-deploy not installed. To install:
        brew install ios-deploy
    ✗ CocoaPods not installed.
        CocoaPods is used to retrieve the iOS platform side&#39;s plugin code that responds to your plugin usage on the Dart side.
        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.
        For more info, see https://flutter.io/platform-plugins
      To install:
        brew install cocoapods
        pod setup
[✓] Android Studio (version 3.0)
[✓] Android Studio (version 2.3)
[!] IntelliJ IDEA Community Edition (version 2017.2.6)
    ✗ Flutter plugin not installed; this adds Flutter specific functionality.
[!] VS Code (version 1.21.0)
[!] Connected devices
    ! No devices available

! Doctor found issues in 4 categories.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-使用android-studio开发demo&#34;&gt;2. 使用Android Studio开发Demo&lt;/h2&gt;

&lt;h3 id=&#34;1-创建应用&#34;&gt;1. 创建应用&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/create_flutter_app_1.png&#34; alt=&#34;创建flutter应用&#34; /&gt;
&lt;img src=&#34;http://coofee.github.io/flutter/create_flutter_app_2.png&#34; alt=&#34;创建flutter应用&#34; /&gt;
&lt;img src=&#34;http://coofee.github.io/flutter/create_flutter_app_3.png&#34; alt=&#34;创建flutter应用&#34; /&gt;
&lt;img src=&#34;http://coofee.github.io/flutter/create_flutter_app_4.png&#34; alt=&#34;创建flutter应用&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-项目结构&#34;&gt;2. 项目结构&lt;/h3&gt;

&lt;p&gt;使用android studio创建出来的项目目录结构大致如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ios&lt;/code&gt;目录包含了ios的全部代码可以直接使用xcode（需要9.0+版本）进行开发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android&lt;/code&gt;目录包含了android的全部代码，直接使用android studio开发即可。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib&lt;/code&gt;目录中包含了两端通用的dart代码，在打包生成应用时，全部的dart代码会被编译为本地代码（如在android端，会被直接编译为so文件）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/app_struct.png&#34; alt=&#34;Flutter应用项目结构&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-调试与运行&#34;&gt;3. 调试与运行&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;选择android/ios设备，然后点击运行按钮就可以将应用运行到android/ios设备上。
&lt;img src=&#34;http://coofee.github.io/flutter/app_select_device_and_run.png&#34; alt=&#34;选择设备运行&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;点击调试安妮运行app，就可以调试dart代码，调试界面与java完全一样。
&lt;img src=&#34;http://coofee.github.io/flutter/app_debug.png&#34; alt=&#34;应用调试&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-热加载&#34;&gt;4. 热加载&lt;/h3&gt;

&lt;p&gt;flutter中热加载的概念和android开发中的Instant run类似，同样也是点击⚡️按钮启用热加载功能。但是其拥有以下优点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;点击保存按钮或者保存快捷键，也会触发热加载功能（⚡️按钮功能相同）。&lt;/li&gt;
&lt;li&gt;热加载会&lt;strong&gt;保留先前的状态&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快！快！快！&lt;/strong&gt; 代码增量编译在秒级别，单行代码改变反应到应用程序UI改变耗时约&lt;strong&gt;1.5秒&lt;/strong&gt;左右。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以大家就可以像写web页面一样，可以边写-&amp;gt;边保存-&amp;gt;边查看效果，开发效率大大加快有没有，再也不用等等等有没有。。。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;热加载前&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;代码变动&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;热加载后&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;可以看到应用程序的计数器的值是2. &lt;img src=&#34;http://coofee.github.io/flutter/app_hot_reload_before.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;修改字符显示，添加“吼吼吼吼”到文本中，然后保存触发热加载。&lt;img src=&#34;http://coofee.github.io/flutter/app_hot_reload_with_state.png&#34; alt=&#34;带状态的应用热启动&#34; /&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;可以看到文本字符发生改变，但是计数器的值未发生变化，仍然是2.&lt;img src=&#34;http://coofee.github.io/flutter/app_hot_reload_after.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;5-应用程序结构与兼容性&#34;&gt;5. 应用程序结构与兼容性&lt;/h3&gt;

&lt;h4 id=&#34;1-应用程序结构-flutter-flutter&#34;&gt;1. 应用程序结构![](/flutter//flutter/&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Debug (slow mode模式)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先我们打开项目根目录中的&lt;code&gt;build&lt;/code&gt;文件夹，该文件包含了编译app的全部生成文件，其结构与android应用程序一致（注意：&lt;strong&gt;&lt;code&gt;build&lt;/code&gt;目录在android studio中不显示，可以通过terminal打开或查看&lt;/strong&gt;）。
&lt;img src=&#34;http://coofee.github.io/flutter/apk_location.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接下来，我们可以通过android studio直接打开该apk，可以发现仅仅只有一个页面的flutter应用大小已经达到了&lt;strong&gt;25MB&lt;/strong&gt;左右，分析其结构（见下图），其包含了全部abi类型的so文件，导致apk整体比较大，排除掉&lt;code&gt;x86&lt;/code&gt;、&lt;code&gt;x86_64&lt;/code&gt;平台的so文件之后，apk整体大小约&lt;strong&gt;11MB&lt;/strong&gt;左右。
&lt;img src=&#34;http://coofee.github.io/flutter/apk_struct_with_dart-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用release模式时，apk大小约&lt;strong&gt;8.1MB&lt;/strong&gt;，大小比较正常。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/apk_struct_mode_release.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-应用程序兼容性&#34;&gt;2. 应用程序兼容性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;andorid最低支持到 api 16;&lt;/li&gt;
&lt;li&gt;ios最低支持到ios 8.0;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-开发toast模块&#34;&gt;3. 开发Toast模块&lt;/h2&gt;

&lt;p&gt;这里我们直接使用android studio进行开发，如果大家需要直接使用flutter进行创建的话，可以直接参考&lt;a href=&#34;https://flutter.io/platform-channels/&#34;&gt;platform-channels&lt;/a&gt;进行开发。&lt;/p&gt;

&lt;h3 id=&#34;1-使用dart编写公共的toast模块&#34;&gt;1. 使用dart编写公共的toast模块&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/services.dart&#39;;

// 下划线开头的变量只在当前package中可见。
const _toast = const MethodChannel(&#39;com.coofee.flutterdemoapp/sdk/toast&#39;);

const int _LENGTH_SHORT = 0;

const int _LENGTH_LONG = 1;

void show(String text, int duration) async {
  try {
    await _toast.invokeMethod(&amp;quot;show&amp;quot;, {&#39;text&#39;: text, &#39;duration&#39;: duration});
  } on Exception catch (e) {
    print(e);
  } on Error catch (e) {
    print(e);
  }
}

void showShort(String text) {
  show(text, _LENGTH_SHORT);
}

void showLong(String text) {
  show(text, _LENGTH_LONG);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-编写android端的代码并注册&#34;&gt;2. 编写android端的代码并注册&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.coofee.flutterdemoapp;

import android.os.Bundle;
import android.widget.Toast;

import io.flutter.app.FlutterActivity;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugins.GeneratedPluginRegistrant;

public class MainActivity extends FlutterActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        GeneratedPluginRegistrant.registerWith(this);

        new MethodChannel(getFlutterView(), &amp;quot;com.coofee.flutterdemoapp/sdk/toast&amp;quot;)
                .setMethodCallHandler(new MethodChannel.MethodCallHandler() {
                    @Override
                    public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) {
                        if (&amp;quot;show&amp;quot;.equals(methodCall.method)) {
                            String text = methodCall.argument(&amp;quot;text&amp;quot;);
                            int duration = methodCall.argument(&amp;quot;duration&amp;quot;);
                            Toast.makeText(MainActivity.this, text, duration).show();
                        }
                    }
                });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-编写ios端代码并注册&#34;&gt;3. 编写ios端代码并注册&lt;/h3&gt;

&lt;p&gt;ios端的代码与android端类似，但是需要使用&lt;code&gt;FlutterMethodChannel&lt;/code&gt;进行处理，其他操作与android端一致，打开&lt;code&gt;AppDelegate.m&lt;/code&gt;文件，添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
  [GeneratedPluginRegistrant registerWithRegistry:self];

  FlutterViewController* controller = (FlutterViewController*)self.window.rootViewController;

  FlutterMethodChannel* toastChannel = [FlutterMethodChannel
                                            methodChannelWithName:@&amp;quot;com.coofee.flutterdemoapp/sdk/toast&amp;quot;
                                            binaryMessenger:controller];

  [toastChannel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {
      if ([@&amp;quot;show&amp;quot; isEqualToString:call.method]) {
          // 展示toast;
          NSLog(@&amp;quot;显示toast....&amp;quot;)
      }
  }];

  // Override point for customization after application launch.
  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-在flutter中调用toast模块&#34;&gt;4. 在flutter中调用toast模块&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;sdk/toast.dart&#39;;

void _incrementCounter() {
  showShort(&#39;你点击了$_counter次&#39;);

  setState(() {
    // This call to setState tells the Flutter framework that something has
    // changed in this State, which causes it to rerun the build method below
    // so that the display can reflect the updated values. If we changed
    // _counter without calling setState(), then the build method would not be
    // called again, and so nothing would appear to happen.
    _counter++;
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-效果&#34;&gt;5. 效果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/toast_show.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;0x02-使用dart-2&#34;&gt;0x02 使用Dart 2&lt;/h1&gt;

&lt;h2 id=&#34;1-升级flutter-sdk&#34;&gt;1. 升级flutter sdk&lt;/h2&gt;

&lt;p&gt;使用dart 2时，必须保证，Flutter SDK版本必须大于等于以下版本:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beta channel: build 0.1.4 from 2018-02-19, or later&lt;/li&gt;
&lt;li&gt;Dev channel: build from 2018-02-22, or later&lt;/li&gt;
&lt;li&gt;Master channel: build from 2018-02-20, or later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Terminal中执行&lt;code&gt;flutter --version&lt;/code&gt;命令，查看flutter的版本:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;→ flutter --version
Flutter 0.1.5 • channel beta • https://github.com/flutter/flutter.git
Framework • revision 3ea4d06340 (3 weeks ago) • 2018-02-22 11:12:39 -0800
Engine • revision ead227f118
Tools • Dart 2.0.0-dev.28.0.flutter-0b4f01f759
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Terminal中执行&lt;code&gt;flutter upgrade&lt;/code&gt;可以升级flutter。&lt;/p&gt;

&lt;h2 id=&#34;2-在android-studio中启用dart-2&#34;&gt;2. 在android studio中启用dart 2&lt;/h2&gt;

&lt;p&gt;在android studio中启用dart2后，需要重启android studio使其生效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/dart-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-dart-1-vs-dart-2&#34;&gt;3. dart 1 vs dart 2&lt;/h2&gt;

&lt;p&gt;从下图可以看出dart2相对于dart1来说，省略了关键字&lt;code&gt;new&lt;/code&gt;，使得声明式布局的可读性更进一步。
&lt;img src=&#34;http://coofee.github.io/flutter/dart1_vs_dart2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-dart2对apk大小的影响&#34;&gt;4. dart2对apk大小的影响&lt;/h2&gt;

&lt;p&gt;从下图可以看出来，使用dart2时生成的apk比dart1打5MB左右(slow mode模式)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/apk_dart1_vs_dart2_cut.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;0x03-flutter-s-modes&#34;&gt;0x03 Flutter&amp;rsquo;s modes&lt;/h1&gt;

&lt;p&gt;从下图我们可以看到，flutter mode显示在在app的右上角。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/flutter/mode_slow.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;flutter的应用程序有以下4中模式，分别使用不同的命令生成，且不同模式下生成的应用大小不一（如：release模式会去掉x86相关的so文件）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;mode&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;命令&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;debug&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;flutter run&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;debug模式下的产物，且应用的右上角会显示&lt;code&gt;slow mode&lt;/code&gt;字样，支持debug。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;release&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;flutter run &amp;ndash;release&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UI上面不显示模式；禁止debug，且删除了debug相关的信息；关闭全部的断言检测，减小包大小，使其达到最佳性能。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;profile&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;flutter run &amp;ndash;profile&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;调试性能，不支持模拟器。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;test&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;flutter test&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;和debug模式类似，不支持headless和桌面平台。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;0x04-参考引用&#34;&gt;0x04 参考引用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1cw7A4HbvM_Abv320rVgPVGiUP2msVs7tfGbkgdrTy0I/edit#slide=id.gbb3c3233b_0_162&#34;&gt;Flutter System Architecture
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.io/platform-channels/&#34;&gt;platform-channels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/wiki/Using-Flutter-in-China&#34;&gt;Using-Flutter-in-China&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.io/get-started/install/&#34;&gt;install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/wiki/Flutter%27s-modes&#34;&gt;flutter-modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/wiki/Trying-the-preview-of-Dart-2-in-Flutter&#34;&gt;flutter-with-dart-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gradle plugin 3.0 &amp; Android Studio 3.0</title>
      <link>http://coofee.github.io/post/upgrade-android-studio-gradle/</link>
      <pubDate>Fri, 15 Sep 2017 18:59:41 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/upgrade-android-studio-gradle/</guid>
      <description>

&lt;h1 id=&#34;gradle-plugin-3-0-android-studio-3-0&#34;&gt;Gradle plugin 3.0 &amp;amp; Android Studio 3.0&lt;/h1&gt;

&lt;p&gt;我们主要讲一下升级gradle plugin 3.0过程中遇到的问题与解决方案。&lt;/p&gt;

&lt;h1 id=&#34;gradle-plugin-3-0&#34;&gt;Gradle Plugin 3.0&lt;/h1&gt;

&lt;h2 id=&#34;1-升级gradle-plugin插件版本为3-x&#34;&gt;1. 升级gradle plugin插件版本为3.x&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {
    repositories {
        mavenLocal()
        jcenter()
         // You need to add the following repository to download the
        // for new plugin.
        google()

    }
    dependencies {
	    classpath &#39;com.android.tools.build:gradle:3.0.0-beta2&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-升级gradle版本为4-1&#34;&gt;2. 升级gradle版本为4.1&lt;/h2&gt;

&lt;p&gt;修改&lt;code&gt;gradle/wrapper/gradle-wrapper.properties&lt;/code&gt;中的&lt;code&gt;distributionUrl&lt;/code&gt;为&lt;code&gt;gradle-4.1-all&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-升级build-tools为-25-0-3&#34;&gt;3. 升级build-tools为&lt;code&gt;25.0.3&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The specified Android SDK Build Tools version (22.0.1) is ignored, as it is below the minimum supported version (25.0.0) for Android Gradle Plugin 3.0.0-beta2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;2-dsl-changes&#34;&gt;2. DSL Changes&lt;/h1&gt;

&lt;h2 id=&#34;1-enforceuniquepackagename被删除&#34;&gt;1. enforceUniquePackageName被删除&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
// enforceUniquePackageName已经被删除，需要删除。
//	enforceUniquePackageName = false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-consumerproguardfiles不支持filetree&#34;&gt;2. consumerProguardFiles不支持fileTree&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
// 不支持这种写法
// consumerProguardFiles fileTree(dir: projectDir, include: &#39;proguard*&#39;)

// 支持这种写法
consumerProguardFiles &#39;proguard.pro&#39;,&#39;proguard-fresco.pro&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-aapt2&#34;&gt;3. aapt2&lt;/h2&gt;

&lt;p&gt;aapt2是支持增量编译资源开发，目前不支持&lt;code&gt;Robelectric&lt;/code&gt;，并且在一些情况下会导致编译失败，此时可以选择关闭aapt2。&lt;/p&gt;

&lt;p&gt;在根项目的&lt;strong&gt;gradle.properties&lt;/strong&gt;文件中添加&lt;code&gt;android.enableAapt2=false&lt;/code&gt;，然后在终端中执行&lt;code&gt;./gradlew --stop&lt;/code&gt;即可，更新信息可以参考&lt;a href=&#34;https://developer.android.com/studio/build/gradle-plugin-3-0-0.html&#34;&gt;gradle-plugin-3-0-0&lt;/a&gt;。
。&lt;/p&gt;

&lt;h2 id=&#34;4-not-support-local-aar&#34;&gt;4. not support local aar&lt;/h2&gt;

&lt;p&gt;While using this plugin with Android Studio, dependencies on local AAR files are not yet supported.&lt;/p&gt;

&lt;h2 id=&#34;5-not-support-protobuf-plugin&#34;&gt;5. not support protobuf plugin&lt;/h2&gt;

&lt;p&gt;Does not currently work with the Protobuf plugin.&lt;/p&gt;

&lt;h2 id=&#34;6-not-support-android-apt&#34;&gt;6. not support android-apt&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The third party android-apt plugin is no longer supported. You should switch to the &lt;a href=&#34;https://developer.android.com/studio/preview/features/index.html#annotationProcessor_config&#34;&gt;built-in annotation processor support&lt;/a&gt;, which has been improved to handle resolving dependencies lazily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-support-java-1-8&#34;&gt;7. support java 1.8&lt;/h2&gt;

&lt;p&gt;当前已经支持java 8的部分特性，但是使用java 8某些特性可能会导致编译失败，可以手动禁止使用java 8的特性。在根项目的&lt;strong&gt;gradle.properties&lt;/strong&gt;文件中添加&lt;code&gt;android.enableDesugar=false&lt;/code&gt;即可，更多信息可以参考&lt;a href=&#34;https://developer.android.com/studio/write/java8-support.html#disable&#34;&gt;disable Java 8 language features&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;4-bug-solution&#34;&gt;4. Bug &amp;amp; Solution&lt;/h1&gt;

&lt;h2 id=&#34;1-解决multidex插件错误&#34;&gt;1. 解决multidex插件错误&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;FAILURE: Build failed with an exception.
What went wrong:
A problem occurred configuring project &amp;lsquo;:app&amp;rsquo;.
&amp;gt; Failed to notify project evaluation listener.
Cannot invoke method doLast() on null object
No such property: multiDex for class: com.android.build.gradle.internal.transforms.DexTransform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于目前使用的gradle插件版本的DSL已经支持了&lt;code&gt;additionalParameters&lt;/code&gt;，所以我们移除了自己编写的用于给&lt;code&gt;dx&lt;/code&gt;追加&lt;code&gt;additionalParameters&lt;/code&gt;参数的插件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dexOptions {
    additionalParameters = [&amp;quot;--minimal-main-dex&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-aop插件gradle-android-plugin-aspectjx兼容&#34;&gt;2. aop插件gradle-android-plugin-aspectjx兼容&lt;/h2&gt;

&lt;p&gt;启用aop编译时，会出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unexpected scopes found in folder &amp;lsquo;/Users/zhaocongying/program/git_proj/new_arch/test_gradle/ClientProject/WuxianClient/build/intermediates/transforms/AspectTransform/debug&amp;rsquo;. Required: PROJECT, SUB_PROJECTS, EXTERNAL_LIBRARIES. Found: EXTERNAL_LIBRARIES, PROJECT, PROJECT_LOCAL_DEPS, SUB_PROJECTS, SUB_PROJECTS_LOCAL_DEPS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在项目对应的github上面已经有人提出了类似的
&lt;a href=&#34;https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/issues/45&#34;&gt;issue: java.lang.RuntimeException: Unexpected scopes found in folder&lt;/a&gt;，但是一直没有修复。&lt;/p&gt;

&lt;p&gt;首先，我们知道在&lt;code&gt;Transform&lt;/code&gt;中，&lt;code&gt;getScopes()&lt;/code&gt;方法的返回值表示了这个&lt;code&gt;Transform&lt;/code&gt;可以处理的文件类型，那么根据报错信息，我们可以知道aspect插件的&lt;code&gt;getScopes()&lt;/code&gt;的方法返回了错误的类型导致编译终止。&lt;/p&gt;

&lt;p&gt;撸一眼gradle plugin 3.x版本的&lt;code&gt;QualifiedContent.Scope&lt;/code&gt;类，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
 * The scope of the content.
 *
 * &amp;lt;p&amp;gt;
 * This indicates what the content represents, so that Transforms can apply to only part(s)
 * of the classes or resources that the build manipulates.
 */
enum Scope implements ScopeType {
    /** Only the project content */
    PROJECT(0x01),
    /** Only the sub-projects. */
    SUB_PROJECTS(0x04),
    /** Only the external libraries */
    EXTERNAL_LIBRARIES(0x10),
    /** Code that is being tested by the current variant, including dependencies */
    TESTED_CODE(0x20),
    /** Local or remote dependencies that are provided-only */
    PROVIDED_ONLY(0x40),

    /**
     * Only the project&#39;s local dependencies (local jars)
     *
     * @deprecated local dependencies are now processed as {@link #EXTERNAL_LIBRARIES}
     */
    @Deprecated
    PROJECT_LOCAL_DEPS(0x02),
    /**
     * Only the sub-projects&#39;s local dependencies (local jars).
     *
     * @deprecated local dependencies are now processed as {@link #EXTERNAL_LIBRARIES}
     */
    @Deprecated
    SUB_PROJECTS_LOCAL_DEPS(0x08);

    private final int value;

    Scope(int value) {
        this.value = value;
    }

    @Override
    public int getValue() {
        return value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以知道&lt;code&gt;PROJECT_LOCAL_DEPS&lt;/code&gt;和&lt;code&gt;SUB_PROJECTS_LOCAL_DEPS&lt;/code&gt;这两个类型目前都属于&lt;code&gt;EXTERNAL_LIBRARIES&lt;/code&gt;类型，并且已经不推荐使用，所以解决方案就呼之欲出了: &lt;strong&gt;在gradle plugin的不同版本返回不同的scops集合即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;那么如何区分不同的gradle插件版本呢？&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;我们知道在2.x版本中&lt;code&gt;PROJECT_LOCAL_DEPS&lt;/code&gt;和&lt;code&gt;SUB_PROJECTS_LOCAL_DEPS&lt;/code&gt;都是可用的，直到3.x才被标记为了不推荐，所以，我们可以通过获取这两个枚举常量的注解来解决这个问题，具体修改代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;@Override
Set&amp;lt;QualifiedContent.Scope&amp;gt; getScopes() {
    def name = QualifiedContent.Scope.PROJECT_LOCAL_DEPS.name()
    def deprecated = QualifiedContent.Scope.PROJECT_LOCAL_DEPS.getClass()
            .getField(name).getAnnotation(Deprecated.class)

    if (deprecated == null) {
        println &amp;quot;cannot find QualifiedContent.Scope.PROJECT_LOCAL_DEPS Deprecated.class &amp;quot;
        return ImmutableSet.&amp;lt;QualifiedContent.Scope&amp;gt; of(QualifiedContent.Scope.PROJECT
                , QualifiedContent.Scope.PROJECT_LOCAL_DEPS
                , QualifiedContent.Scope.EXTERNAL_LIBRARIES
                , QualifiedContent.Scope.SUB_PROJECTS
                , QualifiedContent.Scope.SUB_PROJECTS_LOCAL_DEPS)
    } else {
        println &amp;quot;find QualifiedContent.Scope.PROJECT_LOCAL_DEPS Deprecated.class &amp;quot;
        return ImmutableSet.&amp;lt;QualifiedContent.Scope&amp;gt; of(QualifiedContent.Scope.PROJECT
                , QualifiedContent.Scope.EXTERNAL_LIBRARIES
                , QualifiedContent.Scope.SUB_PROJECTS)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于目前我们发起的&lt;a href=&#34;https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/pull/54&#34;&gt;pull request&lt;/a&gt;仍然没有被合并，所以我们发布了&lt;code&gt;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.11.1&lt;/code&gt;到公司内部的maven仓库来解决目前的问题。&lt;/p&gt;

&lt;h2 id=&#34;3-修复替换登录库so文件的插件&#34;&gt;3. 修复替换登录库So文件的插件&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;FAILURE: Build failed with an exception.&lt;/p&gt;

&lt;p&gt;What went wrong:&lt;br /&gt;
Execution failed for task &amp;lsquo;:  WuxianClient:transformNativeLibsWithMergeJniLibsForDebug&amp;rsquo;.
More than one file was found with OS independent path &amp;lsquo;lib/armeabi/libcom_cc_aes_ExecV4_0_1.so&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于升级插件之后，我们hook的替换so文件时的task名称发生了变化，从&lt;code&gt;transformNative_libsWithMergeJniLibsForDebug&lt;/code&gt;变成了
&lt;code&gt;transformNativeLibsWithMergeJniLibsForDebug&lt;/code&gt;，对此进行兼容即可。&lt;/p&gt;

&lt;h2 id=&#34;4-tinker-1-7-5版本插件兼容&#34;&gt;4. Tinker 1.7.5版本插件兼容&lt;/h2&gt;

&lt;h3 id=&#34;1-unexpected-scopes-found-in-folder-aspecttransform-debug-required-project-sub-projects-external-libraries&#34;&gt;1. Unexpected scopes found in folder &amp;lsquo;/AspectTransform/debug&amp;rsquo; Required: &lt;code&gt;PROJECT, SUB_PROJECTS, EXTERNAL_LIBRARIES&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Unexpected scopes found in folder &amp;lsquo;/Users/zhaocongying/program/git_proj//new_arch/test_gradle/ClientProject/WuxianClient/build/intermediates/transforms/AspectTransform/debug&amp;rsquo;. Required: PROJECT, SUB_PROJECTS, EXTERNAL_LIBRARIES. Found: EXTERNAL_LIBRARIES, PROJECT, PROJECT_LOCAL_DEPS, SUB_PROJECTS, SUB_PROJECTS_LOCAL_DEPS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们目前使用的tinker版本仍然是1.7.5，未使用到&lt;code&gt;AuxiliaryInjectTransform&lt;/code&gt;，所以这里我们直接干掉了&lt;code&gt;AuxiliaryInjectTransform&lt;/code&gt;，如果需要修复的话，可以使用上文aop插件的修复方案.&lt;/p&gt;

&lt;h3 id=&#34;2-unknown-property-apkvariantdata&#34;&gt;2. unknown property &amp;lsquo;apkVariantData&amp;rsquo;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;[exec] A problem occurred configuring project &amp;lsquo;:WuxianClient&amp;rsquo;.
 [exec] &amp;gt; Could not get unknown property &amp;lsquo;apkVariantData&amp;rsquo; for object of type com.android.build.gradle.internal.api.ApplicationVariantImpl.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个是因为在2.x中的&lt;code&gt;getApkVariantData()&lt;/code&gt;函数在3.x中被修改成了&lt;code&gt;getVariantData()&lt;/code&gt;，所以&lt;code&gt;ApplicationVariantImpl&lt;/code&gt;类的&lt;code&gt;apkVariantData&lt;/code&gt;属性就不存在了；这是因为groovy会为get函数映射一个对应的属性，如getApkVariantData()函数就被映射出了apkVariantData属性。&lt;/p&gt;

&lt;p&gt;由于在2.x与3.x的&lt;code&gt;ApplicationVariantImpl&lt;/code&gt;类中一直存在&lt;code&gt;variantData&lt;/code&gt;属性，为了同时兼容2.x和3.x，这里我们使用&lt;code&gt;variant.getProperty(&#39;variantData&#39;)&lt;/code&gt;来替换先前的&lt;code&gt;variant.apkVariantData&lt;/code&gt;写法。&lt;/p&gt;

&lt;h3 id=&#34;3-unknown-property-resdir&#34;&gt;3. unknown property &amp;lsquo;resDir&amp;rsquo;&lt;/h3&gt;

&lt;p&gt;原始写法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;applyResourceTask.resDir = variantOutput.processResources.resDir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;兼容2.x与3.x:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;if (variantOutput.processResources.properties[&#39;resDir&#39;] != null) {
    applyResourceTask.resDir = variantOutput.processResources.resDir;
} else if (variantOutput.processResources.properties[&#39;resPackageOutputFolder&#39;] != null){
    def resPackageOutputFolder = new File(&amp;quot;${variantOutput.processResources.resPackageOutputFolder}&amp;quot;);
    applyResourceTask.resDir = &amp;quot;${resPackageOutputFolder.parentFile.absolutePath}/merged/${resPackageOutputFolder.name}&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-unknown-property-manifestoutputfile&#34;&gt;4. unknown property &amp;lsquo;manifestOutputFile&amp;rsquo;&lt;/h3&gt;

&lt;p&gt;原始写法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;manifestTask.manifestPath = variantOutput.processManifest.manifestOutputFile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;兼容2.x与3.x:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;if (variantOutput.processManifest.properties[&#39;manifestOutputFile&#39;] != null) {
    manifestTask.manifestPath = variantOutput.processManifest.manifestOutputFile;
} else if (variantOutput.processResources.properties[&#39;manifestFile&#39;] != null){
    manifestTask.manifestPath = variantOutput.processResources.manifestFile;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;综上，由于目前tinker已经发布了N多新版本，所以我们没有发起pull-request，而是在公司内部maven上面发布了1.7.5.1版本。&lt;/p&gt;

&lt;h2 id=&#34;5-packager打包插件兼容&#34;&gt;5. Packager打包插件兼容&lt;/h2&gt;

&lt;h3 id=&#34;1-cannot-invoke-method-dolast-on-null-object&#34;&gt;1. Cannot invoke method doLast() on null object&lt;/h3&gt;

&lt;p&gt;在3.x版本中，本地开发开启增量编译时，不会生成&lt;code&gt;transformClassesWithDexForDebug&lt;/code&gt;这个task，使用前需要进行判空。&lt;/p&gt;

&lt;h3 id=&#34;2-unknown-property-manifestoutputfile&#34;&gt;2. unknown property &amp;lsquo;manifestOutputFile&amp;rsquo;&lt;/h3&gt;

&lt;p&gt;修复方案见Tinker热修复本节。&lt;/p&gt;

&lt;h3 id=&#34;3-删除walle预生成dex文件&#34;&gt;3. 删除walle预生成dex文件&lt;/h3&gt;

&lt;p&gt;由于walle插件与gradle plugin 3.0冲突，所以我们关闭了walle插件，然而由于先前在发布aar文件时，walle预生成了dex并存放到了assets/dexs目录中，导致本地打包生成的apk文件的assets/dexs中包含了全部的预生成dex文件，进而导致apk文件过大。&lt;/p&gt;

&lt;p&gt;目前使用临时方案解决这个问题，在合并assets资源之前，我们删除掉了walle预先生成的dex文件，代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;project.gradle.taskGraph.beforeTask { Task task -&amp;gt;
    if (mergeAssetsName == task.name) {
        removeWalleDexsInAssetsBeforeTask(task);
    }
}

public static void removeWalleDexsInAssetsBeforeTask(Task task) {
    task.inputs.getFiles().each { File file -&amp;gt;
        println &amp;quot;AssetsUtils.removeWalleDexsInAssetsBeforeTask: file=${file}&amp;quot;;
        def dexsDir = new File(file, &#39;dexs&#39;);
        if (dexsDir.exists() &amp;amp;&amp;amp; dexsDir.isDirectory()
                &amp;amp;&amp;amp; (file.absolutePath.contains(&#39;intermediates&#39;) || file.absolutePath.contains(&#39;.gradle&#39;))) {
            def result = dexsDir.deleteDir();
            println &amp;quot;AssetsUtils.removeWalleDexsInAssetsBeforeTask: delete $dexsDir successed? $result&amp;quot;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终待全部升级之后，可以通过重新发布不带dex的aar来解决这个问题。&lt;/p&gt;

&lt;h3 id=&#34;4-com-android-dex-dexexception-library-dex-files-are-not-supported-in-multi-dex-mode&#34;&gt;4. com.android.dex.DexException: Library dex files are not supported in multi-dex mode&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;[exec] Dex: Error converting bytecode to dex:
[exec] Cause: com.android.dex.DexException: Library dex files are not supported in multi-dex mode&lt;br /&gt;
[exec]     UNEXPECTED TOP-LEVEL EXCEPTION:&lt;br /&gt;
[exec]     com.android.dex.DexException: Library dex files are not supported in multi-dex mode&lt;br /&gt;
[exec]         at com.android.dx.command.dexer.Main.runMultiDex(Main.java:371)&lt;br /&gt;
[exec]         at com.android.dx.command.dexer.Main.run(Main.java:275)&lt;br /&gt;
[exec]         at com.android.dx.command.dexer.Main.main(Main.java:245)&lt;br /&gt;
[exec]         at com.android.dx.command.Main.main(Main.java:106)&lt;br /&gt;
[exec]&lt;br /&gt;
[exec] org.gradle.api.tasks.TaskExecutionException: Execution failed for task &amp;lsquo;:WuxianClient:transformClassesWithDexForRelease&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个问题看起来像是multidex导致的一个问题，但是在本地编译期间并未出现该问题，只有在jenkins上面编译才出现了该问题。&lt;/p&gt;

&lt;p&gt;根据错误信息google一番，基本上能搜索到的信息都说是由于pre-dexing与multidex冲突导致该问题产生，如:&lt;a href=&#34;https://stackoverflow.com/questions/25696933/android-gradle-dexexception-library-dex-files-are-not-supported-in-multi-dex-m&#34;&gt;StackOverflow&lt;/a&gt;。
(注: pre-dexing指的是为了加快增量编译，而预先将aar的java代码转换为dex的一种方法)。&lt;/p&gt;

&lt;p&gt;通过错误信息+搜索结果，我们可以推测出，在执行转dex的task时，其输入文件中包含dex文件，那么转dex的task的输入文件是从哪里来的呢？&lt;/p&gt;

&lt;p&gt;查看日志文件，我们可以知道在release模式下转dex的task的执行顺序大致如下，其中上一次task的输出是下一个task的输入，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; transformClassesAndResourcesWithProguardForRelease (混淆优化java代码生成jar文件)
-&amp;gt; transformClassesWithMultidexlistForRelease (生成main dex list)
-&amp;gt; transformClassesWithDexForRelease (将jar转换为dex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于&lt;code&gt;transformClassesWithMultidexlistForRelease&lt;/code&gt;只是生成mainDexList，并未对&lt;code&gt;transformClassesAndResourcesWithProguardForRelease&lt;/code&gt;生成的jar文件进行任何处理，所以jar文件最终会作为&lt;code&gt;transformClassesWithDexForRelease&lt;/code&gt;的输入jar被&lt;code&gt;dx&lt;/code&gt;转换为dex文件。当&lt;code&gt;dx&lt;/code&gt;在对jar文件进行转换时发现输入的文件中包含&lt;code&gt;dex&lt;/code&gt;文件，就会抛出了上面的错误信息。&lt;/p&gt;

&lt;p&gt;进入proguard对应的&lt;code&gt;transformClassesAndResourcesWithProguardForRelease&lt;/code&gt;输出文件目录&lt;code&gt;/build/intermediates/transforms/proguard/release/&lt;/code&gt;，打开&lt;strong&gt;0.jar&lt;/strong&gt;文件可以发现在该文件中确实存在一个&lt;strong&gt;classes.dex&lt;/strong&gt;文件，其目录结构大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.jar  
├── META-INF  
│   └── MANIFEST.MF  
├── assets  
├── classes.dex  
└── com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么知道了问题所在，解决起来就很容易了，&lt;strong&gt;我们只需要在proguard执行完成之后，过滤到其中的已经存在的dex文件即可&lt;/strong&gt;，但是，这个classes.dex文件属于谁？可以被删除吗？&lt;/p&gt;

&lt;p&gt;反编译上面提到的&lt;code&gt;classes.dex&lt;/code&gt;文件，通过包名我们可以发现该文件属于广点通sdk，解压缩后其文件目录结构如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GDTUnionSDK.4.8.520.min.jar  
├── META-INF  
│   └── MANIFEST.MF  
├── assets  
│   └── gdt_plugin  
│       └── gdtadv2.jar
│           └── classes.dex
└── com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入目录打开&lt;code&gt;gdtadv2.jar&lt;/code&gt;，也可以验证其中确实包括&lt;code&gt;classes.dex&lt;/code&gt;文件，至此，我们可以确认&lt;code&gt;classes.dex&lt;/code&gt;文件属于广点通sdk，并且是广点通sdk的assets目录的一个资源文件。&lt;/p&gt;

&lt;p&gt;我们知道assets资源文件编译后仍然会原封不动的合并到apk的assets目录中，所以我们猜测proguard在处理文件时将广点通assets目录的gdtadv2.jar提取出classes.dex并打包进0.jar应该是一个bug，classes.dex应该是可以安全删除的，我们可以在打包成功之后进行验证测试。&lt;/p&gt;

&lt;p&gt;重新打包生成apk进行验证，发现apk的assets目录中并没有&lt;strong&gt;gdt_plugin/gdtadv2.jar&lt;/strong&gt;文件，并没有，没有，没。。。&lt;/p&gt;

&lt;p&gt;出现这个问题是因为我们误解了&lt;code&gt;transformClassesAndResourcesWithProguardForRelease&lt;/code&gt;这个task的含义，该task包含两层意思：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;transform classes with proguard&lt;/li&gt;
&lt;li&gt;transform resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面我们已经之后，在transform resources的时候出错了，它将&lt;strong&gt;assets/gdt_plugin/gdtadv2.jar&lt;/strong&gt;文件中的classes.dex提取到了jar文件的根目录&lt;strong&gt;classes.dex&lt;/strong&gt;，破坏了assets目录的结构，所以我们解决这个问题需要做两件事:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;删除0.jar根目录的&lt;strong&gt;classes.dex&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在0.jar中插入&lt;strong&gt;assets/gdt_plugin/gdtadv2.jar&lt;/strong&gt;文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def proguardTask = project.getTasksByName(proguardTaskName, false).getAt(0);
if (proguardTask != null) {
    proguardTask.doLast {
        ProguardUtils.removeDexAndJavaInProguardJar(proguardTask);
    }
} 

public static void removeDexAndJavaInProguardJar(Task task) {
    def streamOutputFolder = new File(&amp;quot;${task.streamOutputFolder}&amp;quot;);
    println &amp;quot;removeDexAndJavaInProguardJar: streamOutputFolder=${streamOutputFolder}&amp;quot;

    def jarFiles = streamOutputFolder.listFiles(new FileFilter() {
        @Override
        boolean accept(File file) {
            return file.name.endsWith(&amp;quot;.jar&amp;quot;);
        }
    });
    println &amp;quot;removeDexAndJavaInProguardJar: jarFiles=${jarFiles}&amp;quot;

    if (jarFiles != null &amp;amp;&amp;amp; jarFiles.length &amp;gt; 0) {
        File originJar = jarFiles[0];
        println &amp;quot;removeDexAndJavaInProguardJar: originJar=${originJar}&amp;quot;

        String originName = originJar.name;
        File targetJar = new File(originJar.parentFile, &amp;quot;${System.currentTimeMillis()}_${originName}&amp;quot;);
        println &amp;quot;removeDexAndJavaInProguardJar: targetJar=${targetJar}&amp;quot;

        ZipFile originZip = new ZipFile(originJar);
        ZipOutputStream targetJarOut = new ZipOutputStream(new FileOutputStream(targetJar));
        originZip.entries().each { entry -&amp;gt;
            if (!entry.name.endsWith(&#39;.dex&#39;) &amp;amp;&amp;amp; !entry.name.endsWith(&#39;.java&#39;)) {
                targetJarOut.putNextEntry(entry);
                targetJarOut &amp;lt;&amp;lt; originZip.getInputStream(entry).bytes;
                targetJarOut.closeEntry();
            }
        }
        originZip.close()

        def jarsInAssets = task.inputs.getFiles().findAll { File file -&amp;gt;
            file.name.endsWith(&#39;.jar&#39;) &amp;amp;&amp;amp; file.absolutePath.contains(&#39;mergeJavaRes&#39;) &amp;amp;&amp;amp; file.absolutePath.contains(&#39;assets&#39;)
        }

        if (jarsInAssets != null &amp;amp;&amp;amp; !jarsInAssets.isEmpty()) {
            println &amp;quot;removeDexAndJavaInProguardJar: jarsInAssets=${jarsInAssets}&amp;quot;;
            jarsInAssets.each { File file -&amp;gt;
                String entryName = file.name;

                File parentFile = file.parentFile;
                while (parentFile.name != &amp;quot;assets&amp;quot;) {
                    entryName = parentFile.name + &amp;quot;/&amp;quot; + entryName;
                    parentFile = parentFile.parentFile;
                }

                entryName = &amp;quot;assets/&amp;quot; + entryName;

                println &amp;quot;removeDexAndJavaInProguardJar: jarsInAssets.entryName=${entryName}&amp;quot;

                ZipEntry zipEntry = new ZipEntry(entryName);
                targetJarOut.putNextEntry(zipEntry);
                targetJarOut &amp;lt;&amp;lt; file.bytes;
                targetJarOut.closeEntry();
            }
        }

        targetJarOut.flush()
        targetJarOut.close();

        originJar.delete();
        targetJar.renameTo(originJar);
        println &amp;quot;removeDexAndJavaInProguardJar: rename ${targetJar} to ${originJar}&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题到此为止算是解决了。&lt;/p&gt;

&lt;h3 id=&#34;5-删除java源代码&#34;&gt;5. 删除java源代码&lt;/h3&gt;

&lt;p&gt;由于&lt;code&gt;HouseLib/libs/mpandroidchartlibrary-2-1-6.jar&lt;/code&gt;中包含了源代码和编译后的class文件，导致在jenkins上面使用gradle plugin 3.0生成的apk中同样也包含了java源代码，目前我们在proguard生成的jar中过滤掉了java源文件（见上面的代码），后续希望大家在引入依赖时不要将源代码也一并引入打包进jar中。&lt;/p&gt;

&lt;h3 id=&#34;6-兼容apk路径改变&#34;&gt;6. 兼容apk路径改变&lt;/h3&gt;

&lt;p&gt;3.x与2.x生成的apk路径和名称都发生了变化，为了避免ant脚本进行修改，这个我们直接在插件中将生成的apk复制到了旧的路径。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2.x apk路径
build/outputs/apk/WuxianClient-debug.apk

3.x apk路径
build/outputs/apk/debug/WuxianClient-armeabi-debug.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在3.x版本中与apk同级目录中存在output.json，这个json文件描述了本次打包生成的apk的信息，虽然现在我们的so库都是armeabi类型，为了兼容其他情况，我们在获取apk的文件名称的时候仍然从output.json中获取，output.json文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
  {
    &amp;quot;outputType&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;APK&amp;quot;
    },
    &amp;quot;apkInfo&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;FULL_SPLIT&amp;quot;,
      &amp;quot;splits&amp;quot;: [
        {
          &amp;quot;filterType&amp;quot;: &amp;quot;ABI&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;armeabi&amp;quot;
        }
      ],
      &amp;quot;versionCode&amp;quot;: 71500
    },
    &amp;quot;path&amp;quot;: &amp;quot;WuxianClient-armeabi-debug.apk&amp;quot;,
    &amp;quot;properties&amp;quot;: {
      &amp;quot;packageId&amp;quot;: &amp;quot;com.cc&amp;quot;,
      &amp;quot;split&amp;quot;: &amp;quot;&amp;quot;,
      &amp;quot;minSdkVersion&amp;quot;: &amp;quot;16&amp;quot;
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取apk以及复制apk到旧路径的代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;public static File getApk(File rootDir, ProjectConfig config, boolean needCopy = false) {
    File apkFile = null;
    if (config.flavor.isEmpty()) {
        apkFile = new File(&amp;quot;${rootDir}/${config.name}/build/outputs/apk/${config.name}-${config.buildType}.apk&amp;quot;);
    } else {
        apkFile = new File(&amp;quot;${rootDir}/${config.name}/build/outputs/apk/${config.name}-${config.flavor}-${config.buildType}.apk&amp;quot;);
    }

    if (!apkFile.exists()) {
        File apkDir = new File(&amp;quot;${rootDir}/${config.name}/build/outputs/apk/${config.buildType}/&amp;quot;);
        File outputJson = new File(apkDir, &amp;quot;output.json&amp;quot;);
        String apkName = new JsonSlurper().parse(outputJson)[0].path;
        File realApkFile = new File(apkDir, apkName);
        if (needCopy) {
            java.nio.file.Files.copy(
                    realApkFile.toPath(),
                    apkFile.toPath(),
                    java.nio.file.StandardCopyOption.COPY_ATTRIBUTES,
                    java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            println &amp;quot;getApk: copy from=${realApkFile} to=${apkFile}&amp;quot;;
        }
        apkFile = realApkFile;
    }

    println &amp;quot;getApk: apkFile=${apkFile}&amp;quot;
    return apkFile;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-aapt2-link-failed-style-attribute-android-attr-windowexitanimation-not-found&#34;&gt;6. AAPT2 link failed: style attribute @android:attr/windowExitAnimation not found&lt;/h2&gt;

&lt;p&gt;这是因为在属性名前面多了@字符导致，删除@符号即可，如ccBasicBusinessLib库的styles.xml文件就有这个错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- 导致编译出错的xml属性 --&amp;gt;
&amp;lt;style name=&amp;quot;coin_flow_dialog_out&amp;quot; parent=&amp;quot;android:Animation&amp;quot;&amp;gt;
    &amp;lt;item name=&amp;quot;@android:windowExitAnimation&amp;quot;&amp;gt;@anim/task_center_coin_increase&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;

&amp;lt;!-- 修改后的xml属性 --&amp;gt;
&amp;lt;style name=&amp;quot;coin_flow_dialog_out&amp;quot; parent=&amp;quot;android:Animation&amp;quot;&amp;gt;
    &amp;lt;item name=&amp;quot;android:windowExitAnimation&amp;quot;&amp;gt;@anim/task_center_coin_increase&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;android-studio-3-0&#34;&gt;Android Studio 3.0&lt;/h1&gt;

&lt;p&gt;使用Android Studio 3.0 Beta 2之后，编译7.15.0分支代码，直接在android studio的terminal中可以编译成功，但是打开java类时，大部分引用都会飘红。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用rebuild/sync等时，可能出现类似下面这样的错误:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Error:Argument for @NotNull parameter &amp;lsquo;key&amp;rsquo; of com/android/tools/idea/gradle/project/model/ide/android/ModelCache.computeIfAbsent must not be null&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;在terminal显示/输入中文均存在问题&lt;a href=&#34;https://issuetracker.google.com/issues/63875050&#34;&gt;Terminal in AndroidStudio can&amp;rsquo;t show chinese!&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;无法输入中文，输入后显示为&lt;code&gt;&amp;lt;00e3&amp;gt;&amp;lt;0080&amp;gt;&amp;lt;0082&amp;gt;&amp;lt;00e3&amp;gt;&amp;lt;0080&amp;gt;&amp;lt;0082&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无法显示中文，中文会显示为“???”(如使用ls显示中文名称文件)。 &lt;code&gt;-rw-r--r--   1 zhaocongying  staff     0B Aug 22 14:44 chinese.??????.test&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gradle文件中大写的字母P不显示&lt;a href=&#34;https://issuetracker.google.com/issues/64993944&#34;&gt;cannot show uppercase character P in *.gradle files.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;目前android studio自己使用gradle wrapper时可能会报错，错误信息如下（但是在android studio自己的terminal中使用wrapper确实正常的）：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Error:Failed to open zip file.
Gradle&amp;rsquo;s dependency cache may be corrupt (this sometimes occurs after a network connection timeout.)
&lt;a href=&#34;syncProject&#34;&gt;Re-download dependencies and sync project (requires network)&lt;/a&gt;
&lt;a href=&#34;syncProject&#34;&gt;Re-download dependencies and sync project (requires network)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解决方案就是自己在android studio中指定gradle的路径即可。&lt;/p&gt;

&lt;h1 id=&#34;开发期间快速编译&#34;&gt;开发期间快速编译&lt;/h1&gt;

&lt;p&gt;开发期间为了加快编译速度默认值设置为：minSdkVersion=21，preDexLibraries=true，android.enableAapt2=true。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/build/gradle-plugin-3-0-0.html&#34;&gt;gradle-plugin-3-0-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>android check app running foreground</title>
      <link>http://coofee.github.io/post/android-check-app-running-foreground/</link>
      <pubDate>Tue, 25 Jul 2017 19:43:30 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/android-check-app-running-foreground/</guid>
      <description>

&lt;h2 id=&#34;0x00-使用application-activitylifecyclecallbacks检测app运行在前台-后台&#34;&gt;0x00 使用Application.ActivityLifecycleCallbacks检测App运行在前台/后台&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import android.app.Activity;
import android.app.ActivityManager;
import android.app.Application;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;

import java.util.List;


public class ApplicationLifecycle implements Application.ActivityLifecycleCallbacks {

    private Handler mHandler = new Handler();

    private Runnable mCheck = new Runnable() {
        @Override
        public void run() {
            Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; mCounter=&amp;quot; + mCounter);

            if (mCounter == 0) {
                Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; get runningAppProcessInfo.&amp;quot;);

                final ActivityManager am = (ActivityManager) mAppContext.getSystemService(Context.ACTIVITY_SERVICE);
                // NOTE: getRunningAppProcess() ONLY GIVE YOU THE PROCESS OF YOUR OWN PACKAGE IN ANDROID M
                // BUT THAT&#39;S ENOUGH HERE
                List&amp;lt;ActivityManager.RunningAppProcessInfo&amp;gt; runningAppProcesses = am.getRunningAppProcesses();
                boolean foreground = false;
                for (ActivityManager.RunningAppProcessInfo ai : am.getRunningAppProcesses()) {
                    // KILL OTHER PROCESS OF MINE
                    if (ai.uid == android.os.Process.myUid()
                            &amp;amp;&amp;amp; ai.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
                        Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, ai.processName + &amp;quot; importance is IMPORTANCE_FOREGROUND.&amp;quot;);
                        foreground = true;
                        break;
                    }
                }

                if (foreground) {
                    Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; background=false&amp;quot;);
                } else {
                 	Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; background=true&amp;quot;);
                 }
            }
        }
    };


    private int mCounter = 0;
    private Context mAppContext = null;

    public ApplicationLifecycle(Context context) {
        mAppContext = context.getApplicationContext();
    }

    @Override
    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {

    }

    @Override
    public void onActivityStarted(Activity activity) {

    }

    @Override
    public void onActivityResumed(Activity activity) {
        mCounter++;
        Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;onActivityResumed mCounter=&amp;quot; + mCounter);
        mHandler.removeCallbacks(mCheck);
    }

    @Override
    public void onActivityPaused(Activity activity) {
        mCounter--;
        Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;onActivityPaused post check task; mCounter=&amp;quot; + mCounter);

        mHandler.removeCallbacks(mCheck);
        mHandler.postDelayed(mCheck, 2000);
    }

    @Override
    public void onActivityStopped(Activity activity) {

    }

    @Override
    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {

    }

    @Override
    public void onActivityDestroyed(Activity activity) {

    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x01-杀进程的各种方法&#34;&gt;0x01 杀进程的各种方法&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;if (Build.VERSION.SDK_INT &amp;gt;= 21) {
    finishAndRemoveTask();
}

if (Build.VERSION.SDK_INT &amp;gt;= 16) {
    finishAffinity();
}

ActivityManager activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
activityManager.killBackgroundProcesses(getPackageName());

android.os.Process.killProcess(android.os.Process.myPid());// kill process
System.exit(-1);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>sha1-collision &amp; android signature algorithm</title>
      <link>http://coofee.github.io/post/upgrade-app-signature-algorithm/</link>
      <pubDate>Fri, 21 Jul 2017 18:35:56 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/upgrade-app-signature-algorithm/</guid>
      <description>

&lt;h1 id=&#34;sha1-collision-android-sign&#34;&gt;SHA1-Collision &amp;amp; Android Sign&lt;/h1&gt;

&lt;p&gt;参看&lt;a href=&#34;https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html&#34;&gt;SHA1-collision&lt;/a&gt;我们可以知道，SHA-1签名已经不安全了，签名算法可以考虑升级到SHA-2或者其他算法。&lt;/p&gt;

&lt;h1 id=&#34;0x01-sha1-collision&#34;&gt;0x01 SHA1-Collision&lt;/h1&gt;

&lt;h2 id=&#34;1-sha-1是什么&#34;&gt;1. SHA-1是什么？&lt;/h2&gt;

&lt;p&gt;SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）[2]。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数，参考：&lt;a href=&#34;https://zh.wikipedia.org/wiki/SHA-1&#34;&gt;SHA-1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-sha1-collision是什么&#34;&gt;2. SHA1-Collision是什么？&lt;/h2&gt;

&lt;p&gt;两个内容不同的数据，SHA-1算法会生成相同的摘要信息，参考：&lt;a href=&#34;https://shattered.it/&#34;&gt;SHA1 collision Two PDF&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;3-sha1-collision对android的影响&#34;&gt;3. SHA1-Collision对Android的影响&lt;/h2&gt;

&lt;p&gt;Android SDK默认对apk使用SHA-1签名，在最坏的情况下，攻击者可以伪造SHA-1值相同的文件替换已签名apk中的文件来达到攻击的目的。&lt;/p&gt;

&lt;h1 id=&#34;0x02-android的证书验证机制&#34;&gt;0x02 Android的证书验证机制&lt;/h1&gt;

&lt;p&gt;我们知道Android的Apk文件是一个压缩文件，文件结构大致如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── AndroidManifest.xml
├── META-INF
│   ├── CERT.RSA
│   ├── CERT.SF
│   └── MANIFEST.MF
├── assets
├── classes.dex
├── classes2.dex
├── classes3.dex
├── lib
├── res
└── resources.arsc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;apk相关的签名相关的文件在&lt;code&gt;META-INF&lt;/code&gt;目录中，其中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MANIFEST.MF&lt;br /&gt;
  遍历APK包中除了&lt;code&gt;META-INF\&lt;/code&gt;文件夹以外的所有文件，利用SHA-1算法生成这些文件的消息摘要，然后转化为对应的base64编码。&lt;code&gt;MANIFEST.MF&lt;/code&gt;存储的是文件的摘要值，保证完整性，防止文件被篡改。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.SF&lt;br /&gt;
  xx.SF文件（xx为使用者证书的自定义别名，默认为CERT，即CERT.SF），保存的是MANIFEST.MF的摘要值， 以及MANIFEST.MF中每一个摘要项的摘要值，然后转化成对应的base64编码。虽然该文件的后缀名.sf(SignatureFile)看起来是签名文件，但是并没有私钥参与运算，也不保存任何签名内容。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.RSA/.DSA&lt;br /&gt;
  .RSA/.DSA文件（后缀不同采用的签名算法不同，.RSA使用的是RSA算法，.DSA使用的是数字签名算法DSA，目前APK主要使用的是这两种算法），保存的是第二项.SF文件的数字签名，同时还会包括签名采用的数字证书（公钥）。特别说明，当使用多重证书签名时，每一个.sf文件必须有一个.RSA/.DSA文件与之对应，也就是说使用证书CERT1签名时有CERT1.SF和CERT1.RSA，同时采用证书CERT2签名时又会生成CERT2.SF和CERT2.RSA。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android 系统不允许安装没有任何数字签名的应用APK程序，所有应用程序必须使用某个证书进行签名（一般为应用开发者自签名证书），&lt;br /&gt;
APK源文件，首先由应用开发者使用自己的私钥，对整个文件进行签名，生成上述的三个文件，然后打包成签名后的APK文件；然后发布到市场。&lt;/p&gt;

&lt;p&gt;用户从市场下载APK安装文件，在真正安装APK前，会首先验证数字签名。具体步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先计算除META-INF\ 文件夹以外所有文件的SHA1摘要值，同MANIFEST.MF文件中的摘要值做比对。如果不同，则证明源文件被篡改，验证不通过，拒绝安装。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;计算MANIFEST.MF的摘要值， 以及MANIFEST.MF中每一个摘要项的摘要值，同.SF文件中的摘要值做比对。如果不同，则证明.SF被篡改，验证不通过，拒绝安装。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;从.RSA 文件中取出开发者证书，然后从证书中提取开发者公钥，用该公钥对.SF文件做数字签名，并将结果同.RSA文件中的.SF签名进行比对。如果不同，则验证不通过，拒绝安装。&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;摘自:&lt;a href=&#34;https://jaq.alibaba.com/blog.htm?id=65&#34;&gt;Shadows Everywhere&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;0x03-android支持的签名算法&#34;&gt;0x03 Android支持的签名算法&lt;/h1&gt;

&lt;p&gt;android 4.3之前不支持SHA1之外的其他签名算法，在4.3之后支持了SHA2等算法，详见：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is security vs compatibility trade off a few might be interested in. Pre-4.3, Android did not support any signature algorithms except SHA1. With Android &amp;gt;= 4.3, SHA256 support was fixed, and SHA384, SHA512, and ECDSA were added (source). There are still android 2.3.3 (android-10) devices being sold, so anyone interested in backwards compatibility will have to heed this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试例子详见：&lt;a href=&#34;https://guardianproject.info/2015/12/29/how-to-migrate-your-android-apps-signing-key/&#34;&gt;how-to-migrate-your-android-apps-signing-key&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是提交给google的bug链接：&lt;a href=&#34;https://issuetracker.google.com/issues/36956587&#34;&gt;APKs signed using SHA256withRSA or with individual files hashed using SHA-256 fail to install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在android 4.3版本之前的手机上面安装使用sha-256签名的app时，错误日志信息大致如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb install -r Downloads/notepad-sha256withrsa-sha256.apk
~/Downloads/notepad-sha256withrsa-sha256.apk: 1 file pushed. 4.3 MB/s (62395 bytes in 0.014s)
  pkg: /data/local/tmp/notepad-sha256withrsa-sha256.apk
Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x04-签名生成与查看&#34;&gt;0x04 签名生成与查看&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;生成keystore&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;keytool -genkey -v -keystore test.keystore -alias testkey -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -dname &amp;quot;cn=Test,ou=Test,c=CA&amp;quot; -validity 10000
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看APK的签名算法&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;keytool -printcert -jarfile notepad-sha1withrsa-sha1.apk
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看keystore&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;keytool -list -v -keystore test.keystore
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;jarsigner签名&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;jarsigner -keystore mykeystore -storepass password -sigalg SHA256withRSA -digestalg SHA256 my.apk test 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x05-jarsigner与apksigner的区别&#34;&gt;0x05 jarsigner与apksigner的区别&lt;/h1&gt;

&lt;p&gt;jarsigner是jdk自带的工具，apksigner是android sdk自带的工具（build-tools 24.0.3+版本才拥有）。在android build-tools 24.0.3以前默认使用jarsigner对app进行签名，在24.0.3版本以及之后使用apksigner进行签名，其中apksigner签名算法根据android的最低版本的不同而不同，jarsigner则可以直接指定签名算法(见: 上面的jarsigner签名)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;tool&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;minSdkVersion &amp;lt; 18&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;minSdkVersion &amp;gt;= 18&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;apksigner&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SHA1withRSA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SHA256withRSA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;apksigner&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SHA1withDSA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SHA256withDSA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;apksigner&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SHA256withEC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;代码详见&lt;code&gt;com.android.apksig.internal.apk.v1.V1SchemeSigner&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static DigestAlgorithm getSuggestedSignatureDigestAlgorithm(PublicKey signingKey, int minSdkVersion)
  throws InvalidKeyException
{
  String keyAlgorithm = signingKey.getAlgorithm();
  if (&amp;quot;RSA&amp;quot;.equalsIgnoreCase(keyAlgorithm))
  {
    if (minSdkVersion &amp;lt; 18) {
      return DigestAlgorithm.SHA1;
    }
    return DigestAlgorithm.SHA256;
  }
  if (&amp;quot;DSA&amp;quot;.equalsIgnoreCase(keyAlgorithm))
  {
    if (minSdkVersion &amp;lt; 21) {
      return DigestAlgorithm.SHA1;
    }
    return DigestAlgorithm.SHA256;
  }
  if (&amp;quot;EC&amp;quot;.equalsIgnoreCase(keyAlgorithm))
  {
    if (minSdkVersion &amp;lt; 18) {
      throw new InvalidKeyException(&amp;quot;ECDSA signatures only supported for minSdkVersion 18 and higher&amp;quot;);
    }
    return DigestAlgorithm.SHA256;
  }
  throw new InvalidKeyException(&amp;quot;Unsupported key algorithm: &amp;quot; + keyAlgorithm);
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio/command-line/apksigner.html&#34;&gt;关于ApkSigner更多信息，请戳~&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;0x06-升级签名算法为sha-2&#34;&gt;0x06 升级签名算法为SHA-2&lt;/h1&gt;

&lt;p&gt;综上所示，我们可以知道App使用签名算法的地方有两处，分别是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用keytools生成keystore时指定的算法。&lt;/li&gt;
&lt;li&gt;使用jarsigner/apksigner和keystore对app进行签名时指定的算法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里我们&lt;strong&gt;不修改签名文件keystore的签名算法&lt;/strong&gt;，我们只修改签名App时使用的签名算法为SHA-2，鉴于上面的原因我们需要升级android app的&lt;code&gt;minSdkVersion &amp;gt;= 18&lt;/code&gt;，下面介绍两种升级SHA-2的方法:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;升级buildToolsVersion的版本大于等于24.0.3，gradle打包时会自动调用apksigner使用SHA256withRSA对app进行签名。&lt;/li&gt;
&lt;li&gt;使用jarsigner对app进行签名，然后在命令参数中直接指定签名算法即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;0x07-遗留问题&#34;&gt;0x07 遗留问题&lt;/h1&gt;

&lt;p&gt;由于keystore未发生变化，所以使用不同签名算法的app是可以互相覆盖的，故而攻击者也可以使用旧版本的apk(使用SHA-1)覆盖新版本apk(使用SHA-2)继续进行攻击，所以为了避免被攻击者进行攻击的最好更换keystore，但是这样就没法覆盖安装了，详细请参考&lt;a href=&#34;https://android-developers.googleblog.com/2011/06/things-that-cannot-change.html&#34;&gt;things-that-cannot-change&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;0x08-参考引用&#34;&gt;0x08 参考引用&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html&#34;&gt;Announcing the first SHA1 collision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shattered.it/&#34;&gt;SHA1 collision Two PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2011/06/things-that-cannot-change.html&#34;&gt;things-that-cannot-change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/SHA-1&#34;&gt;SHA-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaq.alibaba.com/blog.htm?id=65&#34;&gt;Shadows Everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/command-line/apksigner.html&#34;&gt;apksigner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jokester.io/post/2017-02/sha1-collision-and-apk-signing/&#34;&gt;sha1-collision-and-apk-signing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>catch react native IllegalViewOperationException</title>
      <link>http://coofee.github.io/post/catch-react-native-IllegalViewOperationException/</link>
      <pubDate>Fri, 21 Jul 2017 17:44:38 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/catch-react-native-IllegalViewOperationException/</guid>
      <description>

&lt;h1 id=&#34;0x00-react-native-default-exception-handler&#34;&gt;0x00 React Native Default Exception Handler&lt;/h1&gt;

&lt;p&gt;React Native官方支持在生成&lt;code&gt;ReactInstanceManager&lt;/code&gt;时使用&lt;code&gt;NativeModuleCallExceptionHandler&lt;/code&gt;接口来设置自己的异常处理器，防止js/react-native代码异常导致native端直接崩溃，样例代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  ReactInstanceManagerBuilder builder = ReactInstanceManager.builder()
                .setApplication(context.getApplicationContext())
                .addPackage(new MainReactPackage())
                .setInitialLifecycleState(LifecycleState.BEFORE_CREATE)
                .setNativeModuleCallExceptionHandler(new NativeModuleCallExceptionHandler {

			        @Override
			        public void handleException(Exception e) {
			        	// 自己处理react-native异常.
			        }
			    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x01-com-facebook-react-uimanager-illegalviewoperationexception&#34;&gt;0x01 com.facebook.react.uimanager.IllegalViewOperationException&lt;/h1&gt;

&lt;p&gt;app发布到线上之后，仍然出现了少部分未能捕获的异常，堆栈信息如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;com.facebook.react.uimanager.IllegalViewOperationException
Trying to add unknown view tag: 500 detail: View tag:496 children(2): [ 497,498, ], viewsToAdd(1): [ [2,500], ],
1 com.facebook.react.uimanager.NativeViewHierarchyManager.manageChildren(NativeViewHierarchyManager.java:387)
2 com.facebook.react.uimanager.UIViewOperationQueue$ManageChildrenOperation.execute(UIViewOperationQueue.java:179)
3 com.facebook.react.uimanager.UIViewOperationQueue$2.run(UIViewOperationQueue.java:787)
4 com.facebook.react.uimanager.UIViewOperationQueue.flushPendingBatches(UIViewOperationQueue.java:843)
5 com.facebook.react.uimanager.UIViewOperationQueue.access$1600(UIViewOperationQueue.java:48)
6 com.facebook.react.uimanager.UIViewOperationQueue$DispatchUIFrameCallback.doFrameGuarded(UIViewOperationQueue.java:889)
7 com.facebook.react.uimanager.GuardedFrameCallback.doFrame(GuardedFrameCallback.java:31)
8 com.facebook.react.modules.core.ReactChoreographer$ReactChoreographerDispatcher.doFrame(ReactChoreographer.java:129)
9 com.facebook.react.modules.core.ChoreographerCompat$FrameCallback$1.doFrame(ChoreographerCompat.java:107)
10 android.view.Choreographer$CallbackRecord.run(Choreographer.java:798)
11 android.view.Choreographer.doCallbacks(Choreographer.java:603)
12 android.view.Choreographer.doFrame(Choreographer.java:571)
13 android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:786)
14 android.os.Handler.handleCallback(Handler.java:815)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从日志中可以看出，抛出的异常为&lt;code&gt;IllegalViewOperationException&lt;/code&gt;，该异常的继承链如下，可以发现该异常继承自&lt;code&gt;RuntimeException&lt;/code&gt;，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IllegalViewOperationException -&amp;gt; JSApplicationCausedNativeException -&amp;gt; RuntimeException&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对比&lt;code&gt;GuardedFrameCallback&lt;/code&gt;的源代码，可以发现在&lt;code&gt;GuardedFrameCallback.doFrame&lt;/code&gt;方法中捕获了全部的&lt;code&gt;RuntimeException&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.facebook.react.uimanager;

public abstract class GuardedFrameCallback extends ChoreographerCompat.FrameCallback {

  @Override
  public final void doFrame(long frameTimeNanos) {
    try {
      doFrameGuarded(frameTimeNanos);
    } catch (RuntimeException e) {
      mReactContext.handleException(e);
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进一步往下追踪，&lt;code&gt;ReactContext&lt;/code&gt;的&lt;code&gt;handleException()&lt;/code&gt;方法的源代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void handleException(RuntimeException e) {
	if (mCatalystInstance != null &amp;amp;&amp;amp;
	    !mCatalystInstance.isDestroyed() &amp;amp;&amp;amp;
	    mNativeModuleCallExceptionHandler != null) {
	  mNativeModuleCallExceptionHandler.handleException(e);
	} else {
	  throw e;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我们先前已经设置了&lt;code&gt;NativeModuleCallExceptionHandler&lt;/code&gt;处理器；同时异常并没有被捕获到；可知出现异常时&lt;code&gt;mCatalystInstance&lt;/code&gt;要么为&lt;code&gt;null&lt;/code&gt;，要么已经销毁了。&lt;/p&gt;

&lt;h1 id=&#34;catch-illegalviewoperationexception&#34;&gt;Catch IllegalViewOperationException&lt;/h1&gt;

&lt;p&gt;为了捕获这个异常，我们的做法大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Aspect
public class ReactContextAspect {

    @Around(&amp;quot;execution (* com.facebook.react.bridge.ReactContext.handleException(..))&amp;quot;)
    public Object injectHandleException(ProceedingJoinPoint joinPoint) throws Throwable {
        try {
            joinPoint.proceed(joinPoint.getArgs());
		 } catch (Throwable e) {
            LOGGER.d(&amp;quot;ReactContextAspect&amp;quot;, &amp;quot;handleException&amp;quot;, e);
			// 上报错误
     	 }
        return null;
    }

    private static class ReactContextHandleException extends Throwable {
        public ReactContextHandleException(Throwable cause) {
            super(cause);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>upgrade android support library to 25.4.0</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>

&lt;p&gt;Android升级Support库版本至25.4.0&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h1&gt;

&lt;p&gt;support库是google官方提供的支持库，其主要功能在于兼容android高/低版本系统（如：&lt;code&gt;support-v4&lt;/code&gt;、&lt;code&gt;support-v7&lt;/code&gt;库），同时伴随着support库的不同版本，也会发布同版本的各种UI组件库（如&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等）。support库的每次更新升级，一般都会包括bug修复、性能优化以及功能改进等等。&lt;/p&gt;

&lt;p&gt;目前我们App使用的版本是&lt;strong&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/rev-archive.html#rev23-0-1&#34;&gt;23.0.1&lt;/a&gt;&lt;/strong&gt;，截止目前google发布的最新稳定版本是&lt;strong&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/revisions.html#25-4-0&#34;&gt;25.4.0&lt;/a&gt;&lt;/strong&gt;，中间相差了将近&lt;strong&gt;20&lt;/strong&gt;个版本，其中包含大量的bug修复；同时又因为&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等UI库的很多新组件也依赖于support库的升级，所以我们计划将&lt;code&gt;support-v4&lt;/code&gt;、&lt;code&gt;support-v7&lt;/code&gt;、&lt;code&gt;Design&lt;/code&gt;、&lt;code&gt;RecyclerView&lt;/code&gt;等库统一升级至25.4.0版本。&lt;/p&gt;

&lt;h1 id=&#34;0x01-打包环境的影响及解决方案&#34;&gt;0x01 打包环境的影响及解决方案&lt;/h1&gt;

&lt;h2 id=&#34;1-升级jdk-android-sdk&#34;&gt;1. 升级JDK &amp;amp; Android SDK&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;升级JDK到1.8&lt;/li&gt;
&lt;li&gt;升级Android SDK到25&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-升级centos或glibc&#34;&gt;2. 升级CentOS或GLIBC&lt;/h2&gt;

&lt;p&gt;由于我们的jenkins打包服务器的系统是CentOS 6.5，其默认支持的GLIBC库版本最高为2.12，而android sdk高版本需要的GLIBC版本为2.14，所以要么升级系统CentOS到7.x版本，要么升级GLIBC版本到2.14.&lt;/p&gt;

&lt;p&gt;当Android SDK需要的GLIBC版本不匹配时，出错信息大致如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt)

[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在CentOS系统中，使用&lt;code&gt;strings /lib64/libc.so.6 | grep GLIBC&lt;/code&gt;命令可以查看其支持的GLIBC库的版本。&lt;/p&gt;

&lt;h2 id=&#34;3-指定gradle使用jdk1-8&#34;&gt;3. 指定gradle使用jdk1.8&lt;/h2&gt;

&lt;p&gt;由于android sdk需要在jdk1.8环境才能正常编译、打包，所以要么在系统中配置java环境变量为jdk1.8版本；要么在执行gradle时指定其运行环境为jdk1.8。&lt;/p&gt;

&lt;p&gt;指定gradle使用jdk1.8，具体配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以直接在&lt;code&gt;gradle.properties&lt;/code&gt;中指定jdk版本，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;org.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-support库与build-tools版本&#34;&gt;4. support库与build-tools版本&lt;/h2&gt;

&lt;p&gt;由于我们app原本使用的build-tools版本是22.0.1，当保持build-tools版本不变，只升级support库版本时，在HUAWEI P7-L00 4.4.2上面运行时，会出现如下错误，推测是因为support库版本和build-tools主版本号不一致导致，所以如果升级support库版本，最好保持和build-tools主版本号一致，防止各种诡异问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;E/AndroidRuntime: FATAL EXCEPTION: main
Caused by: android.content.res.Resources$NotFoundException: File res/drawable/abc_vector_test.xml from drawable resource ID #0x7f820053
  at android.content.res.Resources.loadDrawable(Resources.java:2154)
  at com.huawei.android.content.res.ResourcesEx.loadDrawable(ResourcesEx.java:723)
  at android.content.res.Resources.getDrawable(Resources.java:741)
  at android.support.v4.content.ContextCompat.getDrawable(ContextCompat.java:374)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:202)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:190)
  at android.support.v7.widget.AppCompatDrawableManager.checkVectorDrawableSetup(AppCompatDrawableManager.java:711)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:195)
  at android.support.v7.widget.AppCompatDrawableManager.getDrawable(AppCompatDrawableManager.java:190)
  at android.support.v7.content.res.AppCompatResources
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-相关代码的影响及解决方案&#34;&gt;0x02 相关代码的影响及解决方案&lt;/h1&gt;

&lt;h2 id=&#34;1-使用google官方的maven仓库&#34;&gt;1. 使用google官方的Maven仓库&lt;/h2&gt;

&lt;p&gt;support库升级到25.4.0时，需要使用google官方的maven仓库(&lt;a href=&#34;https://maven.google.com)需要翻墙，解决方案如下:&#34;&gt;https://maven.google.com)需要翻墙，解决方案如下:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {
    repositories {
        maven {
            url &amp;quot;https://dl.google.com/dl/android/maven2/&amp;quot;
        }
        jcenter()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-targetsdkversion&#34;&gt;2. targetSdkVersion&lt;/h2&gt;

&lt;p&gt;当我们将app的targetSdkVersion升级到25时，由于libssl.so已经被系统移除了，此时当我们的So依赖该库时，在App运行时会直接崩溃，所以targetSdkVersion可以仍然保持为23，也可以自己做兼容。注: android 6.0已经使用&lt;code&gt;BoringSSL&lt;/code&gt;替换了&lt;code&gt;OpenSSL&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;3-coordinatorlayout&#34;&gt;3. CoordinatorLayout&lt;/h2&gt;

&lt;p&gt;support库升级到25.4.0时，使用&lt;code&gt;CoordinatorLayout&lt;/code&gt;控件的页面，Activity的主题必须继承&lt;code&gt;Theme.AppCompat&lt;/code&gt;，否则会直接崩溃，错误日志如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Caused by: java.lang.IllegalArgumentException: You need to use a Theme.AppCompat theme (or descendant) with the design library.
  at android.support.design.widget.ThemeUtils.checkAppCompatTheme(ThemeUtils.java:33)
  at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:206)
  at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:200)
  at java.lang.reflect.Constructor.newInstance0(Native Method) 
  at java.lang.reflect.Constructor.newInstance(Constructor.java:430) 
  at android.view.LayoutInflater.createView(LayoutInflater.java:656) 
  at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:798) 
  at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:738) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:495) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:426) 
  at android.view.LayoutInflater.inflate(LayoutInflater.java:377) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-recyclerview&#34;&gt;4. RecyclerView&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ItemView高度占满RecyclerView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RecyclerView在&lt;strong&gt;23.2&lt;/strong&gt;版本支持&lt;code&gt;setAutoMeasureEnabled()&lt;/code&gt;，当item布局是&lt;code&gt;match_parent&lt;/code&gt;时，这个item会占满整个RecyclerView的高度/宽度，所以当从低版本升级到高版本时需要将&lt;code&gt;match_parent&lt;/code&gt;替换为精确的宽度/高度，或者使用&lt;code&gt;wrap_content&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;原因如下:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The RecyclerView widget provides an advanced and flexible base for creating lists and grids as well as supporting animations. This release brings an exciting new feature to the LayoutManager API: auto-measurement! This allows a RecyclerView to size itself based on the size of its contents. This means that previously unavailable scenarios, such as using WRAP_CONTENT for a dimension of the RecyclerView, are now possible. You’ll find all built in LayoutManagers now support auto-measurement.&lt;/p&gt;

&lt;p&gt;Due to this change, make sure to double check the layout parameters of your item views: previously ignored layout parameters (such as MATCH_PARENT in the scroll direction) will now be fully respected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2016/02/android-support-library-232.html&#34;&gt;详见: RecyclerView 23.2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果布局xml非常多，修改麻烦的话，可以考虑在&lt;code&gt;Adapter.onCreateViewHolder()&lt;/code&gt;方法中直接修改itemView的属性即可，下面是一个竖直RecyclerView的样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ViewGroup.LayoutParams layoutParams = itemView.getLayoutParams();
if (layoutParams == null) {
    layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    itemView.setLayoutParams(layoutParams);

} else if (layoutParams.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    layoutParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;
    itemView.setLayoutParams(layoutParams);

}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;隐藏ItemView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在RecyclerView中即使itemView整个设置了GONE，仍然会占据空间，所以如果需要隐藏整个itemView的话，需要设置其宽度、高度为0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void hideItemView(View itemView) {
    if (itemView == null) {
        return;
    }

    itemView.setVisibility(View.GONE);
    ViewGroup.LayoutParams layoutParams = itemView.getLayoutParams();
    if (layoutParams == null) {
        layoutParams = new ViewGroup.LayoutParams(0, 0);
    }

    layoutParams.height = 0;
    layoutParams.width = 0;
    itemView.setLayoutParams(layoutParams);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x03-后续升级建议&#34;&gt;0x03 后续升级建议&lt;/h1&gt;

&lt;h2 id=&#34;1-multidex&#34;&gt;1. multidex&lt;/h2&gt;

&lt;p&gt;升级multidex库到1.0.2版本。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Allows multidexing of instrumentation APK.
Deprecates MultiDexTestRunner (AndroidJUnitRunner should be used instead).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides better protection against some bad archive extraction management of the app.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes a bug that could lead to abandoned temporary files.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides faster installation when done in concurrent process.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes an installation bug on API 19 and 20.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;升级1.0.2之后直接编译，会出现以下问题:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error:Conflict with dependency &#39;com.android.support:multidex&#39;. Resolved versions for app (1.0.2) and test app (1.0.1) differ. 
See http://g.co/androidstudio/app-test-app-conflict for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决这个问题，则需要在test依赖中手动指定&lt;code&gt;multidex&lt;/code&gt;的依赖是1.0.2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    androidTestCompile &#39;com.android.support:multidex:1.0.2&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以在全部依赖中强制使用1.0.2版本即可。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;configurations.all {
  resolutionStrategy {
    force &#39;com.android.support:multidex:1.0.2&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-fragment&#34;&gt;2. Fragment&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以考虑使用Fragment的&lt;code&gt;commitNow()&lt;/code&gt;同步方法代替异步&lt;code&gt;commit()&lt;/code&gt;，避免异步导致出现&lt;code&gt;Can not perform this action after onSaveInstanceState&lt;/code&gt;异常。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以考虑使用FragmentTransaction.setAllowOptimization()优化fragment操作。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;0x04-参考&#34;&gt;0x04 参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/revisions.html#25-4-0&#34;&gt;support-library-25.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2016/02/android-support-library-232.html&#34;&gt;RecyclerView 23.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>android fetch add custom cookie</title>
      <link>http://coofee.github.io/post/android-fetch-add-custom-cookie/</link>
      <pubDate>Thu, 29 Jun 2017 11:14:50 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/android-fetch-add-custom-cookie/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;0x00-为react-native的网络请求添加公共cookie&#34;&gt;0x00 为React Native的网络请求添加公共Cookie&lt;/h1&gt;

&lt;p&gt;本文分析基于React Native &lt;strong&gt;0.44&lt;/strong&gt;版本分析。&lt;/p&gt;

&lt;p&gt;由于我们在使用React Native编写应用时，内部的网络请求均使用了&lt;code&gt;fetch&lt;/code&gt;函数，所以下面我们主要分析一下&lt;code&gt;fetch&lt;/code&gt;函数的整个调用流程。&lt;/p&gt;

&lt;h1 id=&#34;0x01-fetch追根溯源&#34;&gt;0x01 Fetch追根溯源&lt;/h1&gt;

&lt;p&gt;从React Native的源代码我们可以知道fetch函数最终也是由native端的&lt;code&gt;NetworkingModule.java&lt;/code&gt;（Android）或&lt;code&gt;RCTNetworking.mm&lt;/code&gt;（iOS）实现。&lt;/p&gt;

&lt;h2 id=&#34;1-其调用流程如下&#34;&gt;1. 其调用流程如下&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/android-fetch-add-custom-cookie/react-native-fetch-0.44.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-代码分析如下&#34;&gt;2. 代码分析如下&lt;/h2&gt;

&lt;h3 id=&#34;1-将fetch函数添加到全局变量&#34;&gt;1. 将fetch函数添加到全局变量&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;react-native/Libraries/Core/InitializeCore.js&lt;/code&gt;的全部变量&lt;code&gt;global&lt;/code&gt;中定义了&lt;code&gt;fetch&lt;/code&gt;函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set up XHR
// The native XMLHttpRequest in Chrome dev tools is CORS aware and won&#39;t
// let you fetch anything from the internet
defineProperty(global, &#39;XMLHttpRequest&#39;, () =&amp;gt; require(&#39;XMLHttpRequest&#39;));
defineProperty(global, &#39;FormData&#39;, () =&amp;gt; require(&#39;FormData&#39;));

defineProperty(global, &#39;fetch&#39;, () =&amp;gt; require(&#39;fetch&#39;).fetch);
defineProperty(global, &#39;Headers&#39;, () =&amp;gt; require(&#39;fetch&#39;).Headers);
defineProperty(global, &#39;Request&#39;, () =&amp;gt; require(&#39;fetch&#39;).Request);
defineProperty(global, &#39;Response&#39;, () =&amp;gt; require(&#39;fetch&#39;).Response);
defineProperty(global, &#39;WebSocket&#39;, () =&amp;gt; require(&#39;WebSocket&#39;));

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-fetch函数的具体实现&#34;&gt;2. fetch函数的具体实现&lt;/h3&gt;

&lt;p&gt;扒取&lt;code&gt;fetch&lt;/code&gt;的源代码，我们可以发现&lt;code&gt;fetch&lt;/code&gt;是由&lt;code&gt;XMLHttpRequest&lt;/code&gt;实现，并调用&lt;code&gt;XMLHttpRequest.send()&lt;/code&gt;函数发起请求。&lt;/p&gt;

&lt;p&gt;同时react native将&lt;code&gt;fetch&lt;/code&gt;的&lt;code&gt;credentials:&#39;include&#39;&lt;/code&gt;属性转变成了&lt;code&gt;XMLHttpRequest&lt;/code&gt;的&lt;code&gt;withCredentials&lt;/code&gt;属性，所以下一步，我们只需要关注&lt;code&gt;XMLHttpRequest&lt;/code&gt;中&lt;code&gt;withCredentials&lt;/code&gt;如何处理即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/fetch.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

import &#39;whatwg-fetch&#39;;

module.exports = {fetch, Headers, Request, Response};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;react-native/node_modules/whatwg-fetch/fetch.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || &#39;&#39;)
        }
        options.url = &#39;responseURL&#39; in xhr ? xhr.responseURL : options.headers.get(&#39;X-Request-URL&#39;)
        var body = &#39;response&#39; in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError(&#39;Network request failed&#39;))
      }

      xhr.ontimeout = function() {
        reject(new TypeError(&#39;Network request failed&#39;))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === &#39;include&#39;) {
        xhr.withCredentials = true
      }

      if (&#39;responseType&#39; in xhr &amp;amp;&amp;amp; support.blob) {
        xhr.responseType = &#39;blob&#39;
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === &#39;undefined&#39; ? null : request._bodyInit)
    })
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-xmlhttprequest具体实现&#34;&gt;3. XMLHttpRequest具体实现&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;XMLHttpRequest&lt;/code&gt;中将&lt;code&gt;withCredentials&lt;/code&gt;作为参数传递给&lt;code&gt;RCTNetworking.sendRequest()&lt;/code&gt;发起网络请求。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/XMLHttpRequest.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;send(data: any): void {
    if (this.readyState !== this.OPENED) {
      throw new Error(&#39;Request has not been opened&#39;);
    }
    if (this._sent) {
      throw new Error(&#39;Request has already been sent&#39;);
    }
    this._sent = true;
    const incrementalEvents = this._incrementalEvents ||
      !!this.onreadystatechange ||
      !!this.onprogress;

    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didSendNetworkData&#39;,
      (args) =&amp;gt; this.__didUploadProgress(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkResponse&#39;,
      (args) =&amp;gt; this.__didReceiveResponse(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkData&#39;,
      (args) =&amp;gt; this.__didReceiveData(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkIncrementalData&#39;,
      (args) =&amp;gt; this.__didReceiveIncrementalData(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkDataProgress&#39;,
      (args) =&amp;gt; this.__didReceiveDataProgress(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didCompleteNetworkResponse&#39;,
      (args) =&amp;gt; this.__didCompleteResponse(...args)
    ));

    let nativeResponseType = &#39;text&#39;;
    if (this._responseType === &#39;arraybuffer&#39; || this._responseType === &#39;blob&#39;) {
      nativeResponseType = &#39;base64&#39;;
    }

    invariant(this._method, &#39;Request method needs to be defined.&#39;);
    invariant(this._url, &#39;Request URL needs to be defined.&#39;);
    RCTNetworking.sendRequest(
      this._method,
      this._trackingName,
      this._url,
      this._headers,
      data,
      nativeResponseType,
      incrementalEvents,
      this.timeout,
      this.__didCreateRequest.bind(this),
      this.withCredentials
    );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来重头戏来了，&lt;code&gt;RCTNetworking&lt;/code&gt;在android和iOS两端的实现并不一致，在iOS端，发送网络请求时是包含&lt;code&gt;withCredentials&lt;/code&gt;这个参数的，但是在android端&lt;code&gt;withCredentials&lt;/code&gt;这个参数会被忽略（因为在&lt;code&gt;RCTNetworking.android.js&lt;/code&gt;中定义&lt;code&gt;sendRequest&lt;/code&gt;函数时并没有&lt;code&gt;withCredentials&lt;/code&gt;这个参数，所以即使调用放传递了这个参数，也会被忽略）。&lt;/p&gt;

&lt;p&gt;也就是说在iOS端使用fetch发送请求时，可以通过配置属性，灵活决定是否发送cookie；而在android端则会一直发送cookie
&lt;a href=&#34;https://github.com/facebook/react-native/issues/14063&#34;&gt;issue: withCredentials flag in XHRs should default to &amp;ldquo;true&amp;rdquo;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/RCTNetworking.ios.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  sendRequest(
    method: string,
    trackingName: string,
    url: string,
    headers: Object,
    data: RequestBody,
    responseType: &#39;text&#39; | &#39;base64&#39;,
    incrementalUpdates: boolean,
    timeout: number,
    callback: (requestId: number) =&amp;gt; any,
    withCredentials: boolean
  ) {
    const body = convertRequestBody(data);
    RCTNetworkingNative.sendRequest({
      method,
      url,
      data: {...body, trackingName},
      headers,
      responseType,
      incrementalUpdates,
      timeout,
      withCredentials
    }, callback);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/RCTNetworking.android.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    sendRequest(
    method: string,
    trackingName: string,
    url: string,
    headers: Object,
    data: RequestBody,
    responseType: &#39;text&#39; | &#39;base64&#39;,
    incrementalUpdates: boolean,
    timeout: number,
    callback: (requestId: number) =&amp;gt; any
  ) {
    const body = convertRequestBody(data);
    if (body &amp;amp;&amp;amp; body.formData) {
      body.formData = body.formData.map((part) =&amp;gt; ({
        ...part,
        headers: convertHeadersMapToArray(part.headers),
      }));
    }
    const requestId = generateRequestId();
    RCTNetworkingNative.sendRequest(
      method,
      url,
      requestId,
      convertHeadersMapToArray(headers),
      {...body, trackingName},
      responseType,
      incrementalUpdates,
      timeout
    );
    callback(requestId);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-android端网络具体实现&#34;&gt;4. Android端网络具体实现&lt;/h3&gt;

&lt;p&gt;同样，我们可以看到在&lt;code&gt;com.facebook.react.modules.network.NetworkingModule.java&lt;/code&gt;中也没有&lt;code&gt;withCredentials&lt;/code&gt;相关处理，故而如果要保持android和iOS两端行为一致，则必须同时修改android+javascript两端代码才可以。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
@Override
public void initialize() {
	mCookieJarContainer.setCookieJar(new JavaNetCookieJar(mCookieHandler));
}

public void sendRequest(
  final ExecutorToken executorToken,
  String method,
  String url,
  final int requestId,
  ReadableArray headers,
  ReadableMap data,
  final String responseType,
  final boolean useIncrementalUpdates,
  int timeout) {
  
	Request.Builder requestBuilder = new Request.Builder().url(url);
	
	if (requestId != 0) {
	  requestBuilder.tag(requestId);
	}
	
	// 略...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-ios端网络具体实现&#34;&gt;5. iOS端网络具体实现&lt;/h3&gt;

&lt;p&gt;可以看到在&lt;code&gt;react-native/Libraries/Network/RCTNetworking.mm&lt;/code&gt;文件中对&lt;code&gt;withCredentials&lt;/code&gt;进行了单独处理。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (RCTURLRequestCancellationBlock)buildRequest:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)query
                                 completionBlock:(void (^)(NSURLRequest *request))block
{
  RCTAssertThread(_methodQueue, @&amp;quot;buildRequest: must be called on method queue&amp;quot;);

  NSURL *URL = [RCTConvert NSURL:query[@&amp;quot;url&amp;quot;]]; // this is marked as nullable in JS, but should not be null
  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];
  request.HTTPMethod = [RCTConvert NSString:RCTNilIfNull(query[@&amp;quot;method&amp;quot;])].uppercaseString ?: @&amp;quot;GET&amp;quot;;
  request.allHTTPHeaderFields = [self stripNullsInRequestHeaders:[RCTConvert NSDictionary:query[@&amp;quot;headers&amp;quot;]]];
  request.timeoutInterval = [RCTConvert NSTimeInterval:query[@&amp;quot;timeout&amp;quot;]];
  request.HTTPShouldHandleCookies = [RCTConvert BOOL:query[@&amp;quot;withCredentials&amp;quot;]];

  // 略...
  
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-android端添加公共cookie&#34;&gt;0x02 Android端添加公共Cookie&lt;/h1&gt;

&lt;p&gt;从上面的分析，我们知道android端使用&lt;code&gt;NetworkingModule&lt;/code&gt;实现网络请求，同时在&lt;code&gt;NetworkingModule&lt;/code&gt;初始化的时候添加了CookieJar来处理Cookie，所以如果我们要添加Cookie，就必须从CookieJar入手。由于我们并不想修改React Native的源代码，所以可以通过在打包时修改字节码的方式来达到同样的效果，这里我们使用aspect，用自定义CookieJar替换&lt;code&gt;NetworkingModule&lt;/code&gt;原始的CookieJar达到添加公共cookie的目的.&lt;/p&gt;

&lt;p&gt;首先，&lt;code&gt;NetworkingModule&lt;/code&gt;是在&lt;code&gt;initialize()&lt;/code&gt;的时候初始化的CookieJar，所以我们将该方法作为我们的切入点，大致代码如下:&lt;/p&gt;

&lt;h2 id=&#34;1-添加aspect依赖&#34;&gt;1. 添加aspect依赖:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    classpath fileTree(dir:&#39;plugins&#39;, include:[&#39;*.jar&#39;])
    //don&#39;t lost dependency
    classpath &#39;org.aspectj:aspectjtools:1.8.+&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-添加切面&#34;&gt;2. 添加切面:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
@Aspect
public class NetworkingModuleAspect {

    @Around(&amp;quot;execution (* com.facebook.react.modules.network.NetworkingModule.initialize())&amp;quot;)
    public Object injectCustomCookie(ProceedingJoinPoint joinPoint) throws Throwable {
        Object networkingModule = joinPoint.getTarget();

        CookieJarContainer cookieJarContainer = (CookieJarContainer) getFieldValue(networkingModule, &amp;quot;mCookieJarContainer&amp;quot;);
        CookieHandler cookieHandler = (CookieHandler) getFieldValue(networkingModule, &amp;quot;mCookieHandler&amp;quot;);

        cookieJarContainer.setCookieJar(new JavaNetCookieJarWithCommonHeader(cookieHandler));

        return null;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义CookieJar，在&lt;code&gt;loadForRequest()&lt;/code&gt;方法中添加公共Cookie，大致代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public static final class JavaNetCookieJarWithCommonHeader implements CookieJar {
    // 略...

    @Override
    public List&amp;lt;Cookie&amp;gt; loadForRequest(HttpUrl url) {
        // The RI passes all headers. We don&#39;t have &#39;em, so we don&#39;t pass &#39;em!
        List&amp;lt;Cookie&amp;gt; cookies = new ArrayList&amp;lt;Cookie&amp;gt;();

		  // add common cookie.
        Map&amp;lt;String, String&amp;gt; commonHeaders = CommonHeaderUtils.getInstance(null).get(url.toString());
        if (commonHeaders != null &amp;amp;&amp;amp; !commonHeaders.isEmpty()) {
            for (Map.Entry&amp;lt;String, String&amp;gt; entry : commonHeaders.entrySet()) {
                if (entry.getKey() == null) {
                    continue;
                }

                cookies.add(new Cookie.Builder()
                        .name(entry.getKey())
                        .value(entry.getValue() == null ? &amp;quot;&amp;quot; : entry.getValue())
                        .domain(url.host())
                        .build());
            }
        }

        Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; headers = Collections.emptyMap();
        Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; cookieHeaders;
        try {
            cookieHeaders = cookieHandler.get(url.uri(), headers);
        } catch (IOException e) {
            Platform.get().log(WARN, &amp;quot;Loading cookies failed for &amp;quot; + url.resolve(&amp;quot;/...&amp;quot;), e);
            return cookies;
        }

        for (Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; entry : cookieHeaders.entrySet()) {
            String key = entry.getKey();
            if ((&amp;quot;Cookie&amp;quot;.equalsIgnoreCase(key) || &amp;quot;Cookie2&amp;quot;.equalsIgnoreCase(key))
                    &amp;amp;&amp;amp; !entry.getValue().isEmpty()) {
                for (String header : entry.getValue()) {
                    if (cookies == null) cookies = new ArrayList&amp;lt;&amp;gt;();
                    cookies.addAll(decodeHeaderAsJavaNetCookies(url, header));
                }
            }
        }

        return cookies != null
                ? Collections.unmodifiableList(cookies)
                : Collections.&amp;lt;Cookie&amp;gt;emptyList();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-配置aspect插件&#34;&gt;3. 配置aspect插件:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:2.1.3&#39;
        classpath &#39;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.10&#39;

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Application项目中配置aspect插件:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;android-aspectjx&#39;
aspectjx {
	//includes the libs that you want to weave
    includeJarFilter &#39;自己切面所在的库&#39;, &#39;react-native&#39;
    
    //excludes the libs that you don&#39;t want to weave
	excludeJarFilter &#39;universal-image-loader&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于aspectj插件的具体配置，可以参考&lt;a href=&#34;https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx&#34;&gt;android aspectjx plugin&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native Bundle Split</title>
      <link>http://coofee.github.io/post/react-native-bundle-split/</link>
      <pubDate>Thu, 18 May 2017 19:28:52 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/react-native-bundle-split/</guid>
      <description>

&lt;p&gt;使用&lt;a href=&#34;https://github.com/react-component/rn-packager&#34;&gt;rn-packager&lt;/a&gt;拆分react-native的jsbundle(core.android.bundle + business.android.bundle)，然后在程序启动时分步加载拆分后的bundle，以达到热更新目的，&lt;strong&gt;注:本文档使用的react native版本为0.43&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;0x00-分步加载jsbundle&#34;&gt;0x00 分步加载jsbundle&lt;/h1&gt;

&lt;p&gt;将rn-packager打包生成的jsbundle+图片资源统一放到assets目录中，应用程序启动时，复制到files目录，只要保持目录结构不变，js就可以正常访问图片资源。故而，如果需要热更新jsbundle和图片资源时，只需要直接更新files目录中的图片和jsbundle文件即可，具体可以看&lt;a href=&#34;https://github.com/facebook/react-native/pull/10804&#34;&gt;packager-bundle-split&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载core.android.bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ReactInstanceManagerBuilder builder = ReactInstanceManager.builder()
      .setApplication(mApplication)
      .setJSMainModuleName(getJSMainModuleName())
      .setUseDeveloperSupport(getUseDeveloperSupport())
      .setRedBoxHandler(getRedBoxHandler())
      .setUIImplementationProvider(getUIImplementationProvider())
      .setInitialLifecycleState(LifecycleState.BEFORE_CREATE);

    for (ReactPackage reactPackage : getPackages()) {
      builder.addPackage(reactPackage);
    }

    String jsBundleFile = getJSBundleFile();
    if (jsBundleFile != null) {
      builder.setJSBundleFile(jsBundleFile);
    } else {
      builder.setBundleAssetName(Assertions.assertNotNull(getBundleAssetName()));
    }

    File coreBundleFile = new File(mApplication.getFilesDir(), &amp;quot;rn/core.android.bundle&amp;quot;);
    if (!coreBundleFile.exists()) {
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;copy assets://core.android.bundle to &amp;quot; + coreBundleFile);
      AssetsUtils.copyFile(mApplication, &amp;quot;core.android.bundle&amp;quot;, coreBundleFile.getAbsolutePath());
    }
    // 加载core.android.bundle
    builder.setJSBundleLoader(JSBundleLoader.createFileLoader(coreBundleFile.getAbsolutePath()));
    Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;set core bundle&amp;quot;);
    return builder.build();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;加载business.android.bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public void loadBussinessBundle(final File bundleFile) {
    if (mMethod_LoadScriptFile == null) {
      try {
        mMethod_LoadScriptFile = com.facebook.react.cxxbridge.CatalystInstanceImpl.class.getDeclaredMethod(&amp;quot;loadScriptFromFile&amp;quot;, new Class[]{String.class, String.class});
        mMethod_LoadScriptFile.setAccessible(true);
      } catch (NoSuchMethodException e) {
        Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;cannot found method: CatalystInstanceImpl.loadScriptFromFile(String, String)&amp;quot;, e);
        return;
      }
    }

    CatalystInstance catalystInstance = mReactContext.getCatalystInstance();
    String businessBundlePath = bundleFile.getAbsolutePath();
    Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot;...&amp;quot;);
    try {
      mMethod_LoadScriptFile.invoke(catalystInstance, businessBundlePath, businessBundlePath);
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot; done.&amp;quot;);
    } catch (Throwable e) {
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot; error.&amp;quot;);
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;error invoke method: CatalystInstanceImpl.loadScriptFromFile(String, String)&amp;quot;, e);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;热更新jsbundle/图片
假设从assets复制到files目录后，rn目录结构如下:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;files
|--rn
  |--core.android.bundle
  |--business.android.bundle
  |--drawable-mdpi/image_liking.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时使用&lt;code&gt;require&lt;/code&gt;的方式加载图片，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Image source={require(&#39;./image/liking.png&#39;)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要热更新business.android.bundle或者image_liking.png，直接从服务器下载然后替换files/rn目录对应的资源，然后&lt;code&gt;recreateReactContextInBackground()&lt;/code&gt;重新加载即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coofee/TestBundleSplit&#34;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;0x01-如何运行&#34;&gt;0x01 如何运行?&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. clone代码
git clone https://github.com/coofee/TestBundleSplit

# 2. 安装rn-packager依赖
cd rn-packager
npm install

# 3. 安装tests例子依赖
cd tests
npm install

# 4. 生成core.android.bundle and core.android.manifest.json
node ../bin/rnpackager bundle --entry-file node_modules/react-native/Libraries/react-native/react-native.js --bundle-output assets/core.android.bundle --platform android --dev false --assets-dest assets --manifest-output assets/core.android.manifest.json

# 5. 使用core.android.manifest.json生成app.bundle
node ../bin/rnpackager bundle --entry-file index.js --bundle-output assets/HelloWorldApp.android.bundle --platform android --dev false --assets-dest assets --manifest-file assets/core.android.manifest.json 

# 6. 复制core.android.bundle和HelloWorldApp.android.bundle到app/src/assets.
cp assets/core.android.bundle ../../android/app/src/main/assets/core.android.bundle

cp assets/HelloWorldApp.android.bundle ../../android/app/src/main/assets/HelloWorldApp.android.bundle

# 7. 安装android app
cd ../../android
# mac/linux执行安装app.
./gradlew :app:installDebug
# windows执行安装app.
./gradlew.bat :app:installDebug

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-libraries&#34;&gt;0x02 Libraries&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/react-component/rn-packager&#34;&gt;rn-packager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react-native/Examples/UIExplorer&#34;&gt;UIExplorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>http://coofee.github.io/post/tools/</link>
      <pubDate>Fri, 30 Sep 2016 17:11:19 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/tools/</guid>
      <description>

&lt;h1 id=&#34;1-golang跨平台编译&#34;&gt;1. golang跨平台编译&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 如：
env GOOS=linux GOARCH=amd64 go build  *.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-ssh&#34;&gt;2. ssh&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -p port username@host
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-scp&#34;&gt;3. scp&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp -P port local_file  username@host:remote_file

scp -P port -r local_dir  username@host:remote_dir
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-github-pull-request&#34;&gt;4. github pull request&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clone
git clone https://github.com/coofee/tinker.git

# 添加tinker
git remote add tinker https://github.com/Tencent/tinker

# 从tinker的dev分支创建功能分支
git branch compat-gradle-plugin-3.x-dev tinker/dev
git checkout compat-gradle-plugin-3.x-dev

# push分支到origin
git push -u origin compat-gradle-plugin-3.x-dev

# 合并tinker的dev分支代码
git pull tinker dev

# 删除远程分支
git push origin --delete compat-gradle-plugin-3.x
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>android jni bspatch</title>
      <link>http://coofee.github.io/post/jni-bspatch/</link>
      <pubDate>Sat, 17 Sep 2016 22:01:24 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/jni-bspatch/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&#34;1-下载并配置ndk&#34;&gt;1. 下载并配置NDK:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/ndk/downloads/index.html&#34;&gt;https://developer.android.com/ndk/downloads/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-编译bsdiff&#34;&gt;2. 编译Bsdiff&lt;/h2&gt;

&lt;h3 id=&#34;2-1-编写java类-创建native方法&#34;&gt;2.1 编写java类，创建native方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.commons.utils;
	
public class Bspatch {
	
    static {
        System.loadLibrary(&amp;quot;bspatch&amp;quot;);
    }
	
    public static native int applyPatch(String oldFile, String newFile, String patchFile);
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-生成-h文件&#34;&gt;2.2 生成.h文件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用&lt;strong&gt;javac&lt;/strong&gt;编写Bspatch或者在ide里面编译，这里我在android studio中编写并执行gradle的&lt;strong&gt;compileDebugJavaWithJavac&lt;/strong&gt;任务进行编译，编译完成后，切换到classes目录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用javah生成.h文件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 切换到编译好的类目录
cd app/build/intermediates/classes
// 生成.h文件
javah -d h -classpath debug com.commons.utils.Bspatch
	
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-编译c-c-代码&#34;&gt;2.3 编译c/c++代码.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;复制生成的.h文件到c/c++文件目录.&lt;/li&gt;
&lt;li&gt;在存放c/c++代码的目录中添加Android.mk、Application.mk文件。
其中Android.mk用于指定要编译的类，模块名称等；
Application.mk用于指定要生成特定abi类型的so文件，如：x86，armeabi等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目录结构如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;app

&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;jni

&lt;ul&gt;
&lt;li&gt;bspatch&lt;/li&gt;
&lt;li&gt;bzip2&lt;/li&gt;
&lt;li&gt;Android.mk&lt;/li&gt;
&lt;li&gt;Application.mk&lt;/li&gt;
&lt;li&gt;com_commons_utils_Bspatch.c&lt;/li&gt;
&lt;li&gt;com_commons_utils_Bspatch.h&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;libs&lt;/li&gt;
&lt;li&gt;src&lt;/li&gt;
&lt;li&gt;build.gradle&lt;/li&gt;
&lt;li&gt;proguard-rules.pro
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Android.mk内容如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;LOCAL_PATH := $(call my-dir)
	
include $(CLEAR_VARS)
	
# 指定模块名称
LOCAL_MODULE    := bspatch
# 添加源码
LOCAL_SRC_FILES := com_commons_utils_BsPatch.c
	
# for logging
LOCAL_LDLIBS    := -lz -llog
	
include $(BUILD_SHARED_LIBRARY)
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Application.mk&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#表示生成全部abi的so
APP_ABI := all
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;切换到jni目录，手动编译native代码。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd app/jni
$ ndk-build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-修改bspatch代码&#34;&gt;3. 修改bspatch代码&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;为了调用简单，这里直接修改了bspatch的main函数为patch函数，然后在jni函数中直接调用patch函数进行合并。
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;	
#include &amp;lt;android/log.h&amp;gt;
	
#include &amp;quot;bspatch/bspatch.c&amp;quot;
	
#include &amp;quot;com_commons_utils_Bspatch.h&amp;quot;
	
	
	
/*
 * Class:     com_commons_utils_Bspatch
 * Method:    applyPatch
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_commons_utils_Bspatch_applyPatch
        (JNIEnv *env, jobject obj, jstring oldFile, jstring newFile, jstring patchFile) {
	
    int ret;
    char *ch[4];
    ch[0] = &amp;quot;bspatch&amp;quot;;
    ch[1] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, oldFile, 0));
    ch[2] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, newFile, 0));
    ch[3] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, patchFile, 0));
	
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;oldFile = %s &amp;quot;, ch[1]);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;newFile = %s &amp;quot;, ch[2]);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;patchFile = %s &amp;quot;, ch[3]);
	
    ret = patch(4, ch);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;applypatch result = %d &amp;quot;, ret);
	
    (*env)-&amp;gt;ReleaseStringUTFChars(env, oldFile, ch[1]);
    (*env)-&amp;gt;ReleaseStringUTFChars(env, newFile, ch[2]);
    (*env)-&amp;gt;ReleaseStringUTFChars(env, patchFile, ch[3]);
    return ret;
}
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;另由于在bspatch的代码中使用了err、errx函数，会导致出错时直接退出进程。为了在app中调用bspatch时不出现这种情况，所以使用自定义的err、errx函数替换系统err、errx函数，同时以返回值确定是否合并成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdarg.h&amp;gt;
// #include &amp;lt;err.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;android/log.h&amp;gt;
#include &amp;lt;jni.h&amp;gt;
    
#include &amp;quot;../bzip2/bzlib.c&amp;quot;
#include &amp;quot;../bzip2/crctable.c&amp;quot;
#include &amp;quot;../bzip2/compress.c&amp;quot;
#include &amp;quot;../bzip2/decompress.c&amp;quot;
#include &amp;quot;../bzip2/randtable.c&amp;quot;
#include &amp;quot;../bzip2/blocksort.c&amp;quot;
#include &amp;quot;../bzip2/huffman.c&amp;quot;
    
#include &amp;lt;android/log.h&amp;gt;
    
// #define vprintf(...) __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, __VA_ARGS__);
    
static int err(int retVal, char* fmt, ...) {
    va_list arglist;
    va_start(arglist, fmt);
    // vprintf(fmt, arglist);
    __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, fmt, arglist);
    va_end(arglist);
    return retVal;
}
    
static int errx(int retVal, char* fmt, ...) {
    va_list arglist;
    va_start(arglist, fmt);
    // vprintf(fmt, arglist);
    __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, fmt, arglist);
    va_end(arglist);
    return retVal;
}
    
static void cleanup(FILE* f, FILE*  cpf, FILE*  dpf, FILE*  epf, 
    BZFILE* cpfbz2, BZFILE* dpfbz2, BZFILE* epfbz2, 
    u_char* old, u_char* new) {
    
    // close file and then free;
    if (f != NULL) {
        fclose(f);
        free(f);
    }
    
    if (cpf != NULL) {
        fclose(cpf);
        free(cpf);
    }
    
    if (dpf != NULL) {
        fclose(dpf);
        free(dpf);
    }
    
    if (epf != NULL) {
        fclose(epf);
        free(epf);
    }
    
    if (cpfbz2 != NULL) {
        BZ2_bzReadClose(NULL, cpfbz2);
    }
    
    if (dpfbz2 != NULL) {
        BZ2_bzReadClose(NULL, dpfbz2);
    }
    
    if (epfbz2 != NULL) {
        BZ2_bzReadClose(NULL, epfbz2);
    }
    
    if (old != NULL) {
        free(old);
    }
    
    if (new != NULL) {
        free(new);
    }
}
    
static off_t offtin(u_char *buf) {
    off_t y;
    
    y = buf[7] &amp;amp; 0x7F;
    y = y * 256;
    y += buf[6];
    y = y * 256;
    y += buf[5];
    y = y * 256;
    y += buf[4];
    y = y * 256;
    y += buf[3];
    y = y * 256;
    y += buf[2];
    y = y * 256;
    y += buf[1];
    y = y * 256;
    y += buf[0];
    
    if (buf[7] &amp;amp; 0x80)
        y = -y;
    
    return y;
}
    
static int patch(int argc, char *argv[]) {
    FILE *f, *cpf, *dpf, *epf;
    BZFILE *cpfbz2, *dpfbz2, *epfbz2;
    int cbz2err, dbz2err, ebz2err;
    int fd;
    ssize_t oldsize, newsize;
    ssize_t bzctrllen, bzdatalen;
    u_char header[32], buf[8];
    u_char *old, *new;
    off_t oldpos, newpos;
    off_t ctrl[3];
    off_t lenread;
    off_t i;
    
    if (argc != 4) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;usage: %s oldfile newfile patchfile\n&amp;quot;, argv[0]);
    }
    
    /* Open patch file */
    if ((f = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
        
    
    /*
     File format:
     0  8   &amp;quot;BSDIFF40&amp;quot;
     8  8   X
     16 8   Y
     24 8   sizeof(newfile)
     32 X   bzip2(control block)
     32+X   Y   bzip2(diff block)
     32+X+Y ??? bzip2(extra block)
     with control block a set of triples (x,y,z) meaning &amp;quot;add x bytes
     from oldfile to x bytes from the diff block; copy y bytes from the
     extra block; seek forwards in oldfile by z bytes&amp;quot;.
     */
    
    /* Read header */
    if (fread(header, 1, 32, f) &amp;lt; 32) {
        if (feof(f)) {
            errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fread(%s)&amp;quot;, argv[3]);
    }
    
    /* Check for appropriate magic */
    if (memcmp(header, &amp;quot;BSDIFF40&amp;quot;, 8) != 0) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
    }
    
    /* Read lengths from header */
    bzctrllen = offtin(header + 8);
    bzdatalen = offtin(header + 16);
    newsize = offtin(header + 24);
    if ((bzctrllen &amp;lt; 0) || (bzdatalen &amp;lt; 0) || (newsize &amp;lt; 0)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
    }
    
    /* Close patch file and re-open it via libbzip2 at the right places */
    if (fclose(f)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fclose(%s)&amp;quot;, argv[3]);
    }
        
    if ((cpf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    
    if (fseeko(cpf, 32, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3], (long long) 32);
    }
    
    if ((cpfbz2 = BZ2_bzReadOpen(&amp;amp;cbz2err, cpf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, cbz2err);
    }
    
    if ((dpf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    if (fseeko(dpf, 32 + bzctrllen, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3], (long long) (32 + bzctrllen));
    }
    if ((dpfbz2 = BZ2_bzReadOpen(&amp;amp;dbz2err, dpf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, dbz2err);
    }
    if ((epf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    if (fseeko(epf, 32 + bzctrllen + bzdatalen, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3],
            (long long) (32 + bzctrllen + bzdatalen));
    }
    if ((epfbz2 = BZ2_bzReadOpen(&amp;amp;ebz2err, epf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, ebz2err);
    }
    
    if (((fd = open(argv[1], O_RDONLY, 0)) &amp;lt; 0)
        || ((oldsize = lseek(fd, 0, SEEK_END)) == -1)
        || ((old = malloc(oldsize + 1)) == NULL)
        || (lseek(fd, 0, SEEK_SET) != 0)
        || (read(fd, old, oldsize) != oldsize) || (close(fd) == -1)) {
        
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;%s&amp;quot;, argv[1]);
    }
        
    if ((new = malloc(newsize + 1)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, NULL);
    }
    
    oldpos = 0;
    newpos = 0;
    while (newpos &amp;lt; newsize) {
        /* Read control data */
        for (i = 0; i &amp;lt;= 2; i++) {
            lenread = BZ2_bzRead(&amp;amp;cbz2err, cpfbz2, buf, 8);
            if ((lenread &amp;lt; 8)
                || ((cbz2err != BZ_OK) &amp;amp;&amp;amp; (cbz2err != BZ_STREAM_END))) {
                    cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
                    return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
                }
            ctrl[i] = offtin(buf);
        };
    
        /* Sanity-check */
        if (newpos + ctrl[0] &amp;gt; newsize) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Read diff string */
        lenread = BZ2_bzRead(&amp;amp;dbz2err, dpfbz2, new + newpos, ctrl[0]);
        if ((lenread &amp;lt; ctrl[0])
            || ((dbz2err != BZ_OK) &amp;amp;&amp;amp; (dbz2err != BZ_STREAM_END))) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Add old data to diff string */
        for (i = 0; i &amp;lt; ctrl[0]; i++)
            if ((oldpos + i &amp;gt;= 0) &amp;amp;&amp;amp; (oldpos + i &amp;lt; oldsize))
                new[newpos + i] += old[oldpos + i];
    
        /* Adjust pointers */
        newpos += ctrl[0];
        oldpos += ctrl[0];
    
        /* Sanity-check */
        if (newpos + ctrl[1] &amp;gt; newsize) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Read extra string */
        lenread = BZ2_bzRead(&amp;amp;ebz2err, epfbz2, new + newpos, ctrl[1]);
        if ((lenread &amp;lt; ctrl[1])
            || ((ebz2err != BZ_OK) &amp;amp;&amp;amp; (ebz2err != BZ_STREAM_END))) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Adjust pointers */
        newpos += ctrl[1];
        oldpos += ctrl[2];
    };
    
    /* Clean up the bzip2 reads */
    BZ2_bzReadClose(&amp;amp;cbz2err, cpfbz2);
    BZ2_bzReadClose(&amp;amp;dbz2err, dpfbz2);
    BZ2_bzReadClose(&amp;amp;ebz2err, epfbz2);
    if (fclose(cpf) || fclose(dpf) || fclose(epf)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fclose(%s)&amp;quot;, argv[3]);
    }
    
    /* Write the new file */
    if (((fd = open(argv[2], O_CREAT | O_TRUNC | O_WRONLY, 0666)) &amp;lt; 0)
        || (write(fd, new, newsize) != newsize) || (close(fd) == -1)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;%s&amp;quot;, argv[2]);
    }
    
    free(new);
    free(old);
    
    return 0;
}
    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Gradle插件升级填坑指南</title>
      <link>http://coofee.github.io/post/android-gradle-plugin-compat/</link>
      <pubDate>Thu, 01 Sep 2016 19:27:06 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/android-gradle-plugin-compat/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;Android Gradle插件升级填坑指南&lt;/p&gt;

&lt;h2 id=&#34;1-引子&#34;&gt;1. 引子&lt;/h2&gt;

&lt;p&gt;自打android开发环境从eclipse迁移到android studio之后，android项目的打包就从ant迁移到了gradle。自此只要是在打包过程中需要干扰代码生成或执行其他特殊处理，都需要通过gradle脚本完成，具体来说就是通过在打包过程中插入task或者给现用task添加hook。
对于我们的项目而言，在插件化和热修复技术，为了降低打包成本，我们编写了自己的gradle插件，用于支持app的插件化和热修复打包。&lt;/p&gt;

&lt;h2 id=&#34;2-由instant-run引发的血案&#34;&gt;2. 由instant-run引发的血案&lt;/h2&gt;

&lt;p&gt;时间来到了16年，随着Instant-Run功能的逐渐完善，我们也升级android studio和gradle来体验强大的Instant-Run，刚一运行就崩溃了。。。&lt;/p&gt;

&lt;!--![](http://d.ifengimg.com/mw604/y0.ifengimg.com/ifengimcp/pic/20160418/5628dd6ecd9fa100f371_size30_w521_h534.jpg)
--&gt;

&lt;p&gt;查看一下报错日志，发现&lt;code&gt;proguardDebug&lt;/code&gt;任务找不到；瞅了一下打包产生的临时目录，发现&lt;strong&gt;intermediates/classes-proguard&lt;/strong&gt;目录也找不到了，并且还多出来了&lt;strong&gt;intermediates/transforms&lt;/strong&gt;这个奇怪的目录，赶紧google一下，发现google在gradle插件高版本中引入了&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/transform-api&#34;&gt;transform-api&lt;/a&gt;（主要是给大家提供了一个操作代码的接口，比如可以注入代码什么的），并且在高版本的gradle插件中使用&lt;code&gt;transformClassesAndResourcesWithProguardForDebug&lt;/code&gt;任务替换了低版本的&lt;code&gt;proguardDebug&lt;/code&gt;任务。&lt;/p&gt;

&lt;h2 id=&#34;3-兼容transform-api&#34;&gt;3. 兼容Transform Api&lt;/h2&gt;

&lt;p&gt;知道了问题所在，那就让我们撸起袖子干起来吧，将原本需要在&lt;code&gt;proguardDebug&lt;/code&gt;之后执行的代码迁移到&lt;code&gt;transformClassesAndResourcesWithProguardForDebug&lt;/code&gt;之后，并稍作改动就可以了。大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString()

gradle.taskGraph.afterTask { Task task, TaskState state -&amp;gt;
    if (state.failure != null) {
        println &amp;quot;${task} error: ${state.failure}&amp;quot;
        state.failure.printStackTrace()
        state.rethrowFailure();
        return;
    }
    
    if (task.name.equals(proguardTaskName)) {
    	// 执行自己的代码，将先前的代码迁移至此，并稍作改动即可。
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-兼容不同版本&#34;&gt;4. 兼容不同版本&lt;/h2&gt;

&lt;p&gt;这里我们为了兼容各个版本的gradle插件，那么就出现了一个新问题如何区分某个gradle插件版本是否支持transform api？&lt;/p&gt;

&lt;p&gt;查看官网，发现上面有这么一句话
&amp;gt; (The API existed in 1.4.0-beta2 but it&amp;rsquo;s been completely revamped in 1.5.0-beta1)&lt;/p&gt;

&lt;p&gt;也就是说，这个api在1.4.0-beta2的时候就已经存在了，但是直到1.5.0-beta1版本的时候才改造完成。这么来看的话，通过版本来判断比较复杂，并且不一定靠谱，那么如何能够既简单又靠谱的判断呢？&lt;/p&gt;

&lt;p&gt;答案很简单，直接判断project是否拥有transform的task即可，大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;boolean isSupportTransformApi(Project project, def variant) {
	def supportTransformApi = false;
	def flavor = variant.flavorName == null ? &amp;quot;&amp;quot; : variant.flavorName;
	def buildType = variant.buildType.name == null ? &amp;quot;&amp;quot; : variant.buildType.name;
	def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${variant flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString()
	project.tasks.each {
	    if (it.name.equals(proguardTaskName)) {
	        supportTransformApi = true;
	    }
	}

	return supportTransformApi;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搞完这个兼容，再次运行项目，就可以成功编译并安装apk了，点击运行，直接崩溃了！！！查看日志发现是资源找不到，并且资源id的值也是错误的，这么来看的话，那就是public.xml和ids.xml没有生效造成的。&lt;/p&gt;

&lt;h2 id=&#34;5-解决public-xml-ids-xml不生效问题&#34;&gt;5. 解决public.xml、ids.xml不生效问题&lt;/h2&gt;

&lt;p&gt;原来在gradle插件的高版本中打包时会忽略&lt;strong&gt;res/values/&lt;/strong&gt;目录中定义的public.xml、ids.xml文件；对比一下老版本gradle插件打包生成的临时文件，我们发现其在打包时将public.xml、ids.xml复制到了&lt;strong&gt;intermediates/res/merged/${flavor}/${buildType}&lt;/strong&gt;这个目录*(该目录是打包编译资源时生成的临时目录)*。那么我们自己手动复制这些文件到&lt;strong&gt;intermediates/res/merged/${flavor}/${buildType}&lt;/strong&gt;目录中，是不是就可以让高版本的gradle插件支持public.xml、ids.xml了呢？&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// 获取task名称
def mergeResourcesName = &amp;quot;merge${flavor.capitalize()}${buildType.capitalize()}Resources&amp;quot;.toString();
def mergeResourceTask = project.tasks.getByName(mergeResourcesName)
mergeResourceTask.doLast {
	// 复制public.xml
	project.copy {
		int i = 0;
		from(project.android.sourceSets.main.res.srcDirs) {
		    include &#39;values/public.xml&#39;
		    rename &#39;public.xml&#39;, (i++ == 0 ? &amp;quot;public.xml&amp;quot; : &amp;quot;public_${i}.xml&amp;quot;)
		}
		
		into(task.outputDir)
	}

	// 复制ids.xml
	project.copy {
		int i = 0;
		from(project.android.sourceSets.main.res.srcDirs) {
			include &#39;values/ids.xml&#39;
			rename &#39;ids.xml&#39;, (i++ == 0 ? &amp;quot;ids.xml&amp;quot; : &amp;quot;ids_${i}.xml&amp;quot;)
		}
		
		into(task.outputDir)
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加如上代码之后，重新编译工程，在合并资源时出现了资源重复定义错误，由此可以得出是复制public.xml和ids.xml到打包产生的临时目录导致的。&lt;/p&gt;

&lt;h2 id=&#34;6-解决public-xml与values-xml中的资源重复定义&#34;&gt;6. 解决public.xml与values.xml中的资源重复定义&lt;/h2&gt;

&lt;p&gt;从错误信息上面可以知道，是因为public.xml和values.xml出现了相同的元素导致；所以简单粗暴的将public.xml和values.xml中相同的元素剔除是不是就能够解决这个问题了呢？&lt;/p&gt;

&lt;p&gt;我们在mergeResourceTask.doLast{}复制完public.xml和ids.xml后，解析并对比public.xml和values.xml文件，然后剔除values.xml中与public.xml中相同的元素，大致代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def valuesDir = new File(task.outputDir, &#39;values&#39;);
def publicResSet = [];

// 获取public.xml中的元素
valuesDir.eachFile { f -&amp;gt;
    if (f.name.startsWith(&#39;public&#39;) &amp;amp;&amp;amp; f.name.endsWith(&#39;.xml&#39;)) {
        def publicNode = new XmlParser().parse(f);
        publicNode.each { node -&amp;gt;
            def name = node.attribute(&#39;name&#39;).toString();
            def type = node.attribute(&#39;type&#39;).toString()
            publicResSet.add(new PublicXmlRes(name, type));
        }
    }
}

// 剔除values.xml中与public.xml相同的元素。
def valuesXmlFile = new File(task.outputDir, &#39;values/values.xml&#39;);
def valuesNode = new XmlParser().parse(valuesXmlFile);
def noIdNode = new Node(null, &#39;resources&#39;);
valuesNode.each {
    if (&#39;item&#39;.equals(it.name())) {
        def name = it.attribute(&#39;name&#39;).toString();
        def type = it.attribute(&#39;type&#39;).toString();
        def publicRes = new PublicXmlRes(name, type);
        if (publicResSet.contains(publicRes)) {
            println &amp;quot;skip public res: ${publicRes}&amp;quot;
            return;
        } else {
            println &amp;quot;not skip public res: ${publicRes}&amp;quot;
        }
    }

    noIdNode.append(it);
}

// 使用剔除相同元素的values.xml覆盖原来的values.xml文件;
def out = new PrintWriter(new FileWriter(valuesXmlFile));
out &amp;lt;&amp;lt; &#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;\n&#39;;
XmlNodePrinter xmlNodePrinter = new XmlNodePrinter(out);
xmlNodePrinter.with {
    preserveWhitespace = true;
    expandEmptyElements = false;
}
xmlNodePrinter.print(noIdNode)
out.flush()
IOGroovyMethods.closeWithWarning(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，整个项目就可以用Instant-Run跑起来了。。。&lt;/p&gt;

&lt;h2 id=&#34;7-兼容multidex&#34;&gt;7. 兼容Multidex&lt;/h2&gt;

&lt;h3 id=&#34;7-1-transform-api之前&#34;&gt;7.1 Transform Api之前&lt;/h3&gt;

&lt;p&gt;在Transform Api出现之前，大家拆分dex时，一般都是获取dex任务，然后给dex添加参数，来实现干扰multidex，具体代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;project.tasks.matching {
    it.name.startsWith(&#39;dex&#39;)
}.each { dx -&amp;gt;
    if (dx.additionalParameters == null) {
        dx.additionalParameters = []
    }
    dx.additionalParameters += &#39;--multi-dex&#39;;
    // dx.additionalParameters += &#39;--minimal-main-dex&#39;;
    dx.additionalParameters += &#39;--set-max-idx-number=55000&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在生成manifest_keep.txt文件后，修改manifest_keep.txt文件，来达到拆分multidex，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def multidexTaskNames = [];

afterEvaluate {
    android.applicationVariants.all { variant -&amp;gt;
        def flavorName = variant.flavorName == null ? &amp;quot;&amp;quot; : variant.flavorName;
        def buildType = variant.buildType.name == null ? &amp;quot;&amp;quot; : variant.buildType.name;
        def multidexTaskName = &amp;quot;collect${flavorName.capitalize()}${buildType.capitalize()}MultiDexComponents&amp;quot;.toString();
        multidexTaskNames.add(multidexTaskName);
    }
}

gradle.taskGraph.beforeTask { Task multiDexTask -&amp;gt;
    if (!multidexTaskNames.contains(multiDexTask.name)) {
        return;
    }

    println &amp;quot;multidexTaskName=${multiDexTask.name}; multiDexTask.outputFile=${multiDexTask.outputFile}&amp;quot;
    multiDexTask.doLast {
		File manifestKeepFile = multiDexTask.outputFile;
		// 修改manifestKeepFile文件，将不需要的类从该文件中删除；
		// 来达到mutidex分包的目的.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-transform-api之后&#34;&gt;7.2 Transform Api之后&lt;/h3&gt;

&lt;p&gt;当有了Transform Api之后，给dex任务添加dx.additionalParameters参数就无效了，但是*collect MultiDexComponents*仍然有效，所以只需要找到如何添加dx参数就好。分析gradle插件可以发现，在Transform Api中使用DexTransform来将jar转换为dex，并且在DexTransform最终由AndroidBuilder调用dx生成dex文件。&lt;/p&gt;

&lt;p&gt;其中DexTransform在*transform*方法中调用androidBuilder的*convertByteCode*方法，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
public void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
	// 忽略....
 	this.androidBuilder.convertByteCode(outputs2, outputDir3, this.multiDex, this.mainDexListFile, this.dexOptions, (List)null, false, true, outputHandler1);
 	// 忽略....
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过查看AndroidBuilder的*convertByteCode*方法签名如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;void convertByteCode(Collection&amp;lt;File&amp;gt; inputs, File outDexFolder, boolean multidex, File mainDexList, DexOptions dexOptions, List&amp;lt;String&amp;gt; additionalParameters, boolean incremental, boolean optimize, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对比以上两个代码片段，我们发现在*transform*方法中调用*convertByteCode*方法，直接将&lt;strong&gt;additionalParameters&lt;/strong&gt;参数传入了null，所以只需要在调用*convertByteCode*方法时，传入自己的&lt;strong&gt;additionalParameters&lt;/strong&gt;，就可以实现和以前一样的功能，那么如何实现呢？&lt;/p&gt;

&lt;p&gt;我们的解决方案是，在执行DexTransform前替换DexTransform的&lt;strong&gt;androidBuilder&lt;/strong&gt;字段，然后在调用*convertByteCode*方法前，添加dx参数，大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
// 找到DexTransform
project.tasks.matching {
    it instanceof TransformTask
}.each { TransformTask transformTask -&amp;gt;
    Transform transform = transformTask.transform;
    if (transform.name.equals(&#39;dex&#39;)) {
        DexTransform dexTransform = (DexTransform) transform;
        if (dexTransform.multiDex) {
            // wrapper androidBuilder and add dex paramters.
            replaceFieldAndroidBuilder(dexTransform);
        }
    }
}

// 替换androidBuilder字段。
private
static void replaceFieldAndroidBuilder(DexTransform dexTransform) {
    def fieldAndroidBuilder = DexTransform.class.getDeclaredField(&#39;androidBuilder&#39;);
    fieldAndroidBuilder.setAccessible(true);

    AndroidBuilder androidBuilder = dexTransform.androidBuilder;
    fieldAndroidBuilder.set(dexTransform, AndroidBuilderWrapper.wrapperAndroidBuilder(androidBuilder));
}

// 自定义androidBuidler.
private static class AndroidBuilderWrapper extends AndroidBuilder {

    public
    static AndroidBuilder wrapperAndroidBuilder(AndroidBuilder androidBuilder) {
        return new AndroidBuilderWrapper(androidBuilder);
    }

    AndroidBuilderWrapper(AndroidBuilder androidBuilder) {
        super(androidBuilder.mProjectId, androidBuilder.mCreatedBy, androidBuilder.getProcessExecutor(), androidBuilder.mJavaProcessExecutor, androidBuilder.getErrorReporter(), androidBuilder.getLogger(), androidBuilder.mVerboseExec);
        setTargetInfo(androidBuilder.sdkInfo, androidBuilder.targetInfo, androidBuilder.mLibraryRequests);
    }

    @Override
    void convertByteCode(Collection&amp;lt;File&amp;gt; inputs, File outDexFolder, boolean multidex, File mainDexList, DexOptions dexOptions, List&amp;lt;String&amp;gt; additionalParameters, boolean incremental, boolean optimize, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {
        println &amp;quot;AndroidBuilderWrapper invoke convertByteCode&amp;quot;;
        // 添加dx参数.
        if (additionalParameters == null) {
            additionalParameters = new ArrayList&amp;lt;String&amp;gt;();
        }
        dx.additionalParameters += &#39;--multi-dex&#39;;
    	// dx.additionalParameters += &#39;--minimal-main-dex&#39;;
    	dx.additionalParameters += &#39;--set-max-idx-number=55000&#39;;        
        println &amp;quot;AndroidBuilderWrapper invoke convertByteCode, additionalParameters=${additionalParameters}&amp;quot;;
        super.convertByteCode(inputs, outDexFolder, multidex, mainDexList, dexOptions, additionalParameters, incremental, optimize, processOutputHandler)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-参考&#34;&gt;8. 参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/user-guide&#34;&gt;New Build System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/transform-api&#34;&gt;Transform Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ceabie/AndroidPublicXmlCompat/blob/master/app/public-xml.gradle&#34;&gt;AndroidPublicXmlCompat&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>hugo help</title>
      <link>http://coofee.github.io/post/hugo-help/</link>
      <pubDate>Mon, 11 Jul 2016 23:07:37 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/hugo-help/</guid>
      <description>

&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;

&lt;h2 id=&#34;1-1-创建文件&#34;&gt;1.1 创建文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
# 切换到博客目录
$ hugo new post/xxxxx.md

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-发布到本地预览网站&#34;&gt;1.2 发布到本地预览网站&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo server --theme=greyshade --buildDrafts --watch

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-3-发布网站到github&#34;&gt;1.3 发布网站到github&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo  --theme=greyshade --buildDrafts
$ cd public
$ git add * 
$ git commit -a -m &#39;add all&#39;
$ git push origin master

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-4-添加图片到文件&#34;&gt;1.4 添加图片到文件&lt;/h2&gt;

&lt;p&gt;The images should be put in the static folder, which will be copied to the root of the website (so their url is www.example.com/image.png) by Hugo.&lt;/p&gt;

&lt;p&gt;所以在static目录中创建文件夹，然后在markdown中直接引用即可。&lt;/p&gt;

&lt;p&gt;例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static
└── android-fetch-add-custom-cookie
    └── react-native-fetch-0.44.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在markdown中则需要如下方式引用:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![](android-fetch-add-custom-cookie/react-native-fetch-0.44.png)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>groovy replace method</title>
      <link>http://coofee.github.io/post/groovy-replace-method/</link>
      <pubDate>Thu, 30 Jun 2016 00:04:39 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/groovy-replace-method/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;groovy-动态代理即替换方法&#34;&gt;Groovy 动态代理即替换方法&lt;/h1&gt;

&lt;p&gt;我们知道在Java中可以使用以下几种方法替换方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JDK自带的动态代理只支持修改某个类所实现的接口的方法。java只支持单继承，所有的代理类都是Proxy的子类，所以只能覆盖接口的方法。&lt;/li&gt;
&lt;li&gt;asm直接修改字节码，直接修改字节码，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;li&gt;javassist直接修改字节码，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;li&gt;cglib基于asm封装，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总的来说，使用jdk自带的方案有局限，使用第三方框架能够支持全部功能。下面我们就来看一下，groovy作为一门jvm语言如何更加方便的实现动态代理的。&lt;/p&gt;

&lt;h2 id=&#34;1-1-演示类&#34;&gt;1.1 演示类&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;class ReplaceMethod {
    
    // 用于演示替换实例方法
    public List&amp;lt;String&amp;gt; getStreamInputs() {
        List&amp;lt;String&amp;gt; strings = &amp;quot;a, b, c, d&amp;quot;.split(&amp;quot;, &amp;quot;);
        return strings;
    }

    // 用于演示替换泛型方法，同时演示如何区分同名的方法。
    public void genericMethod(List&amp;lt;String&amp;gt; strings) {
        println strings
    }

    public void genericMethod(List&amp;lt;String&amp;gt; strings, boolean num) {
        println strings
    }

}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-如何替换方法&#34;&gt;2 如何替换方法？&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;通过metaClass的&lt;code&gt;pickMethod&lt;/code&gt;获取到原始的方法引用。&lt;/li&gt;
&lt;li&gt;使用闭包替换metaClass上要替换的方法即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;样例代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def repalceMethod = new ReplaceMethod();
println repalceMethod.getStreamInputs();
def oldMethod = ReplaceMethod.metaClass.&amp;amp;pickMethod(&#39;getStreamInputs&#39;, (Class[]) null)
repalceMethod.metaClass.getStreamInputs = {
    println &amp;quot;replaced&amp;quot;
    // 执行旧方法.
    println oldMethod.invoke(repalceMethod);
    List&amp;lt;String&amp;gt; strings = &amp;quot;1, 2, 3, 4&amp;quot;.split(&amp;quot;, &amp;quot;);
    return strings;
}
println repalceMethod.getStreamInputs()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-通过class的meta直接替换方法&#34;&gt;2.1 通过class的meta直接替换方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;Class.forName(&#39;com.coffee.groovy.metaclass.ReplaceMethod&#39;).metaClass.invokeMethod = { name, args -&amp;gt;
    println &amp;quot;replaced: Called ${name} with ${args}&amp;quot;
    println args.length
    println args.class
    println args.metaClass
    // http://stackoverflow.com/questions/10125903/groovy-overriding-invokemethod-for-a-single-instance
    delegate.class.metaClass.getMetaMethod(name, args)?.invoke(delegate, args)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-替换泛型方法-替换同名方法&#34;&gt;2.2 替换泛型方法&amp;amp;替换同名方法&lt;/h3&gt;

&lt;p&gt;通过指定要替换的方法的参数类型，既可以通过&lt;code&gt;pickMethod&lt;/code&gt;获取到对应的正确函数。对泛型而言，无需指定其具体的类型。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;List&amp;lt;Class&amp;gt; argClasses = [];
argClasses.add(List.class)
argClasses.add(boolean.class)
println argClasses
def clazz = Class.forName(&#39;com.coffee.groovy.metaclass.ReplaceMethod&#39;);
def oldGenericMethod = clazz.metaClass.&amp;amp;pickMethod(&#39;genericMethod&#39;,
        argClasses.toArray(new Class[0]))
clazz.metaClass.genericMethod = { strings, result -&amp;gt;
    println &amp;quot;replaced: $strings : $result&amp;quot;
}

repalceMethod.genericMethod(&amp;quot;ac, sd, dc, dd&amp;quot;.split(&amp;quot;, &amp;quot;), true)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>如何科学上网</title>
      <link>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Fri, 25 Mar 2016 13:14:08 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>

&lt;h2 id=&#34;1-如何使用shadowsocks代理访问网络&#34;&gt;1. 如何使用shadowsocks代理访问网络？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;购买代理服务器，安装shadowsocks。&lt;/li&gt;
&lt;li&gt;本机安装shadowsocks-gui，然后添加代理服务器上shadowsocks的配置，此时shadowsocks会在本机上面开启一个socks代理，其默认端口是: 1080。&lt;/li&gt;
&lt;li&gt;打开shadowsocks，勾选代理服务器，同时勾选shadowsocks-gui的全局模式或者自动代理模式，然后在浏览器上面选择使用系统代理即可正常访问google。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-如何在mac的terminal中使用socks代理&#34;&gt;2. 如何在mac的Terminal中使用socks代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用homebrew安装proxychains4-ng&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建&lt;code&gt;~/.proxychains/proxychains.conf&lt;/code&gt;文件，文件内容如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;strict_chain
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000
localnet 127.0.0.0/255.0.0.0
quiet_mode

[ProxyList]
socks5  127.0.0.1 1080
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Terminal中，使用&lt;code&gt;proxychains4 [cmd]&lt;/code&gt;就可以使用代理服务器了。如：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;~$ proxychains4 brew update&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于mac osx 10.11，由于apple新增了sip模式，需要进入到Recovery模式(&lt;strong&gt;cmmand+R&lt;/strong&gt;)，然后在terminal中执行&lt;code&gt;csrutil enable --without debug&lt;/code&gt;命令，然后重启电脑，即可正常使用proxychains4-ng。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-如何让socks代理支持http代理&#34;&gt;3. 如何让socks代理支持http代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;安装polipo：&lt;code&gt;brew install polipo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看配置参数：&lt;code&gt;polipo -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动http代理：&lt;code&gt;polipo socksParentProxy=localhost:1080&lt;/code&gt;，其默认端口是8123。&lt;/li&gt;
&lt;li&gt;此时其他应该程序就可以设置polipo的http代理：&lt;code&gt;localhost:8123&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-如何在terminal中使用http代理&#34;&gt;4. 如何在Terminal中使用Http代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;~/.bash_profile&lt;/code&gt;文件中添加以下代码，然后执行&lt;code&gt;source ~/.bash_profile&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias gaproxy=&#39;export http_proxy=127.0.0.1:8123 https_proxy=127.0.0.1:8123&#39;
alias noproxy=&#39;unset http_proxy https_proxy&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当使用http代理时，执行gaproxy，然后执行其他命令即可。如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ gaproxy
~$ curl www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不使用时，可以直接执行noproxy。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
