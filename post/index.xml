<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Simple...</title>
    <link>http://coofee.github.io/post/</link>
    <description>Recent content in Posts on Simple...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>coffeerene.zhao@gmail.com (Coofee)</managingEditor>
    <webMaster>coffeerene.zhao@gmail.com (Coofee)</webMaster>
    <lastBuildDate>Fri, 26 Jul 2019 19:18:58 +0800</lastBuildDate>
    
	<atom:link href="http://coofee.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to write sqlites extension</title>
      <link>http://coofee.github.io/post/how_to_write_sqlites_extension/</link>
      <pubDate>Fri, 26 Jul 2019 19:18:58 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/how_to_write_sqlites_extension/</guid>
      <description>0x00 SQLite sqlite是一个使用c语音编写的库，其实现了一个的小巧、快速、自含、高可靠性、全功能的SQL数据库引擎。它仅依赖少数的几个系统调用。它是一个非常流行的数据库，几乎打包到了所有的移动设备中，同时有无数的应用程序内嵌了它。
0x01 SQLite扩展 sqlite extension是可以在运行时被sqlite加载的库，其主要有以下作用：
 扩展sqlite的功能，如提供sqlite本身不支持的函数。 运行时加载扩展，可以动态更新，也可以保证只在需要时加载扩展，减少内存消耗。 扩展可以独立于sqlite本身单独开发，测试。  0x02 启用扩展 由于一些安全性的问题，sqlite默认禁用扩展，当用户使用扩展时，首先需要启用扩展功能，开启的方式有以下两种：
 编译sqlite时在编译选项中添加LOCAL_CFLAGS += -DSQLITE_ENABLE_LOAD_EXTENSION=1标志，直接启用扩展功能。 使用sqlite提供的接口sqlite3_enable_load_extension(db, 1);，直接开启扩展功能，其中1表示启用扩展，0表示禁用扩展。  0x03 加载扩展 加载扩展有两种方式，
 使用sqlite内建的load_extension(libFileName, entryPoint)sql语句加载扩展，若加载失败会直接抛出异常，否则加载成功，如：
select load_extension(distance, sqlite3_distance_init)  注意: 在java中使用sql语句加载扩展时，需要先使用System.loadLibrary(&amp;quot;distance&amp;quot;)加载动态库。
 使用sqlite提供的api函数sqlite3_load_extension(db, libFilePath, entryPoint, pzErrMsg)加载扩展，当函数返回SQLITE_OK也就是0时表示扩展加载成功。
注意：在java中使用函数加载扩展时，需要使用sqlite3-android-bindings库提供的jni接口来调用c接口。
  0x04 编写扩展 编写扩展时，我们可以从sqlite的官网复制一份模板代码，整个模板代码如下所示：
/* Add your header comment here */ #include &amp;lt;sqlite3ext.h&amp;gt; /* Do not use &amp;lt;sqlite3.h&amp;gt;! */ SQLITE_EXTENSION_INIT1 /* Insert your extension code here */ #ifdef _WIN32 __declspec(dllexport) #endif /* TODO: Change the entry point name so that &amp;quot;extension&amp;quot; is replaced by ** text derived from the shared library filename as follows: Copy every ** ASCII alphabetic character from the filename after the last &amp;quot;/&amp;quot; through ** the next following &amp;quot;.</description>
    </item>
    
    <item>
      <title>auto_create_wx_acitivty_by_annotation</title>
      <link>http://coofee.github.io/post/auto_create_wx_acitivty_by_annotation/</link>
      <pubDate>Mon, 10 Sep 2018 15:05:35 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/auto_create_wx_acitivty_by_annotation/</guid>
      <description>如何使用注解生成WXEntryActivity? 在Android中使用注解时，需要创建java模块，否则无法导入javax.annotation.processing.AbstractProcessor;相关依赖。
1. android注解配置 1. 使用annotationProcessor设置参数 a) /gradle/wrapper/gradle-wrapper.properties
distributionUrl = https\://services.gradle.org/distributions/gradle-4.4-all.zip  b) 配置annotationProcessor
buildscript { repositories { // Gradle 4.1 and higher include support for Google&#39;s Maven repo using // the google() method. And you need to include this repo to download // Android plugin 3.0.0 or higher. google() ... } dependencies { classpath &#39;com.android.tools.build:gradle:3.1.0&#39; } } android { defaultConfig { javaCompileOptions { annotationProcessorOptions { arguments = [ key1 : &#39;key1Value&#39;, key2 : &#39;key2Value&#39; ] } } } } dependencies { annotationProcessor &#39;xxx:xx:xxx&#39; }  2.</description>
    </item>
    
    <item>
      <title>golang dev</title>
      <link>http://coofee.github.io/post/golang-dev/</link>
      <pubDate>Thu, 06 Sep 2018 19:36:14 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/golang-dev/</guid>
      <description>配置Golang开发环境（仅介绍Mac平台） install Homebrew $ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  install golang $ brew install go $ go version go version go1.11 darwin/amd64 # 配置GOROOT $ printf &amp;quot;\n\nexport GOROOT=/usr/local/Cellar/go/1.11/libexec \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile # 配置GOPATH $ mkdir -p ~/go/gopath $ printf &amp;quot;export GOPATH=~/go/gopath \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile # 追加到PATH $ printf &amp;quot;export GOBIN=$GOROOT/bin \n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile $ printf &amp;quot;export PATH=$PATH:$GOBIN:$GOPATH/bin \n\n&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile $ source ~/.bash_profile  install privoxy privoxy可以将http请求代理到socks5，下面将 privoxy + shadowsocks 搭配使用</description>
    </item>
    
    <item>
      <title>flutter</title>
      <link>http://coofee.github.io/post/flutter/</link>
      <pubDate>Thu, 06 Sep 2018 19:33:10 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/flutter/</guid>
      <description>[TOC]
0x00 Flutter flutter是google开发的移动端UI框架，支持android和ios。该框架使用dart语言进行开发，在skia的基础上开发了一套公共组件达到android与ios共用代码的目的。
1. Flutter系统架构 2. Platform Channels flutter使用methodChannel/flutterMethodChannel来访问系统原生api。 0x01 使用Flutter开发应用程序 1. 下载配置Flutter SDK  由于众所周知的原因，我们首先需要进行如下配置，让flutter通过国内镜像下载sdk等依赖。
export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn  安装sdk
$ git clone -b beta https://github.com/flutter/flutter.git $ export PATH=`pwd`/flutter/bin:$PATH  使用flutter doctor检测本机环境，然后根据提示安装依赖软件。
$ flutter doctor Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel beta, v0.1.5, on Mac OS X 10.11.6 15G19009, locale zh-Hans) [✓] Android toolchain - develop for Android devices (Android SDK 27.</description>
    </item>
    
    <item>
      <title>Gradle plugin 3.0 &amp; Android Studio 3.0</title>
      <link>http://coofee.github.io/post/upgrade-android-studio-gradle/</link>
      <pubDate>Fri, 15 Sep 2017 18:59:41 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-android-studio-gradle/</guid>
      <description>Gradle plugin 3.0 &amp;amp; Android Studio 3.0 我们主要讲一下升级gradle plugin 3.0过程中遇到的问题与解决方案。
Gradle Plugin 3.0 1. 升级gradle plugin插件版本为3.x buildscript { repositories { mavenLocal() jcenter() // You need to add the following repository to download the // for new plugin. google() } dependencies { classpath &#39;com.android.tools.build:gradle:3.0.0-beta2&#39; } }  2. 升级gradle版本为4.1 修改gradle/wrapper/gradle-wrapper.properties中的distributionUrl为gradle-4.1-all。
distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip  3. 升级build-tools为25.0.3  The specified Android SDK Build Tools version (22.0.1) is ignored, as it is below the minimum supported version (25.</description>
    </item>
    
    <item>
      <title>android check app running foreground</title>
      <link>http://coofee.github.io/post/android-check-app-running-foreground/</link>
      <pubDate>Tue, 25 Jul 2017 19:43:30 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-check-app-running-foreground/</guid>
      <description>0x00 使用Application.ActivityLifecycleCallbacks检测App运行在前台/后台 import android.app.Activity; import android.app.ActivityManager; import android.app.Application; import android.content.Context; import android.os.Bundle; import android.os.Handler; import android.util.Log; import java.util.List; public class ApplicationLifecycle implements Application.ActivityLifecycleCallbacks { private Handler mHandler = new Handler(); private Runnable mCheck = new Runnable() { @Override public void run() { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; mCounter=&amp;quot; + mCounter); if (mCounter == 0) { Log.e(&amp;quot;ApplicationLifecycle&amp;quot;, &amp;quot;check task exec; get runningAppProcessInfo.&amp;quot;); final ActivityManager am = (ActivityManager) mAppContext.getSystemService(Context.ACTIVITY_SERVICE); // NOTE: getRunningAppProcess() ONLY GIVE YOU THE PROCESS OF YOUR OWN PACKAGE IN ANDROID M // BUT THAT&#39;S ENOUGH HERE List&amp;lt;ActivityManager.</description>
    </item>
    
    <item>
      <title>sha1-collision &amp; android signature algorithm</title>
      <link>http://coofee.github.io/post/upgrade-app-signature-algorithm/</link>
      <pubDate>Fri, 21 Jul 2017 18:35:56 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-app-signature-algorithm/</guid>
      <description>SHA1-Collision &amp;amp; Android Sign 参看SHA1-collision我们可以知道，SHA-1签名已经不安全了，签名算法可以考虑升级到SHA-2或者其他算法。
0x01 SHA1-Collision 1. SHA-1是什么？ SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）[2]。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数，参考：SHA-1
2. SHA1-Collision是什么？ 两个内容不同的数据，SHA-1算法会生成相同的摘要信息，参考：SHA1 collision Two PDF。
3. SHA1-Collision对Android的影响 Android SDK默认对apk使用SHA-1签名，在最坏的情况下，攻击者可以伪造SHA-1值相同的文件替换已签名apk中的文件来达到攻击的目的。
0x02 Android的证书验证机制 我们知道Android的Apk文件是一个压缩文件，文件结构大致如下:
. ├── AndroidManifest.xml ├── META-INF │ ├── CERT.RSA │ ├── CERT.SF │ └── MANIFEST.MF ├── assets ├── classes.dex ├── classes2.dex ├── classes3.dex ├── lib ├── res └── resources.arsc  apk相关的签名相关的文件在META-INF目录中，其中：
 MANIFEST.MF
遍历APK包中除了META-INF\文件夹以外的所有文件，利用SHA-1算法生成这些文件的消息摘要，然后转化为对应的base64编码。MANIFEST.MF存储的是文件的摘要值，保证完整性，防止文件被篡改。
 .SF
xx.SF文件（xx为使用者证书的自定义别名，默认为CERT，即CERT.SF），保存的是MANIFEST.MF的摘要值， 以及MANIFEST.MF中每一个摘要项的摘要值，然后转化成对应的base64编码。虽然该文件的后缀名.sf(SignatureFile)看起来是签名文件，但是并没有私钥参与运算，也不保存任何签名内容。
 .RSA/.DSA
.RSA/.DSA文件（后缀不同采用的签名算法不同，.RSA使用的是RSA算法，.DSA使用的是数字签名算法DSA，目前APK主要使用的是这两种算法），保存的是第二项.SF文件的数字签名，同时还会包括签名采用的数字证书（公钥）。特别说明，当使用多重证书签名时，每一个.sf文件必须有一个.RSA/.DSA文件与之对应，也就是说使用证书CERT1签名时有CERT1.SF和CERT1.RSA，同时采用证书CERT2签名时又会生成CERT2.SF和CERT2.RSA。
  Android 系统不允许安装没有任何数字签名的应用APK程序，所有应用程序必须使用某个证书进行签名（一般为应用开发者自签名证书），</description>
    </item>
    
    <item>
      <title>catch react native IllegalViewOperationException</title>
      <link>http://coofee.github.io/post/catch-react-native-illegalviewoperationexception/</link>
      <pubDate>Fri, 21 Jul 2017 17:44:38 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/catch-react-native-illegalviewoperationexception/</guid>
      <description>0x00 React Native Default Exception Handler React Native官方支持在生成ReactInstanceManager时使用NativeModuleCallExceptionHandler接口来设置自己的异常处理器，防止js/react-native代码异常导致native端直接崩溃，样例代码如下：
ReactInstanceManagerBuilder builder = ReactInstanceManager.builder() .setApplication(context.getApplicationContext()) .addPackage(new MainReactPackage()) .setInitialLifecycleState(LifecycleState.BEFORE_CREATE) .setNativeModuleCallExceptionHandler(new NativeModuleCallExceptionHandler { @Override public void handleException(Exception e) { // 自己处理react-native异常. } });  0x01 com.facebook.react.uimanager.IllegalViewOperationException app发布到线上之后，仍然出现了少部分未能捕获的异常，堆栈信息如下:
com.facebook.react.uimanager.IllegalViewOperationException Trying to add unknown view tag: 500 detail: View tag:496 children(2): [ 497,498, ], viewsToAdd(1): [ [2,500], ], 1 com.facebook.react.uimanager.NativeViewHierarchyManager.manageChildren(NativeViewHierarchyManager.java:387) 2 com.facebook.react.uimanager.UIViewOperationQueue$ManageChildrenOperation.execute(UIViewOperationQueue.java:179) 3 com.facebook.react.uimanager.UIViewOperationQueue$2.run(UIViewOperationQueue.java:787) 4 com.facebook.react.uimanager.UIViewOperationQueue.flushPendingBatches(UIViewOperationQueue.java:843) 5 com.facebook.react.uimanager.UIViewOperationQueue.access$1600(UIViewOperationQueue.java:48) 6 com.facebook.react.uimanager.UIViewOperationQueue$DispatchUIFrameCallback.doFrameGuarded(UIViewOperationQueue.java:889) 7 com.facebook.react.uimanager.GuardedFrameCallback.doFrame(GuardedFrameCallback.java:31) 8 com.facebook.react.modules.core.ReactChoreographer$ReactChoreographerDispatcher.doFrame(ReactChoreographer.java:129) 9 com.</description>
    </item>
    
    <item>
      <title>upgrade android support library to 25.4.0</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>Android升级Support库版本至25.4.0
[TOC]
0x00 背景 support库是google官方提供的支持库，其主要功能在于兼容android高/低版本系统（如：support-v4、support-v7库），同时伴随着support库的不同版本，也会发布同版本的各种UI组件库（如Design、RecyclerView等）。support库的每次更新升级，一般都会包括bug修复、性能优化以及功能改进等等。
目前我们App使用的版本是23.0.1，截止目前google发布的最新稳定版本是25.4.0，中间相差了将近20个版本，其中包含大量的bug修复；同时又因为Design、RecyclerView等UI库的很多新组件也依赖于support库的升级，所以我们计划将support-v4、support-v7、Design、RecyclerView等库统一升级至25.4.0版本。
0x01 打包环境的影响及解决方案 1. 升级JDK &amp;amp; Android SDK  升级JDK到1.8 升级Android SDK到25  2. 升级CentOS或GLIBC 由于我们的jenkins打包服务器的系统是CentOS 6.5，其默认支持的GLIBC库版本最高为2.12，而android sdk高版本需要的GLIBC版本为2.14，所以要么升级系统CentOS到7.x版本，要么升级GLIBC版本到2.14.
当Android SDK需要的GLIBC版本不匹配时，出错信息大致如下:
[exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt) [exec] /data0/android-tools/android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /data0/android-tools/android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)  在CentOS系统中，使用strings /lib64/libc.so.6 | grep GLIBC命令可以查看其支持的GLIBC库的版本。
3. 指定gradle使用jdk1.8 由于android sdk需要在jdk1.8环境才能正常编译、打包，所以要么在系统中配置java环境变量为jdk1.8版本；要么在执行gradle时指定其运行环境为jdk1.8。
指定gradle使用jdk1.8，具体配置如下：
gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8  也可以直接在gradle.properties中指定jdk版本，如下所示：
org.gradle.java.home=/usr/java/jdk1.8  4. support库与build-tools版本 由于我们app原本使用的build-tools版本是22.0.1，当保持build-tools版本不变，只升级support库版本时，在HUAWEI P7-L00 4.4.2上面运行时，会出现如下错误，推测是因为support库版本和build-tools主版本号不一致导致，所以如果升级support库版本，最好保持和build-tools主版本号一致，防止各种诡异问题。
E/AndroidRuntime: FATAL EXCEPTION: main Caused by: android.</description>
    </item>
    
    <item>
      <title>android fetch add custom cookie</title>
      <link>http://coofee.github.io/post/android-fetch-add-custom-cookie/</link>
      <pubDate>Thu, 29 Jun 2017 11:14:50 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-fetch-add-custom-cookie/</guid>
      <description>[TOC]
0x00 为React Native的网络请求添加公共Cookie 本文分析基于React Native 0.44版本分析。
由于我们在使用React Native编写应用时，内部的网络请求均使用了fetch函数，所以下面我们主要分析一下fetch函数的整个调用流程。
0x01 Fetch追根溯源 从React Native的源代码我们可以知道fetch函数最终也是由native端的NetworkingModule.java（Android）或RCTNetworking.mm（iOS）实现。
1. 其调用流程如下 2. 代码分析如下 1. 将fetch函数添加到全局变量 在react-native/Libraries/Core/InitializeCore.js的全部变量global中定义了fetch函数。
// Set up XHR // The native XMLHttpRequest in Chrome dev tools is CORS aware and won&#39;t // let you fetch anything from the internet defineProperty(global, &#39;XMLHttpRequest&#39;, () =&amp;gt; require(&#39;XMLHttpRequest&#39;)); defineProperty(global, &#39;FormData&#39;, () =&amp;gt; require(&#39;FormData&#39;)); defineProperty(global, &#39;fetch&#39;, () =&amp;gt; require(&#39;fetch&#39;).fetch); defineProperty(global, &#39;Headers&#39;, () =&amp;gt; require(&#39;fetch&#39;).Headers); defineProperty(global, &#39;Request&#39;, () =&amp;gt; require(&#39;fetch&#39;).</description>
    </item>
    
    <item>
      <title>React Native Bundle Split</title>
      <link>http://coofee.github.io/post/react-native-bundle-split/</link>
      <pubDate>Thu, 18 May 2017 19:28:52 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/react-native-bundle-split/</guid>
      <description>使用rn-packager拆分react-native的jsbundle(core.android.bundle + business.android.bundle)，然后在程序启动时分步加载拆分后的bundle，以达到热更新目的，注:本文档使用的react native版本为0.43。
0x00 分步加载jsbundle 将rn-packager打包生成的jsbundle+图片资源统一放到assets目录中，应用程序启动时，复制到files目录，只要保持目录结构不变，js就可以正常访问图片资源。故而，如果需要热更新jsbundle和图片资源时，只需要直接更新files目录中的图片和jsbundle文件即可，具体可以看packager-bundle-split。
 加载core.android.bundle
ReactInstanceManagerBuilder builder = ReactInstanceManager.builder() .setApplication(mApplication) .setJSMainModuleName(getJSMainModuleName()) .setUseDeveloperSupport(getUseDeveloperSupport()) .setRedBoxHandler(getRedBoxHandler()) .setUIImplementationProvider(getUIImplementationProvider()) .setInitialLifecycleState(LifecycleState.BEFORE_CREATE); for (ReactPackage reactPackage : getPackages()) { builder.addPackage(reactPackage); } String jsBundleFile = getJSBundleFile(); if (jsBundleFile != null) { builder.setJSBundleFile(jsBundleFile); } else { builder.setBundleAssetName(Assertions.assertNotNull(getBundleAssetName())); } File coreBundleFile = new File(mApplication.getFilesDir(), &amp;quot;rn/core.android.bundle&amp;quot;); if (!coreBundleFile.exists()) { Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;copy assets://core.android.bundle to &amp;quot; + coreBundleFile); AssetsUtils.copyFile(mApplication, &amp;quot;core.android.bundle&amp;quot;, coreBundleFile.getAbsolutePath()); } // 加载core.android.bundle builder.setJSBundleLoader(JSBundleLoader.createFileLoader(coreBundleFile.getAbsolutePath())); Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;set core bundle&amp;quot;); return builder.</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>http://coofee.github.io/post/tools/</link>
      <pubDate>Fri, 30 Sep 2016 17:11:19 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/tools/</guid>
      <description>1. golang跨平台编译 // 如： env GOOS=linux GOARCH=amd64 go build *.go  2. ssh ssh -p port username@host  3. scp scp -P port local_file username@host:remote_file scp -P port -r local_dir username@host:remote_dir  4. github pull request # clone git clone https://github.com/coofee/tinker.git # 添加tinker git remote add tinker https://github.com/Tencent/tinker # 从tinker的dev分支创建功能分支 git branch compat-gradle-plugin-3.x-dev tinker/dev git checkout compat-gradle-plugin-3.x-dev # push分支到origin git push -u origin compat-gradle-plugin-3.x-dev # 合并tinker的dev分支代码 git pull tinker dev # 删除远程分支 git push origin --delete compat-gradle-plugin-3.</description>
    </item>
    
    <item>
      <title>android jni bspatch</title>
      <link>http://coofee.github.io/post/jni-bspatch/</link>
      <pubDate>Sat, 17 Sep 2016 22:01:24 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/jni-bspatch/</guid>
      <description>[TOC]
1. 下载并配置NDK: https://developer.android.com/ndk/downloads/index.html
2. 编译Bsdiff 2.1 编写java类，创建native方法 package com.commons.utils; public class Bspatch { static { System.loadLibrary(&amp;quot;bspatch&amp;quot;); } public static native int applyPatch(String oldFile, String newFile, String patchFile); }  2.2 生成.h文件  使用javac编写Bspatch或者在ide里面编译，这里我在android studio中编写并执行gradle的compileDebugJavaWithJavac任务进行编译，编译完成后，切换到classes目录。
 使用javah生成.h文件
// 切换到编译好的类目录 cd app/build/intermediates/classes // 生成.h文件 javah -d h -classpath debug com.commons.utils.Bspatch   2.3 编译c/c++代码.  复制生成的.h文件到c/c++文件目录. 在存放c/c++代码的目录中添加Android.mk、Application.mk文件。 其中Android.mk用于指定要编译的类，模块名称等； Application.mk用于指定要生成特定abi类型的so文件，如：x86，armeabi等。  目录结构如下：
  app  build jni  bspatch bzip2 Android.</description>
    </item>
    
    <item>
      <title>Android Gradle插件升级填坑指南</title>
      <link>http://coofee.github.io/post/android-gradle-plugin-compat/</link>
      <pubDate>Thu, 01 Sep 2016 19:27:06 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/android-gradle-plugin-compat/</guid>
      <description>[TOC]
Android Gradle插件升级填坑指南
1. 引子 自打android开发环境从eclipse迁移到android studio之后，android项目的打包就从ant迁移到了gradle。自此只要是在打包过程中需要干扰代码生成或执行其他特殊处理，都需要通过gradle脚本完成，具体来说就是通过在打包过程中插入task或者给现用task添加hook。 对于我们的项目而言，在插件化和热修复技术，为了降低打包成本，我们编写了自己的gradle插件，用于支持app的插件化和热修复打包。
2. 由instant-run引发的血案 时间来到了16年，随着Instant-Run功能的逐渐完善，我们也升级android studio和gradle来体验强大的Instant-Run，刚一运行就崩溃了。。。
查看一下报错日志，发现proguardDebug任务找不到；瞅了一下打包产生的临时目录，发现intermediates/classes-proguard目录也找不到了，并且还多出来了intermediates/transforms这个奇怪的目录，赶紧google一下，发现google在gradle插件高版本中引入了transform-api（主要是给大家提供了一个操作代码的接口，比如可以注入代码什么的），并且在高版本的gradle插件中使用transformClassesAndResourcesWithProguardForDebug任务替换了低版本的proguardDebug任务。
3. 兼容Transform Api 知道了问题所在，那就让我们撸起袖子干起来吧，将原本需要在proguardDebug之后执行的代码迁移到transformClassesAndResourcesWithProguardForDebug之后，并稍作改动就可以了。大概代码如下：
def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString() gradle.taskGraph.afterTask { Task task, TaskState state -&amp;gt; if (state.failure != null) { println &amp;quot;${task} error: ${state.failure}&amp;quot; state.failure.printStackTrace() state.rethrowFailure(); return; } if (task.name.equals(proguardTaskName)) { // 执行自己的代码，将先前的代码迁移至此，并稍作改动即可。 } }  4. 兼容不同版本 这里我们为了兼容各个版本的gradle插件，那么就出现了一个新问题如何区分某个gradle插件版本是否支持transform api？
查看官网，发现上面有这么一句话 &amp;gt; (The API existed in 1.4.0-beta2 but it&amp;rsquo;s been completely revamped in 1.5.0-beta1)
也就是说，这个api在1.4.0-beta2的时候就已经存在了，但是直到1.5.0-beta1版本的时候才改造完成。这么来看的话，通过版本来判断比较复杂，并且不一定靠谱，那么如何能够既简单又靠谱的判断呢？
答案很简单，直接判断project是否拥有transform的task即可，大概代码如下：</description>
    </item>
    
    <item>
      <title>hugo help</title>
      <link>http://coofee.github.io/post/hugo-help/</link>
      <pubDate>Mon, 11 Jul 2016 23:07:37 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/hugo-help/</guid>
      <description>Hugo 1.1 创建文件 # 切换到博客目录 $ hugo new post/xxxxx.md  1.2 发布到本地预览网站 $ hugo server --theme=greyshade --buildDrafts --watch  1.3 发布网站到github $ hugo --theme=greyshade --buildDrafts $ cd public $ git add * $ git commit -a -m &#39;add all&#39; $ git push origin master  1.4 添加图片到文件 The images should be put in the static folder, which will be copied to the root of the website (so their url is www.</description>
    </item>
    
    <item>
      <title>groovy replace method</title>
      <link>http://coofee.github.io/post/groovy-replace-method/</link>
      <pubDate>Thu, 30 Jun 2016 00:04:39 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/groovy-replace-method/</guid>
      <description>[TOC]
Groovy 动态代理即替换方法 我们知道在Java中可以使用以下几种方法替换方法。
 JDK自带的动态代理只支持修改某个类所实现的接口的方法。java只支持单继承，所有的代理类都是Proxy的子类，所以只能覆盖接口的方法。 asm直接修改字节码，直接修改字节码，直接修改类的方法和所实现接口的方法。 javassist直接修改字节码，直接修改类的方法和所实现接口的方法。 cglib基于asm封装，直接修改类的方法和所实现接口的方法。  总的来说，使用jdk自带的方案有局限，使用第三方框架能够支持全部功能。下面我们就来看一下，groovy作为一门jvm语言如何更加方便的实现动态代理的。
1.1 演示类 class ReplaceMethod { // 用于演示替换实例方法 public List&amp;lt;String&amp;gt; getStreamInputs() { List&amp;lt;String&amp;gt; strings = &amp;quot;a, b, c, d&amp;quot;.split(&amp;quot;, &amp;quot;); return strings; } // 用于演示替换泛型方法，同时演示如何区分同名的方法。 public void genericMethod(List&amp;lt;String&amp;gt; strings) { println strings } public void genericMethod(List&amp;lt;String&amp;gt; strings, boolean num) { println strings } }  2 如何替换方法？  通过metaClass的pickMethod获取到原始的方法引用。 使用闭包替换metaClass上要替换的方法即可。  样例代码如下：
def repalceMethod = new ReplaceMethod(); println repalceMethod.getStreamInputs(); def oldMethod = ReplaceMethod.</description>
    </item>
    
    <item>
      <title>如何科学上网</title>
      <link>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Fri, 25 Mar 2016 13:14:08 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>1. 如何使用shadowsocks代理访问网络？  购买代理服务器，安装shadowsocks。 本机安装shadowsocks-gui，然后添加代理服务器上shadowsocks的配置，此时shadowsocks会在本机上面开启一个socks代理，其默认端口是: 1080。 打开shadowsocks，勾选代理服务器，同时勾选shadowsocks-gui的全局模式或者自动代理模式，然后在浏览器上面选择使用系统代理即可正常访问google。  2. 如何在mac的Terminal中使用socks代理？  使用homebrew安装proxychains4-ng 创建~/.proxychains/proxychains.conf文件，文件内容如下。
strict_chain proxy_dns remote_dns_subnet 224 tcp_read_time_out 15000 tcp_connect_time_out 8000 localnet 127.0.0.0/255.0.0.0 quiet_mode [ProxyList] socks5 127.0.0.1 1080  在Terminal中，使用proxychains4 [cmd]就可以使用代理服务器了。如：
* 对于mac osx 10.11，由于apple新增了sip模式，需要进入到Recovery模式(**cmmand+R**)，然后在terminal中执行`csrutil enable --without debug`命令，然后重启电脑，即可正常使用proxychains4-ng。 ## 3. 如何让socks代理支持http代理？ * 安装polipo：`brew install polipo` * 查看配置参数：`polipo -v` * 启动http代理：`polipo socksParentProxy=localhost:1080`，其默认端口是8123。 * 此时其他应该程序就可以设置polipo的http代理：`localhost:8123` ## 4. 如何在Terminal中使用Http代理？ * 在`~/.bash_profile`文件中添加以下代码，然后执行`source ~/.bash_profile`。  bash alias gaproxy=&amp;lsquo;export http_proxy=127.0.0.1:8123 https_proxy=127.0.0.1:8123&amp;rsquo; alias noproxy=&amp;lsquo;unset http_proxy https_proxy&amp;rsquo;</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://coofee.github.io/post/about/</link>
      <pubDate>Tue, 15 Mar 2016 19:51:21 +0800</pubDate>
      <author>coffeerene.zhao@gmail.com (Coofee)</author>
      <guid>http://coofee.github.io/post/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>