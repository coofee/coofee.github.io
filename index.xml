<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Simple... </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://coofee.github.io/</link>
    <language>en-us</language>
    <author>Coofee</author>
    
    <updated>Thu, 13 Jul 2017 19:52:39 CST</updated>
    
    <item>
      <title>upgrade android sdk</title>
      <link>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</link>
      <pubDate>Thu, 13 Jul 2017 19:52:39 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/upgrade-android-sdk-android-support-library/</guid>
      <description>

&lt;h2 id=&#34;1-gradle-plugin-2-2-0-android-sdk-25都需要jdk-1-8&#34;&gt;1. gradle plugin 2.2.0+、android sdk 25都需要jdk 1.8。&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:2.2.0&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在执行gradle脚本时，可以在参数中指定jdk版本，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gradlew clean -Dorg.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以直接在&lt;code&gt;gradle.properties&lt;/code&gt;中指定jdk版本，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;org.gradle.java.home=/usr/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-build-tools-24-0-2以上的的aapt需要将centos-6-5的glibc升级到glibc-2-14&#34;&gt;2. build-tools/24.0.2以上的的aapt需要将centOS 6.5的GLIBC升级到GLIBC_2.14。&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[exec] /android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /android-sdk-linux/build-tools/24.0.2/aapt)
[exec] /android-sdk-linux/build-tools/24.0.2/aapt: /lib64/libc.so.6: version `GLIBC_2.14&#39; not found (required by /android-sdk-linux/build-tools/24.0.2/lib64/libc++.so)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以使用&lt;code&gt;strings /lib64/libc.so.6 | grep GLIBC&lt;/code&gt;获取GLIBC的版本。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：build-tools使用23.0.2时则不需要升级。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-targetsdkversion-support-library-upgrade&#34;&gt;3. targetSdkVersion &amp;amp; support library upgrade&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;targetSdkVersion=25时libssl.so已经被系统移除了，所以如果有使用openssl的需要做兼容。注: android 6.0已经使用&lt;code&gt;BoringSSL&lt;/code&gt;替换了&lt;code&gt;OpenSSL&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;support库升级到25.4.0时，需要使用google官方的maven仓库(&lt;a href=&#34;https://maven.google.com&#34;&gt;https://maven.google.com&lt;/a&gt;) 需要翻墙，解决方案如下:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;allprojects {
    repositories {
        maven {
            url &amp;quot;https://dl.google.com/dl/android/maven2/&amp;quot;
        }
        jcenter()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;support库升级到25.4.0时，使用&lt;code&gt;CoordinatorLayout&lt;/code&gt;控件的页面，Activity的主题必须继承&lt;code&gt;Theme.AppCompat&lt;/code&gt;，否则会直接崩溃，错误日志如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Caused by: java.lang.IllegalArgumentException: You need to use a Theme.AppCompat theme (or descendant) with the design library.
	at android.support.design.widget.ThemeUtils.checkAppCompatTheme(ThemeUtils.java:33)
	at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:206)
	at android.support.design.widget.CoordinatorLayout.&amp;lt;init&amp;gt;(CoordinatorLayout.java:200)
	at java.lang.reflect.Constructor.newInstance0(Native Method) 
	at java.lang.reflect.Constructor.newInstance(Constructor.java:430) 
	at android.view.LayoutInflater.createView(LayoutInflater.java:656) 
	at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:798) 
	at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:738) 
	at android.view.LayoutInflater.inflate(LayoutInflater.java:495) 
	at android.view.LayoutInflater.inflate(LayoutInflater.java:426) 
	at android.view.LayoutInflater.inflate(LayoutInflater.java:377) 
	at com.wuba.home.fragment.HomeFragment.initView(HomeFragment.java:273) 
	at com.wuba.home.fragment.HomeFragment.onCreateView(HomeFragment.java:260) 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;RecyclerView在&lt;strong&gt;23.2&lt;/strong&gt;版本支持&lt;code&gt;setAutoMeasureEnabled()&lt;/code&gt;，当item布局是&lt;code&gt;match_parent&lt;/code&gt;时，这个item会占满整个RecyclerView的高度/宽度，所以当从低版本升级到高版本时需要将&lt;code&gt;match_parent&lt;/code&gt;替换为精确的宽度/高度，或者使用&lt;code&gt;wrap_content&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原因如下:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The RecyclerView widget provides an advanced and flexible base for creating lists and grids as well as supporting animations. This release brings an exciting new feature to the LayoutManager API: auto-measurement! This allows a RecyclerView to size itself based on the size of its contents. This means that previously unavailable scenarios, such as using WRAP_CONTENT for a dimension of the RecyclerView, are now possible. You’ll find all built in LayoutManagers now support auto-measurement.&lt;/p&gt;

&lt;p&gt;Due to this change, make sure to double check the layout parameters of your item views: previously ignored layout parameters (such as MATCH_PARENT in the scroll direction) will now be fully respected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://android-developers.googleblog.com/2016/02/android-support-library-232.html&#34;&gt;详见: RecyclerView 23.2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果布局xml非常多，修改麻烦的话，可以考虑在&lt;code&gt;Adapter.onCreateViewHolder()&lt;/code&gt;方法中直接修改itemView的属性即可，下面是一个竖直RecyclerView的样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ViewGroup.LayoutParams layoutParams = itemView.getLayoutParams();
if (layoutParams == null) {
    layoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
    itemView.setLayoutParams(layoutParams);

} else if (layoutParams.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    layoutParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;
    itemView.setLayoutParams(layoutParams);

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-可以考虑升级multidex以及其他修改&#34;&gt;4. 可以考虑升级multidex以及其他修改&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以考虑使用Fragment时使用&lt;code&gt;commitNow()&lt;/code&gt;方法替换&lt;code&gt;executePendingTransactions()&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;multidex 升级到 &lt;code&gt;1.0.2&lt;/code&gt; (暂时拉取不下来，maven都找不到这个aar，不知道是什么情况)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Allows multidexing of instrumentation APK.
Deprecates MultiDexTestRunner (AndroidJUnitRunner should be used instead).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides better protection against some bad archive extraction management of the app.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes a bug that could lead to abandoned temporary files.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Provides faster installation when done in concurrent process.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Fixes an installation bug on API 19 and 20.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/topic/libraries/support-library/revisions.html#25-4-0&#34;&gt;see support-library-25.4.0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>android fetch add custom cookie</title>
      <link>http://coofee.github.io/post/android-fetch-add-custom-cookie/</link>
      <pubDate>Thu, 29 Jun 2017 11:14:50 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/android-fetch-add-custom-cookie/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;0x00-为react-native的网络请求添加公共cookie&#34;&gt;0x00 为React Native的网络请求添加公共Cookie&lt;/h1&gt;

&lt;p&gt;本文分析基于React Native &lt;strong&gt;0.44&lt;/strong&gt;版本分析。&lt;/p&gt;

&lt;p&gt;由于我们在使用React Native编写应用时，内部的网络请求均使用了&lt;code&gt;fetch&lt;/code&gt;函数，所以下面我们主要分析一下&lt;code&gt;fetch&lt;/code&gt;函数的整个调用流程。&lt;/p&gt;

&lt;h1 id=&#34;0x01-fetch追根溯源&#34;&gt;0x01 Fetch追根溯源&lt;/h1&gt;

&lt;p&gt;从React Native的源代码我们可以知道fetch函数最终也是由native端的&lt;code&gt;NetworkingModule.java&lt;/code&gt;（Android）或&lt;code&gt;RCTNetworking.mm&lt;/code&gt;（iOS）实现。&lt;/p&gt;

&lt;h2 id=&#34;1-其调用流程如下&#34;&gt;1. 其调用流程如下&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://coofee.github.io/android-fetch-add-custom-cookie/react-native-fetch-0.44.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-代码分析如下&#34;&gt;2. 代码分析如下&lt;/h2&gt;

&lt;h3 id=&#34;1-将fetch函数添加到全局变量&#34;&gt;1. 将fetch函数添加到全局变量&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;react-native/Libraries/Core/InitializeCore.js&lt;/code&gt;的全部变量&lt;code&gt;global&lt;/code&gt;中定义了&lt;code&gt;fetch&lt;/code&gt;函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set up XHR
// The native XMLHttpRequest in Chrome dev tools is CORS aware and won&#39;t
// let you fetch anything from the internet
defineProperty(global, &#39;XMLHttpRequest&#39;, () =&amp;gt; require(&#39;XMLHttpRequest&#39;));
defineProperty(global, &#39;FormData&#39;, () =&amp;gt; require(&#39;FormData&#39;));

defineProperty(global, &#39;fetch&#39;, () =&amp;gt; require(&#39;fetch&#39;).fetch);
defineProperty(global, &#39;Headers&#39;, () =&amp;gt; require(&#39;fetch&#39;).Headers);
defineProperty(global, &#39;Request&#39;, () =&amp;gt; require(&#39;fetch&#39;).Request);
defineProperty(global, &#39;Response&#39;, () =&amp;gt; require(&#39;fetch&#39;).Response);
defineProperty(global, &#39;WebSocket&#39;, () =&amp;gt; require(&#39;WebSocket&#39;));

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-fetch函数的具体实现&#34;&gt;2. fetch函数的具体实现&lt;/h3&gt;

&lt;p&gt;扒取&lt;code&gt;fetch&lt;/code&gt;的源代码，我们可以发现&lt;code&gt;fetch&lt;/code&gt;是由&lt;code&gt;XMLHttpRequest&lt;/code&gt;实现，并调用&lt;code&gt;XMLHttpRequest.send()&lt;/code&gt;函数发起请求。&lt;/p&gt;

&lt;p&gt;同时react native将&lt;code&gt;fetch&lt;/code&gt;的&lt;code&gt;credentials:&#39;include&#39;&lt;/code&gt;属性转变成了&lt;code&gt;XMLHttpRequest&lt;/code&gt;的&lt;code&gt;withCredentials&lt;/code&gt;属性，所以下一步，我们只需要关注&lt;code&gt;XMLHttpRequest&lt;/code&gt;中&lt;code&gt;withCredentials&lt;/code&gt;如何处理即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/fetch.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

import &#39;whatwg-fetch&#39;;

module.exports = {fetch, Headers, Request, Response};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;react-native/node_modules/whatwg-fetch/fetch.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || &#39;&#39;)
        }
        options.url = &#39;responseURL&#39; in xhr ? xhr.responseURL : options.headers.get(&#39;X-Request-URL&#39;)
        var body = &#39;response&#39; in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError(&#39;Network request failed&#39;))
      }

      xhr.ontimeout = function() {
        reject(new TypeError(&#39;Network request failed&#39;))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === &#39;include&#39;) {
        xhr.withCredentials = true
      }

      if (&#39;responseType&#39; in xhr &amp;amp;&amp;amp; support.blob) {
        xhr.responseType = &#39;blob&#39;
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === &#39;undefined&#39; ? null : request._bodyInit)
    })
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-xmlhttprequest具体实现&#34;&gt;3. XMLHttpRequest具体实现&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;XMLHttpRequest&lt;/code&gt;中将&lt;code&gt;withCredentials&lt;/code&gt;作为参数传递给&lt;code&gt;RCTNetworking.sendRequest()&lt;/code&gt;发起网络请求。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/XMLHttpRequest.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;send(data: any): void {
    if (this.readyState !== this.OPENED) {
      throw new Error(&#39;Request has not been opened&#39;);
    }
    if (this._sent) {
      throw new Error(&#39;Request has already been sent&#39;);
    }
    this._sent = true;
    const incrementalEvents = this._incrementalEvents ||
      !!this.onreadystatechange ||
      !!this.onprogress;

    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didSendNetworkData&#39;,
      (args) =&amp;gt; this.__didUploadProgress(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkResponse&#39;,
      (args) =&amp;gt; this.__didReceiveResponse(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkData&#39;,
      (args) =&amp;gt; this.__didReceiveData(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkIncrementalData&#39;,
      (args) =&amp;gt; this.__didReceiveIncrementalData(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didReceiveNetworkDataProgress&#39;,
      (args) =&amp;gt; this.__didReceiveDataProgress(...args)
    ));
    this._subscriptions.push(RCTNetworking.addListener(
      &#39;didCompleteNetworkResponse&#39;,
      (args) =&amp;gt; this.__didCompleteResponse(...args)
    ));

    let nativeResponseType = &#39;text&#39;;
    if (this._responseType === &#39;arraybuffer&#39; || this._responseType === &#39;blob&#39;) {
      nativeResponseType = &#39;base64&#39;;
    }

    invariant(this._method, &#39;Request method needs to be defined.&#39;);
    invariant(this._url, &#39;Request URL needs to be defined.&#39;);
    RCTNetworking.sendRequest(
      this._method,
      this._trackingName,
      this._url,
      this._headers,
      data,
      nativeResponseType,
      incrementalEvents,
      this.timeout,
      this.__didCreateRequest.bind(this),
      this.withCredentials
    );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来重头戏来了，&lt;code&gt;RCTNetworking&lt;/code&gt;在android和iOS两端的实现并不一致，在iOS端，发送网络请求时是包含&lt;code&gt;withCredentials&lt;/code&gt;这个参数的，但是在android端&lt;code&gt;withCredentials&lt;/code&gt;这个参数会被忽略（因为在&lt;code&gt;RCTNetworking.android.js&lt;/code&gt;中定义&lt;code&gt;sendRequest&lt;/code&gt;函数时并没有&lt;code&gt;withCredentials&lt;/code&gt;这个参数，所以即使调用放传递了这个参数，也会被忽略）。&lt;/p&gt;

&lt;p&gt;也就是说在iOS端使用fetch发送请求时，可以通过配置属性，灵活决定是否发送cookie；而在android端则会一直发送cookie
&lt;a href=&#34;https://github.com/facebook/react-native/issues/14063&#34;&gt;issue: withCredentials flag in XHRs should default to &amp;ldquo;true&amp;rdquo;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/RCTNetworking.ios.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  sendRequest(
    method: string,
    trackingName: string,
    url: string,
    headers: Object,
    data: RequestBody,
    responseType: &#39;text&#39; | &#39;base64&#39;,
    incrementalUpdates: boolean,
    timeout: number,
    callback: (requestId: number) =&amp;gt; any,
    withCredentials: boolean
  ) {
    const body = convertRequestBody(data);
    RCTNetworkingNative.sendRequest({
      method,
      url,
      data: {...body, trackingName},
      headers,
      responseType,
      incrementalUpdates,
      timeout,
      withCredentials
    }, callback);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;react-native/Libraries/Network/RCTNetworking.android.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    sendRequest(
    method: string,
    trackingName: string,
    url: string,
    headers: Object,
    data: RequestBody,
    responseType: &#39;text&#39; | &#39;base64&#39;,
    incrementalUpdates: boolean,
    timeout: number,
    callback: (requestId: number) =&amp;gt; any
  ) {
    const body = convertRequestBody(data);
    if (body &amp;amp;&amp;amp; body.formData) {
      body.formData = body.formData.map((part) =&amp;gt; ({
        ...part,
        headers: convertHeadersMapToArray(part.headers),
      }));
    }
    const requestId = generateRequestId();
    RCTNetworkingNative.sendRequest(
      method,
      url,
      requestId,
      convertHeadersMapToArray(headers),
      {...body, trackingName},
      responseType,
      incrementalUpdates,
      timeout
    );
    callback(requestId);
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-android端网络具体实现&#34;&gt;4. Android端网络具体实现&lt;/h3&gt;

&lt;p&gt;同样，我们可以看到在&lt;code&gt;com.facebook.react.modules.network.NetworkingModule.java&lt;/code&gt;中也没有&lt;code&gt;withCredentials&lt;/code&gt;相关处理，故而如果要保持android和iOS两端行为一致，则必须同时修改android+javascript两端代码才可以。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
@Override
public void initialize() {
	mCookieJarContainer.setCookieJar(new JavaNetCookieJar(mCookieHandler));
}

public void sendRequest(
  final ExecutorToken executorToken,
  String method,
  String url,
  final int requestId,
  ReadableArray headers,
  ReadableMap data,
  final String responseType,
  final boolean useIncrementalUpdates,
  int timeout) {
  
	Request.Builder requestBuilder = new Request.Builder().url(url);
	
	if (requestId != 0) {
	  requestBuilder.tag(requestId);
	}
	
	// 略...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-ios端网络具体实现&#34;&gt;5. iOS端网络具体实现&lt;/h3&gt;

&lt;p&gt;可以看到在&lt;code&gt;react-native/Libraries/Network/RCTNetworking.mm&lt;/code&gt;文件中对&lt;code&gt;withCredentials&lt;/code&gt;进行了单独处理。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (RCTURLRequestCancellationBlock)buildRequest:(NSDictionary&amp;lt;NSString *, id&amp;gt; *)query
                                 completionBlock:(void (^)(NSURLRequest *request))block
{
  RCTAssertThread(_methodQueue, @&amp;quot;buildRequest: must be called on method queue&amp;quot;);

  NSURL *URL = [RCTConvert NSURL:query[@&amp;quot;url&amp;quot;]]; // this is marked as nullable in JS, but should not be null
  NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:URL];
  request.HTTPMethod = [RCTConvert NSString:RCTNilIfNull(query[@&amp;quot;method&amp;quot;])].uppercaseString ?: @&amp;quot;GET&amp;quot;;
  request.allHTTPHeaderFields = [self stripNullsInRequestHeaders:[RCTConvert NSDictionary:query[@&amp;quot;headers&amp;quot;]]];
  request.timeoutInterval = [RCTConvert NSTimeInterval:query[@&amp;quot;timeout&amp;quot;]];
  request.HTTPShouldHandleCookies = [RCTConvert BOOL:query[@&amp;quot;withCredentials&amp;quot;]];

  // 略...
  
  }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-android端添加公共cookie&#34;&gt;0x02 Android端添加公共Cookie&lt;/h1&gt;

&lt;p&gt;从上面的分析，我们知道android端使用&lt;code&gt;NetworkingModule&lt;/code&gt;实现网络请求，同时在&lt;code&gt;NetworkingModule&lt;/code&gt;初始化的时候添加了CookieJar来处理Cookie，所以如果我们要添加Cookie，就必须从CookieJar入手。由于我们并不想修改React Native的源代码，所以可以通过在打包时修改字节码的方式来达到同样的效果，这里我们使用aspect，用自定义CookieJar替换&lt;code&gt;NetworkingModule&lt;/code&gt;原始的CookieJar达到添加公共cookie的目的.&lt;/p&gt;

&lt;p&gt;首先，&lt;code&gt;NetworkingModule&lt;/code&gt;是在&lt;code&gt;initialize()&lt;/code&gt;的时候初始化的CookieJar，所以我们将该方法作为我们的切入点，大致代码如下:&lt;/p&gt;

&lt;h2 id=&#34;1-添加aspect依赖&#34;&gt;1. 添加aspect依赖:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;dependencies {
    classpath fileTree(dir:&#39;plugins&#39;, include:[&#39;*.jar&#39;])
    //don&#39;t lost dependency
    classpath &#39;org.aspectj:aspectjtools:1.8.+&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-添加切面&#34;&gt;2. 添加切面:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
@Aspect
public class NetworkingModuleAspect {

    @Around(&amp;quot;execution (* com.facebook.react.modules.network.NetworkingModule.initialize())&amp;quot;)
    public Object injectCustomCookie(ProceedingJoinPoint joinPoint) throws Throwable {
        Object networkingModule = joinPoint.getTarget();

        CookieJarContainer cookieJarContainer = (CookieJarContainer) getFieldValue(networkingModule, &amp;quot;mCookieJarContainer&amp;quot;);
        CookieHandler cookieHandler = (CookieHandler) getFieldValue(networkingModule, &amp;quot;mCookieHandler&amp;quot;);

        cookieJarContainer.setCookieJar(new JavaNetCookieJarWithCommonHeader(cookieHandler));

        return null;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义CookieJar，在&lt;code&gt;loadForRequest()&lt;/code&gt;方法中添加公共Cookie，大致代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public static final class JavaNetCookieJarWithCommonHeader implements CookieJar {
    // 略...

    @Override
    public List&amp;lt;Cookie&amp;gt; loadForRequest(HttpUrl url) {
        // The RI passes all headers. We don&#39;t have &#39;em, so we don&#39;t pass &#39;em!
        List&amp;lt;Cookie&amp;gt; cookies = new ArrayList&amp;lt;Cookie&amp;gt;();

		  // add common cookie.
        Map&amp;lt;String, String&amp;gt; commonHeaders = CommonHeaderUtils.getInstance(null).get(url.toString());
        if (commonHeaders != null &amp;amp;&amp;amp; !commonHeaders.isEmpty()) {
            for (Map.Entry&amp;lt;String, String&amp;gt; entry : commonHeaders.entrySet()) {
                if (entry.getKey() == null) {
                    continue;
                }

                cookies.add(new Cookie.Builder()
                        .name(entry.getKey())
                        .value(entry.getValue() == null ? &amp;quot;&amp;quot; : entry.getValue())
                        .domain(url.host())
                        .build());
            }
        }

        Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; headers = Collections.emptyMap();
        Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; cookieHeaders;
        try {
            cookieHeaders = cookieHandler.get(url.uri(), headers);
        } catch (IOException e) {
            Platform.get().log(WARN, &amp;quot;Loading cookies failed for &amp;quot; + url.resolve(&amp;quot;/...&amp;quot;), e);
            return cookies;
        }

        for (Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; entry : cookieHeaders.entrySet()) {
            String key = entry.getKey();
            if ((&amp;quot;Cookie&amp;quot;.equalsIgnoreCase(key) || &amp;quot;Cookie2&amp;quot;.equalsIgnoreCase(key))
                    &amp;amp;&amp;amp; !entry.getValue().isEmpty()) {
                for (String header : entry.getValue()) {
                    if (cookies == null) cookies = new ArrayList&amp;lt;&amp;gt;();
                    cookies.addAll(decodeHeaderAsJavaNetCookies(url, header));
                }
            }
        }

        return cookies != null
                ? Collections.unmodifiableList(cookies)
                : Collections.&amp;lt;Cookie&amp;gt;emptyList();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-配置aspect插件&#34;&gt;3. 配置aspect插件:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:2.1.3&#39;
        classpath &#39;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.10&#39;

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Application项目中配置aspect插件:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;apply plugin: &#39;android-aspectjx&#39;
aspectjx {
	//includes the libs that you want to weave
    includeJarFilter &#39;自己切面所在的库&#39;, &#39;react-native&#39;
    
    //excludes the libs that you don&#39;t want to weave
	excludeJarFilter &#39;universal-image-loader&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于aspectj插件的具体配置，可以参考&lt;a href=&#34;https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx&#34;&gt;android aspectjx plugin&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native Bundle Split</title>
      <link>http://coofee.github.io/post/react-native-bundle-split/</link>
      <pubDate>Thu, 18 May 2017 19:28:52 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/react-native-bundle-split/</guid>
      <description>

&lt;p&gt;使用&lt;a href=&#34;https://github.com/react-component/rn-packager&#34;&gt;rn-packager&lt;/a&gt;拆分react-native的jsbundle(core.android.bundle + business.android.bundle)，然后在程序启动时分步加载拆分后的bundle，以达到热更新目的，&lt;strong&gt;注:本文档使用的react native版本为0.43&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;0x00-分步加载jsbundle&#34;&gt;0x00 分步加载jsbundle&lt;/h1&gt;

&lt;p&gt;将rn-packager打包生成的jsbundle+图片资源统一放到assets目录中，应用程序启动时，复制到files目录，只要保持目录结构不变，js就可以正常访问图片资源。故而，如果需要热更新jsbundle和图片资源时，只需要直接更新files目录中的图片和jsbundle文件即可，具体可以看&lt;a href=&#34;https://github.com/facebook/react-native/pull/10804&#34;&gt;packager-bundle-split&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加载core.android.bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ReactInstanceManagerBuilder builder = ReactInstanceManager.builder()
      .setApplication(mApplication)
      .setJSMainModuleName(getJSMainModuleName())
      .setUseDeveloperSupport(getUseDeveloperSupport())
      .setRedBoxHandler(getRedBoxHandler())
      .setUIImplementationProvider(getUIImplementationProvider())
      .setInitialLifecycleState(LifecycleState.BEFORE_CREATE);

    for (ReactPackage reactPackage : getPackages()) {
      builder.addPackage(reactPackage);
    }

    String jsBundleFile = getJSBundleFile();
    if (jsBundleFile != null) {
      builder.setJSBundleFile(jsBundleFile);
    } else {
      builder.setBundleAssetName(Assertions.assertNotNull(getBundleAssetName()));
    }

    File coreBundleFile = new File(mApplication.getFilesDir(), &amp;quot;rn/core.android.bundle&amp;quot;);
    if (!coreBundleFile.exists()) {
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;copy assets://core.android.bundle to &amp;quot; + coreBundleFile);
      AssetsUtils.copyFile(mApplication, &amp;quot;core.android.bundle&amp;quot;, coreBundleFile.getAbsolutePath());
    }
    // 加载core.android.bundle
    builder.setJSBundleLoader(JSBundleLoader.createFileLoader(coreBundleFile.getAbsolutePath()));
    Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;set core bundle&amp;quot;);
    return builder.build();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;加载business.android.bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public void loadBussinessBundle(final File bundleFile) {
    if (mMethod_LoadScriptFile == null) {
      try {
        mMethod_LoadScriptFile = com.facebook.react.cxxbridge.CatalystInstanceImpl.class.getDeclaredMethod(&amp;quot;loadScriptFromFile&amp;quot;, new Class[]{String.class, String.class});
        mMethod_LoadScriptFile.setAccessible(true);
      } catch (NoSuchMethodException e) {
        Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;cannot found method: CatalystInstanceImpl.loadScriptFromFile(String, String)&amp;quot;, e);
        return;
      }
    }

    CatalystInstance catalystInstance = mReactContext.getCatalystInstance();
    String businessBundlePath = bundleFile.getAbsolutePath();
    Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot;...&amp;quot;);
    try {
      mMethod_LoadScriptFile.invoke(catalystInstance, businessBundlePath, businessBundlePath);
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot; done.&amp;quot;);
    } catch (Throwable e) {
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;loadBussinessBundle &amp;quot; + businessBundlePath + &amp;quot; error.&amp;quot;);
      Log.e(&amp;quot;ReactNativeHost&amp;quot;, &amp;quot;error invoke method: CatalystInstanceImpl.loadScriptFromFile(String, String)&amp;quot;, e);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;热更新jsbundle/图片
假设从assets复制到files目录后，rn目录结构如下:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;files
|--rn
  |--core.android.bundle
  |--business.android.bundle
  |--drawable-mdpi/image_liking.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时使用&lt;code&gt;require&lt;/code&gt;的方式加载图片，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Image source={require(&#39;./image/liking.png&#39;)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要热更新business.android.bundle或者image_liking.png，直接从服务器下载然后替换files/rn目录对应的资源，然后&lt;code&gt;recreateReactContextInBackground()&lt;/code&gt;重新加载即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coofee/TestBundleSplit&#34;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;0x01-如何运行&#34;&gt;0x01 如何运行?&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. clone代码
git clone https://github.com/coofee/TestBundleSplit

# 2. 安装rn-packager依赖
cd rn-packager
npm install

# 3. 安装tests例子依赖
cd tests
npm install

# 4. 生成core.android.bundle and core.android.manifest.json
node ../bin/rnpackager bundle --entry-file node_modules/react-native/Libraries/react-native/react-native.js --bundle-output assets/core.android.bundle --platform android --dev false --assets-dest assets --manifest-output assets/core.android.manifest.json

# 5. 使用core.android.manifest.json生成app.bundle
node ../bin/rnpackager bundle --entry-file index.js --bundle-output assets/HelloWorldApp.android.bundle --platform android --dev false --assets-dest assets --manifest-file assets/core.android.manifest.json 

# 6. 复制core.android.bundle和HelloWorldApp.android.bundle到app/src/assets.
cp assets/core.android.bundle ../../android/app/src/main/assets/core.android.bundle

cp assets/HelloWorldApp.android.bundle ../../android/app/src/main/assets/HelloWorldApp.android.bundle

# 7. 安装android app
cd ../../android
# mac/linux执行安装app.
./gradlew :app:installDebug
# windows执行安装app.
./gradlew.bat :app:installDebug

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;0x02-libraries&#34;&gt;0x02 Libraries&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/react-component/rn-packager&#34;&gt;rn-packager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react-native/Examples/UIExplorer&#34;&gt;UIExplorer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>http://coofee.github.io/post/tools/</link>
      <pubDate>Fri, 30 Sep 2016 17:11:19 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/tools/</guid>
      <description>

&lt;h1 id=&#34;1-golang跨平台编译&#34;&gt;1. golang跨平台编译&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 如：
env GOOS=linux GOARCH=amd64 go build  *.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-ssh&#34;&gt;2. ssh&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -p port username@host
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-scp&#34;&gt;3. scp&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp -P port local_file  username@host:remote_file

scp -P port -r local_dir  username@host:remote_dir
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-git&#34;&gt;4. git&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>android jni bspatch</title>
      <link>http://coofee.github.io/post/jni-bspatch/</link>
      <pubDate>Sat, 17 Sep 2016 22:01:24 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/jni-bspatch/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&#34;1-下载并配置ndk&#34;&gt;1. 下载并配置NDK:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/ndk/downloads/index.html&#34;&gt;https://developer.android.com/ndk/downloads/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-编译bsdiff&#34;&gt;2. 编译Bsdiff&lt;/h2&gt;

&lt;h3 id=&#34;2-1-编写java类-创建native方法&#34;&gt;2.1 编写java类，创建native方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.commons.utils;
	
public class Bspatch {
	
    static {
        System.loadLibrary(&amp;quot;bspatch&amp;quot;);
    }
	
    public static native int applyPatch(String oldFile, String newFile, String patchFile);
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-生成-h文件&#34;&gt;2.2 生成.h文件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用&lt;strong&gt;javac&lt;/strong&gt;编写Bspatch或者在ide里面编译，这里我在android studio中编写并执行gradle的&lt;strong&gt;compileDebugJavaWithJavac&lt;/strong&gt;任务进行编译，编译完成后，切换到classes目录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用javah生成.h文件&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;// 切换到编译好的类目录
cd app/build/intermediates/classes
// 生成.h文件
javah -d h -classpath debug com.commons.utils.Bspatch
	
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-编译c-c-代码&#34;&gt;2.3 编译c/c++代码.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;复制生成的.h文件到c/c++文件目录.&lt;/li&gt;
&lt;li&gt;在存放c/c++代码的目录中添加Android.mk、Application.mk文件。
其中Android.mk用于指定要编译的类，模块名称等；
Application.mk用于指定要生成特定abi类型的so文件，如：x86，armeabi等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目录结构如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;app

&lt;ul&gt;
&lt;li&gt;build&lt;/li&gt;
&lt;li&gt;jni

&lt;ul&gt;
&lt;li&gt;bspatch&lt;/li&gt;
&lt;li&gt;bzip2&lt;/li&gt;
&lt;li&gt;Android.mk&lt;/li&gt;
&lt;li&gt;Application.mk&lt;/li&gt;
&lt;li&gt;com_commons_utils_Bspatch.c&lt;/li&gt;
&lt;li&gt;com_commons_utils_Bspatch.h&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;libs&lt;/li&gt;
&lt;li&gt;src&lt;/li&gt;
&lt;li&gt;build.gradle&lt;/li&gt;
&lt;li&gt;proguard-rules.pro
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Android.mk内容如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;LOCAL_PATH := $(call my-dir)
	
include $(CLEAR_VARS)
	
# 指定模块名称
LOCAL_MODULE    := bspatch
# 添加源码
LOCAL_SRC_FILES := com_commons_utils_BsPatch.c
	
# for logging
LOCAL_LDLIBS    := -lz -llog
	
include $(BUILD_SHARED_LIBRARY)
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Application.mk&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#表示生成全部abi的so
APP_ABI := all
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;切换到jni目录，手动编译native代码。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd app/jni
$ ndk-build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-修改bspatch代码&#34;&gt;3. 修改bspatch代码&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;为了调用简单，这里直接修改了bspatch的main函数为patch函数，然后在jni函数中直接调用patch函数进行合并。
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;	
#include &amp;lt;android/log.h&amp;gt;
	
#include &amp;quot;bspatch/bspatch.c&amp;quot;
	
#include &amp;quot;com_commons_utils_Bspatch.h&amp;quot;
	
	
	
/*
 * Class:     com_commons_utils_Bspatch
 * Method:    applyPatch
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_commons_utils_Bspatch_applyPatch
        (JNIEnv *env, jobject obj, jstring oldFile, jstring newFile, jstring patchFile) {
	
    int ret;
    char *ch[4];
    ch[0] = &amp;quot;bspatch&amp;quot;;
    ch[1] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, oldFile, 0));
    ch[2] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, newFile, 0));
    ch[3] = (char *) ((*env)-&amp;gt;GetStringUTFChars(env, patchFile, 0));
	
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;oldFile = %s &amp;quot;, ch[1]);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;newFile = %s &amp;quot;, ch[2]);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;patchFile = %s &amp;quot;, ch[3]);
	
    ret = patch(4, ch);
    __android_log_print(ANDROID_LOG_INFO, &amp;quot;bspatch&amp;quot;, &amp;quot;applypatch result = %d &amp;quot;, ret);
	
    (*env)-&amp;gt;ReleaseStringUTFChars(env, oldFile, ch[1]);
    (*env)-&amp;gt;ReleaseStringUTFChars(env, newFile, ch[2]);
    (*env)-&amp;gt;ReleaseStringUTFChars(env, patchFile, ch[3]);
    return ret;
}
	
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;另由于在bspatch的代码中使用了err、errx函数，会导致出错时直接退出进程。为了在app中调用bspatch时不出现这种情况，所以使用自定义的err、errx函数替换系统err、errx函数，同时以返回值确定是否合并成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdarg.h&amp;gt;
// #include &amp;lt;err.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;android/log.h&amp;gt;
#include &amp;lt;jni.h&amp;gt;
    
#include &amp;quot;../bzip2/bzlib.c&amp;quot;
#include &amp;quot;../bzip2/crctable.c&amp;quot;
#include &amp;quot;../bzip2/compress.c&amp;quot;
#include &amp;quot;../bzip2/decompress.c&amp;quot;
#include &amp;quot;../bzip2/randtable.c&amp;quot;
#include &amp;quot;../bzip2/blocksort.c&amp;quot;
#include &amp;quot;../bzip2/huffman.c&amp;quot;
    
#include &amp;lt;android/log.h&amp;gt;
    
// #define vprintf(...) __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, __VA_ARGS__);
    
static int err(int retVal, char* fmt, ...) {
    va_list arglist;
    va_start(arglist, fmt);
    // vprintf(fmt, arglist);
    __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, fmt, arglist);
    va_end(arglist);
    return retVal;
}
    
static int errx(int retVal, char* fmt, ...) {
    va_list arglist;
    va_start(arglist, fmt);
    // vprintf(fmt, arglist);
    __android_log_print(ANDROID_LOG_DEBUG, &amp;quot;bspatch&amp;quot;, fmt, arglist);
    va_end(arglist);
    return retVal;
}
    
static void cleanup(FILE* f, FILE*  cpf, FILE*  dpf, FILE*  epf, 
    BZFILE* cpfbz2, BZFILE* dpfbz2, BZFILE* epfbz2, 
    u_char* old, u_char* new) {
    
    // close file and then free;
    if (f != NULL) {
        fclose(f);
        free(f);
    }
    
    if (cpf != NULL) {
        fclose(cpf);
        free(cpf);
    }
    
    if (dpf != NULL) {
        fclose(dpf);
        free(dpf);
    }
    
    if (epf != NULL) {
        fclose(epf);
        free(epf);
    }
    
    if (cpfbz2 != NULL) {
        BZ2_bzReadClose(NULL, cpfbz2);
    }
    
    if (dpfbz2 != NULL) {
        BZ2_bzReadClose(NULL, dpfbz2);
    }
    
    if (epfbz2 != NULL) {
        BZ2_bzReadClose(NULL, epfbz2);
    }
    
    if (old != NULL) {
        free(old);
    }
    
    if (new != NULL) {
        free(new);
    }
}
    
static off_t offtin(u_char *buf) {
    off_t y;
    
    y = buf[7] &amp;amp; 0x7F;
    y = y * 256;
    y += buf[6];
    y = y * 256;
    y += buf[5];
    y = y * 256;
    y += buf[4];
    y = y * 256;
    y += buf[3];
    y = y * 256;
    y += buf[2];
    y = y * 256;
    y += buf[1];
    y = y * 256;
    y += buf[0];
    
    if (buf[7] &amp;amp; 0x80)
        y = -y;
    
    return y;
}
    
static int patch(int argc, char *argv[]) {
    FILE *f, *cpf, *dpf, *epf;
    BZFILE *cpfbz2, *dpfbz2, *epfbz2;
    int cbz2err, dbz2err, ebz2err;
    int fd;
    ssize_t oldsize, newsize;
    ssize_t bzctrllen, bzdatalen;
    u_char header[32], buf[8];
    u_char *old, *new;
    off_t oldpos, newpos;
    off_t ctrl[3];
    off_t lenread;
    off_t i;
    
    if (argc != 4) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;usage: %s oldfile newfile patchfile\n&amp;quot;, argv[0]);
    }
    
    /* Open patch file */
    if ((f = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
        
    
    /*
     File format:
     0  8   &amp;quot;BSDIFF40&amp;quot;
     8  8   X
     16 8   Y
     24 8   sizeof(newfile)
     32 X   bzip2(control block)
     32+X   Y   bzip2(diff block)
     32+X+Y ??? bzip2(extra block)
     with control block a set of triples (x,y,z) meaning &amp;quot;add x bytes
     from oldfile to x bytes from the diff block; copy y bytes from the
     extra block; seek forwards in oldfile by z bytes&amp;quot;.
     */
    
    /* Read header */
    if (fread(header, 1, 32, f) &amp;lt; 32) {
        if (feof(f)) {
            errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fread(%s)&amp;quot;, argv[3]);
    }
    
    /* Check for appropriate magic */
    if (memcmp(header, &amp;quot;BSDIFF40&amp;quot;, 8) != 0) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
    }
    
    /* Read lengths from header */
    bzctrllen = offtin(header + 8);
    bzdatalen = offtin(header + 16);
    newsize = offtin(header + 24);
    if ((bzctrllen &amp;lt; 0) || (bzdatalen &amp;lt; 0) || (newsize &amp;lt; 0)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
    }
    
    /* Close patch file and re-open it via libbzip2 at the right places */
    if (fclose(f)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fclose(%s)&amp;quot;, argv[3]);
    }
        
    if ((cpf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    
    if (fseeko(cpf, 32, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3], (long long) 32);
    }
    
    if ((cpfbz2 = BZ2_bzReadOpen(&amp;amp;cbz2err, cpf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, cbz2err);
    }
    
    if ((dpf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    if (fseeko(dpf, 32 + bzctrllen, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3], (long long) (32 + bzctrllen));
    }
    if ((dpfbz2 = BZ2_bzReadOpen(&amp;amp;dbz2err, dpf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, dbz2err);
    }
    if ((epf = fopen(argv[3], &amp;quot;r&amp;quot;)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fopen(%s)&amp;quot;, argv[3]);
    }
    if (fseeko(epf, 32 + bzctrllen + bzdatalen, SEEK_SET)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fseeko(%s, %lld)&amp;quot;, argv[3],
            (long long) (32 + bzctrllen + bzdatalen));
    }
    if ((epfbz2 = BZ2_bzReadOpen(&amp;amp;ebz2err, epf, 0, 0, NULL, 0)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return errx(1, &amp;quot;BZ2_bzReadOpen, bz2err = %d&amp;quot;, ebz2err);
    }
    
    if (((fd = open(argv[1], O_RDONLY, 0)) &amp;lt; 0)
        || ((oldsize = lseek(fd, 0, SEEK_END)) == -1)
        || ((old = malloc(oldsize + 1)) == NULL)
        || (lseek(fd, 0, SEEK_SET) != 0)
        || (read(fd, old, oldsize) != oldsize) || (close(fd) == -1)) {
        
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;%s&amp;quot;, argv[1]);
    }
        
    if ((new = malloc(newsize + 1)) == NULL) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, NULL);
    }
    
    oldpos = 0;
    newpos = 0;
    while (newpos &amp;lt; newsize) {
        /* Read control data */
        for (i = 0; i &amp;lt;= 2; i++) {
            lenread = BZ2_bzRead(&amp;amp;cbz2err, cpfbz2, buf, 8);
            if ((lenread &amp;lt; 8)
                || ((cbz2err != BZ_OK) &amp;amp;&amp;amp; (cbz2err != BZ_STREAM_END))) {
                    cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
                    return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
                }
            ctrl[i] = offtin(buf);
        };
    
        /* Sanity-check */
        if (newpos + ctrl[0] &amp;gt; newsize) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Read diff string */
        lenread = BZ2_bzRead(&amp;amp;dbz2err, dpfbz2, new + newpos, ctrl[0]);
        if ((lenread &amp;lt; ctrl[0])
            || ((dbz2err != BZ_OK) &amp;amp;&amp;amp; (dbz2err != BZ_STREAM_END))) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Add old data to diff string */
        for (i = 0; i &amp;lt; ctrl[0]; i++)
            if ((oldpos + i &amp;gt;= 0) &amp;amp;&amp;amp; (oldpos + i &amp;lt; oldsize))
                new[newpos + i] += old[oldpos + i];
    
        /* Adjust pointers */
        newpos += ctrl[0];
        oldpos += ctrl[0];
    
        /* Sanity-check */
        if (newpos + ctrl[1] &amp;gt; newsize) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Read extra string */
        lenread = BZ2_bzRead(&amp;amp;ebz2err, epfbz2, new + newpos, ctrl[1]);
        if ((lenread &amp;lt; ctrl[1])
            || ((ebz2err != BZ_OK) &amp;amp;&amp;amp; (ebz2err != BZ_STREAM_END))) {
            cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
            return errx(1, &amp;quot;Corrupt patch\n&amp;quot;);
        }
    
        /* Adjust pointers */
        newpos += ctrl[1];
        oldpos += ctrl[2];
    };
    
    /* Clean up the bzip2 reads */
    BZ2_bzReadClose(&amp;amp;cbz2err, cpfbz2);
    BZ2_bzReadClose(&amp;amp;dbz2err, dpfbz2);
    BZ2_bzReadClose(&amp;amp;ebz2err, epfbz2);
    if (fclose(cpf) || fclose(dpf) || fclose(epf)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;fclose(%s)&amp;quot;, argv[3]);
    }
    
    /* Write the new file */
    if (((fd = open(argv[2], O_CREAT | O_TRUNC | O_WRONLY, 0666)) &amp;lt; 0)
        || (write(fd, new, newsize) != newsize) || (close(fd) == -1)) {
        cleanup(f, cpf, dpf, epf, cpfbz2, dpfbz2, epfbz2, old, new);
        return err(1, &amp;quot;%s&amp;quot;, argv[2]);
    }
    
    free(new);
    free(old);
    
    return 0;
}
    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Gradle插件升级填坑指南</title>
      <link>http://coofee.github.io/post/android-gradle-plugin-compat/</link>
      <pubDate>Thu, 01 Sep 2016 19:27:06 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/android-gradle-plugin-compat/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;Android Gradle插件升级填坑指南&lt;/p&gt;

&lt;h2 id=&#34;1-引子&#34;&gt;1. 引子&lt;/h2&gt;

&lt;p&gt;自打android开发环境从eclipse迁移到android studio之后，android项目的打包就从ant迁移到了gradle。自此只要是在打包过程中需要干扰代码生成或执行其他特殊处理，都需要通过gradle脚本完成，具体来说就是通过在打包过程中插入task或者给现用task添加hook。
对于我们的项目而言，在插件化和热修复技术，为了降低打包成本，我们编写了自己的gradle插件，用于支持app的插件化和热修复打包。&lt;/p&gt;

&lt;h2 id=&#34;2-由instant-run引发的血案&#34;&gt;2. 由instant-run引发的血案&lt;/h2&gt;

&lt;p&gt;时间来到了16年，随着Instant-Run功能的逐渐完善，我们也升级android studio和gradle来体验强大的Instant-Run，刚一运行就崩溃了。。。&lt;/p&gt;

&lt;!--![](http://d.ifengimg.com/mw604/y0.ifengimg.com/ifengimcp/pic/20160418/5628dd6ecd9fa100f371_size30_w521_h534.jpg)
--&gt;

&lt;p&gt;查看一下报错日志，发现&lt;code&gt;proguardDebug&lt;/code&gt;任务找不到；瞅了一下打包产生的临时目录，发现&lt;strong&gt;intermediates/classes-proguard&lt;/strong&gt;目录也找不到了，并且还多出来了&lt;strong&gt;intermediates/transforms&lt;/strong&gt;这个奇怪的目录，赶紧google一下，发现google在gradle插件高版本中引入了&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/transform-api&#34;&gt;transform-api&lt;/a&gt;（主要是给大家提供了一个操作代码的接口，比如可以注入代码什么的），并且在高版本的gradle插件中使用&lt;code&gt;transformClassesAndResourcesWithProguardForDebug&lt;/code&gt;任务替换了低版本的&lt;code&gt;proguardDebug&lt;/code&gt;任务。&lt;/p&gt;

&lt;h2 id=&#34;3-兼容transform-api&#34;&gt;3. 兼容Transform Api&lt;/h2&gt;

&lt;p&gt;知道了问题所在，那就让我们撸起袖子干起来吧，将原本需要在&lt;code&gt;proguardDebug&lt;/code&gt;之后执行的代码迁移到&lt;code&gt;transformClassesAndResourcesWithProguardForDebug&lt;/code&gt;之后，并稍作改动就可以了。大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString()

gradle.taskGraph.afterTask { Task task, TaskState state -&amp;gt;
    if (state.failure != null) {
        println &amp;quot;${task} error: ${state.failure}&amp;quot;
        state.failure.printStackTrace()
        state.rethrowFailure();
        return;
    }
    
    if (task.name.equals(proguardTaskName)) {
    	// 执行自己的代码，将先前的代码迁移至此，并稍作改动即可。
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-兼容不同版本&#34;&gt;4. 兼容不同版本&lt;/h2&gt;

&lt;p&gt;这里我们为了兼容各个版本的gradle插件，那么就出现了一个新问题如何区分某个gradle插件版本是否支持transform api？&lt;/p&gt;

&lt;p&gt;查看官网，发现上面有这么一句话
&amp;gt; (The API existed in 1.4.0-beta2 but it&amp;rsquo;s been completely revamped in 1.5.0-beta1)&lt;/p&gt;

&lt;p&gt;也就是说，这个api在1.4.0-beta2的时候就已经存在了，但是直到1.5.0-beta1版本的时候才改造完成。这么来看的话，通过版本来判断比较复杂，并且不一定靠谱，那么如何能够既简单又靠谱的判断呢？&lt;/p&gt;

&lt;p&gt;答案很简单，直接判断project是否拥有transform的task即可，大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;boolean isSupportTransformApi(Project project, def variant) {
	def supportTransformApi = false;
	def flavor = variant.flavorName == null ? &amp;quot;&amp;quot; : variant.flavorName;
	def buildType = variant.buildType.name == null ? &amp;quot;&amp;quot; : variant.buildType.name;
	def proguardTaskName = &amp;quot;transformClassesAndResourcesWithProguardFor${variant flavor.capitalize()}${buildType.capitalize()}&amp;quot;.toString()
	project.tasks.each {
	    if (it.name.equals(proguardTaskName)) {
	        supportTransformApi = true;
	    }
	}

	return supportTransformApi;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搞完这个兼容，再次运行项目，就可以成功编译并安装apk了，点击运行，直接崩溃了！！！查看日志发现是资源找不到，并且资源id的值也是错误的，这么来看的话，那就是public.xml和ids.xml没有生效造成的。&lt;/p&gt;

&lt;h2 id=&#34;5-解决public-xml-ids-xml不生效问题&#34;&gt;5. 解决public.xml、ids.xml不生效问题&lt;/h2&gt;

&lt;p&gt;原来在gradle插件的高版本中打包时会忽略&lt;strong&gt;res/values/&lt;/strong&gt;目录中定义的public.xml、ids.xml文件；对比一下老版本gradle插件打包生成的临时文件，我们发现其在打包时将public.xml、ids.xml复制到了&lt;strong&gt;intermediates/res/merged/${flavor}/${buildType}&lt;/strong&gt;这个目录*(该目录是打包编译资源时生成的临时目录)*。那么我们自己手动复制这些文件到&lt;strong&gt;intermediates/res/merged/${flavor}/${buildType}&lt;/strong&gt;目录中，是不是就可以让高版本的gradle插件支持public.xml、ids.xml了呢？&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// 获取task名称
def mergeResourcesName = &amp;quot;merge${flavor.capitalize()}${buildType.capitalize()}Resources&amp;quot;.toString();
def mergeResourceTask = project.tasks.getByName(mergeResourcesName)
mergeResourceTask.doLast {
	// 复制public.xml
	project.copy {
		int i = 0;
		from(project.android.sourceSets.main.res.srcDirs) {
		    include &#39;values/public.xml&#39;
		    rename &#39;public.xml&#39;, (i++ == 0 ? &amp;quot;public.xml&amp;quot; : &amp;quot;public_${i}.xml&amp;quot;)
		}
		
		into(task.outputDir)
	}

	// 复制ids.xml
	project.copy {
		int i = 0;
		from(project.android.sourceSets.main.res.srcDirs) {
			include &#39;values/ids.xml&#39;
			rename &#39;ids.xml&#39;, (i++ == 0 ? &amp;quot;ids.xml&amp;quot; : &amp;quot;ids_${i}.xml&amp;quot;)
		}
		
		into(task.outputDir)
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加如上代码之后，重新编译工程，在合并资源时出现了资源重复定义错误，由此可以得出是复制public.xml和ids.xml到打包产生的临时目录导致的。&lt;/p&gt;

&lt;h2 id=&#34;6-解决public-xml与values-xml中的资源重复定义&#34;&gt;6. 解决public.xml与values.xml中的资源重复定义&lt;/h2&gt;

&lt;p&gt;从错误信息上面可以知道，是因为public.xml和values.xml出现了相同的元素导致；所以简单粗暴的将public.xml和values.xml中相同的元素剔除是不是就能够解决这个问题了呢？&lt;/p&gt;

&lt;p&gt;我们在mergeResourceTask.doLast{}复制完public.xml和ids.xml后，解析并对比public.xml和values.xml文件，然后剔除values.xml中与public.xml中相同的元素，大致代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def valuesDir = new File(task.outputDir, &#39;values&#39;);
def publicResSet = [];

// 获取public.xml中的元素
valuesDir.eachFile { f -&amp;gt;
    if (f.name.startsWith(&#39;public&#39;) &amp;amp;&amp;amp; f.name.endsWith(&#39;.xml&#39;)) {
        def publicNode = new XmlParser().parse(f);
        publicNode.each { node -&amp;gt;
            def name = node.attribute(&#39;name&#39;).toString();
            def type = node.attribute(&#39;type&#39;).toString()
            publicResSet.add(new PublicXmlRes(name, type));
        }
    }
}

// 剔除values.xml中与public.xml相同的元素。
def valuesXmlFile = new File(task.outputDir, &#39;values/values.xml&#39;);
def valuesNode = new XmlParser().parse(valuesXmlFile);
def noIdNode = new Node(null, &#39;resources&#39;);
valuesNode.each {
    if (&#39;item&#39;.equals(it.name())) {
        def name = it.attribute(&#39;name&#39;).toString();
        def type = it.attribute(&#39;type&#39;).toString();
        def publicRes = new PublicXmlRes(name, type);
        if (publicResSet.contains(publicRes)) {
            println &amp;quot;skip public res: ${publicRes}&amp;quot;
            return;
        } else {
            println &amp;quot;not skip public res: ${publicRes}&amp;quot;
        }
    }

    noIdNode.append(it);
}

// 使用剔除相同元素的values.xml覆盖原来的values.xml文件;
def out = new PrintWriter(new FileWriter(valuesXmlFile));
out &amp;lt;&amp;lt; &#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;\n&#39;;
XmlNodePrinter xmlNodePrinter = new XmlNodePrinter(out);
xmlNodePrinter.with {
    preserveWhitespace = true;
    expandEmptyElements = false;
}
xmlNodePrinter.print(noIdNode)
out.flush()
IOGroovyMethods.closeWithWarning(out)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，整个项目就可以用Instant-Run跑起来了。。。&lt;/p&gt;

&lt;h2 id=&#34;7-兼容multidex&#34;&gt;7. 兼容Multidex&lt;/h2&gt;

&lt;h3 id=&#34;7-1-transform-api之前&#34;&gt;7.1 Transform Api之前&lt;/h3&gt;

&lt;p&gt;在Transform Api出现之前，大家拆分dex时，一般都是获取dex任务，然后给dex添加参数，来实现干扰multidex，具体代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;project.tasks.matching {
    it.name.startsWith(&#39;dex&#39;)
}.each { dx -&amp;gt;
    if (dx.additionalParameters == null) {
        dx.additionalParameters = []
    }
    dx.additionalParameters += &#39;--multi-dex&#39;;
    // dx.additionalParameters += &#39;--minimal-main-dex&#39;;
    dx.additionalParameters += &#39;--set-max-idx-number=55000&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在生成manifest_keep.txt文件后，修改manifest_keep.txt文件，来达到拆分multidex，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def multidexTaskNames = [];

afterEvaluate {
    android.applicationVariants.all { variant -&amp;gt;
        def flavorName = variant.flavorName == null ? &amp;quot;&amp;quot; : variant.flavorName;
        def buildType = variant.buildType.name == null ? &amp;quot;&amp;quot; : variant.buildType.name;
        def multidexTaskName = &amp;quot;collect${flavorName.capitalize()}${buildType.capitalize()}MultiDexComponents&amp;quot;.toString();
        multidexTaskNames.add(multidexTaskName);
    }
}

gradle.taskGraph.beforeTask { Task multiDexTask -&amp;gt;
    if (!multidexTaskNames.contains(multiDexTask.name)) {
        return;
    }

    println &amp;quot;multidexTaskName=${multiDexTask.name}; multiDexTask.outputFile=${multiDexTask.outputFile}&amp;quot;
    multiDexTask.doLast {
		File manifestKeepFile = multiDexTask.outputFile;
		// 修改manifestKeepFile文件，将不需要的类从该文件中删除；
		// 来达到mutidex分包的目的.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-transform-api之后&#34;&gt;7.2 Transform Api之后&lt;/h3&gt;

&lt;p&gt;当有了Transform Api之后，给dex任务添加dx.additionalParameters参数就无效了，但是*collect MultiDexComponents*仍然有效，所以只需要找到如何添加dx参数就好。分析gradle插件可以发现，在Transform Api中使用DexTransform来将jar转换为dex，并且在DexTransform最终由AndroidBuilder调用dx生成dex文件。&lt;/p&gt;

&lt;p&gt;其中DexTransform在*transform*方法中调用androidBuilder的*convertByteCode*方法，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
public void transform(TransformInvocation transformInvocation) throws TransformException, IOException, InterruptedException {
	// 忽略....
 	this.androidBuilder.convertByteCode(outputs2, outputDir3, this.multiDex, this.mainDexListFile, this.dexOptions, (List)null, false, true, outputHandler1);
 	// 忽略....
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过查看AndroidBuilder的*convertByteCode*方法签名如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;void convertByteCode(Collection&amp;lt;File&amp;gt; inputs, File outDexFolder, boolean multidex, File mainDexList, DexOptions dexOptions, List&amp;lt;String&amp;gt; additionalParameters, boolean incremental, boolean optimize, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对比以上两个代码片段，我们发现在*transform*方法中调用*convertByteCode*方法，直接将&lt;strong&gt;additionalParameters&lt;/strong&gt;参数传入了null，所以只需要在调用*convertByteCode*方法时，传入自己的&lt;strong&gt;additionalParameters&lt;/strong&gt;，就可以实现和以前一样的功能，那么如何实现呢？&lt;/p&gt;

&lt;p&gt;我们的解决方案是，在执行DexTransform前替换DexTransform的&lt;strong&gt;androidBuilder&lt;/strong&gt;字段，然后在调用*convertByteCode*方法前，添加dx参数，大概代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;
// 找到DexTransform
project.tasks.matching {
    it instanceof TransformTask
}.each { TransformTask transformTask -&amp;gt;
    Transform transform = transformTask.transform;
    if (transform.name.equals(&#39;dex&#39;)) {
        DexTransform dexTransform = (DexTransform) transform;
        if (dexTransform.multiDex) {
            // wrapper androidBuilder and add dex paramters.
            replaceFieldAndroidBuilder(dexTransform);
        }
    }
}

// 替换androidBuilder字段。
private
static void replaceFieldAndroidBuilder(DexTransform dexTransform) {
    def fieldAndroidBuilder = DexTransform.class.getDeclaredField(&#39;androidBuilder&#39;);
    fieldAndroidBuilder.setAccessible(true);

    AndroidBuilder androidBuilder = dexTransform.androidBuilder;
    fieldAndroidBuilder.set(dexTransform, AndroidBuilderWrapper.wrapperAndroidBuilder(androidBuilder));
}

// 自定义androidBuidler.
private static class AndroidBuilderWrapper extends AndroidBuilder {

    public
    static AndroidBuilder wrapperAndroidBuilder(AndroidBuilder androidBuilder) {
        return new AndroidBuilderWrapper(androidBuilder);
    }

    AndroidBuilderWrapper(AndroidBuilder androidBuilder) {
        super(androidBuilder.mProjectId, androidBuilder.mCreatedBy, androidBuilder.getProcessExecutor(), androidBuilder.mJavaProcessExecutor, androidBuilder.getErrorReporter(), androidBuilder.getLogger(), androidBuilder.mVerboseExec);
        setTargetInfo(androidBuilder.sdkInfo, androidBuilder.targetInfo, androidBuilder.mLibraryRequests);
    }

    @Override
    void convertByteCode(Collection&amp;lt;File&amp;gt; inputs, File outDexFolder, boolean multidex, File mainDexList, DexOptions dexOptions, List&amp;lt;String&amp;gt; additionalParameters, boolean incremental, boolean optimize, ProcessOutputHandler processOutputHandler) throws IOException, InterruptedException, ProcessException {
        println &amp;quot;AndroidBuilderWrapper invoke convertByteCode&amp;quot;;
        // 添加dx参数.
        if (additionalParameters == null) {
            additionalParameters = new ArrayList&amp;lt;String&amp;gt;();
        }
        dx.additionalParameters += &#39;--multi-dex&#39;;
    	// dx.additionalParameters += &#39;--minimal-main-dex&#39;;
    	dx.additionalParameters += &#39;--set-max-idx-number=55000&#39;;        
        println &amp;quot;AndroidBuilderWrapper invoke convertByteCode, additionalParameters=${additionalParameters}&amp;quot;;
        super.convertByteCode(inputs, outDexFolder, multidex, mainDexList, dexOptions, additionalParameters, incremental, optimize, processOutputHandler)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-参考&#34;&gt;8. 参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/user-guide&#34;&gt;New Build System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/transform-api&#34;&gt;Transform Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ceabie/AndroidPublicXmlCompat/blob/master/app/public-xml.gradle&#34;&gt;AndroidPublicXmlCompat&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>hugo help</title>
      <link>http://coofee.github.io/post/hugo-help/</link>
      <pubDate>Mon, 11 Jul 2016 23:07:37 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/hugo-help/</guid>
      <description>

&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;

&lt;h2 id=&#34;1-1-创建文件&#34;&gt;1.1 创建文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
# 切换到博客目录
$ hugo new post/xxxxx.md

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-发布到本地预览网站&#34;&gt;1.2 发布到本地预览网站&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo server --theme=greyshade --buildDrafts --watch

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-3-发布网站到github&#34;&gt;1.3 发布网站到github&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ hugo  --theme=greyshade --buildDrafts
$ cd public
$ git add * 
$ git commit -a -m &#39;add all&#39;
$ git push origin master

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-4-添加图片到文件&#34;&gt;1.4 添加图片到文件&lt;/h2&gt;

&lt;p&gt;The images should be put in the static folder, which will be copied to the root of the website (so their url is www.example.com/image.png) by Hugo.&lt;/p&gt;

&lt;p&gt;所以在static目录中创建文件夹，然后在markdown中直接引用即可。&lt;/p&gt;

&lt;p&gt;例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static
└── android-fetch-add-custom-cookie
    └── react-native-fetch-0.44.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在markdown中则需要如下方式引用:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![](android-fetch-add-custom-cookie/react-native-fetch-0.44.png)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>groovy replace method</title>
      <link>http://coofee.github.io/post/groovy-replace-method/</link>
      <pubDate>Thu, 30 Jun 2016 00:04:39 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/groovy-replace-method/</guid>
      <description>

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;groovy-动态代理即替换方法&#34;&gt;Groovy 动态代理即替换方法&lt;/h1&gt;

&lt;p&gt;我们知道在Java中可以使用以下几种方法替换方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JDK自带的动态代理只支持修改某个类所实现的接口的方法。java只支持单继承，所有的代理类都是Proxy的子类，所以只能覆盖接口的方法。&lt;/li&gt;
&lt;li&gt;asm直接修改字节码，直接修改字节码，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;li&gt;javassist直接修改字节码，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;li&gt;cglib基于asm封装，直接修改类的方法和所实现接口的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总的来说，使用jdk自带的方案有局限，使用第三方框架能够支持全部功能。下面我们就来看一下，groovy作为一门jvm语言如何更加方便的实现动态代理的。&lt;/p&gt;

&lt;h2 id=&#34;1-1-演示类&#34;&gt;1.1 演示类&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;class ReplaceMethod {
    
    // 用于演示替换实例方法
    public List&amp;lt;String&amp;gt; getStreamInputs() {
        List&amp;lt;String&amp;gt; strings = &amp;quot;a, b, c, d&amp;quot;.split(&amp;quot;, &amp;quot;);
        return strings;
    }

    // 用于演示替换泛型方法，同时演示如何区分同名的方法。
    public void genericMethod(List&amp;lt;String&amp;gt; strings) {
        println strings
    }

    public void genericMethod(List&amp;lt;String&amp;gt; strings, boolean num) {
        println strings
    }

}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-如何替换方法&#34;&gt;2 如何替换方法？&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;通过metaClass的&lt;code&gt;pickMethod&lt;/code&gt;获取到原始的方法引用。&lt;/li&gt;
&lt;li&gt;使用闭包替换metaClass上要替换的方法即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;样例代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;def repalceMethod = new ReplaceMethod();
println repalceMethod.getStreamInputs();
def oldMethod = ReplaceMethod.metaClass.&amp;amp;pickMethod(&#39;getStreamInputs&#39;, (Class[]) null)
repalceMethod.metaClass.getStreamInputs = {
    println &amp;quot;replaced&amp;quot;
    // 执行旧方法.
    println oldMethod.invoke(repalceMethod);
    List&amp;lt;String&amp;gt; strings = &amp;quot;1, 2, 3, 4&amp;quot;.split(&amp;quot;, &amp;quot;);
    return strings;
}
println repalceMethod.getStreamInputs()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-通过class的meta直接替换方法&#34;&gt;2.1 通过class的meta直接替换方法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;Class.forName(&#39;com.coffee.groovy.metaclass.ReplaceMethod&#39;).metaClass.invokeMethod = { name, args -&amp;gt;
    println &amp;quot;replaced: Called ${name} with ${args}&amp;quot;
    println args.length
    println args.class
    println args.metaClass
    // http://stackoverflow.com/questions/10125903/groovy-overriding-invokemethod-for-a-single-instance
    delegate.class.metaClass.getMetaMethod(name, args)?.invoke(delegate, args)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-替换泛型方法-替换同名方法&#34;&gt;2.2 替换泛型方法&amp;amp;替换同名方法&lt;/h3&gt;

&lt;p&gt;通过指定要替换的方法的参数类型，既可以通过&lt;code&gt;pickMethod&lt;/code&gt;获取到对应的正确函数。对泛型而言，无需指定其具体的类型。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;List&amp;lt;Class&amp;gt; argClasses = [];
argClasses.add(List.class)
argClasses.add(boolean.class)
println argClasses
def clazz = Class.forName(&#39;com.coffee.groovy.metaclass.ReplaceMethod&#39;);
def oldGenericMethod = clazz.metaClass.&amp;amp;pickMethod(&#39;genericMethod&#39;,
        argClasses.toArray(new Class[0]))
clazz.metaClass.genericMethod = { strings, result -&amp;gt;
    println &amp;quot;replaced: $strings : $result&amp;quot;
}

repalceMethod.genericMethod(&amp;quot;ac, sd, dc, dd&amp;quot;.split(&amp;quot;, &amp;quot;), true)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>如何科学上网</title>
      <link>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Fri, 25 Mar 2016 13:14:08 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>

&lt;h2 id=&#34;1-如何使用shadowsocks代理访问网络&#34;&gt;1. 如何使用shadowsocks代理访问网络？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;购买代理服务器，安装shadowsocks。&lt;/li&gt;
&lt;li&gt;本机安装shadowsocks-gui，然后添加代理服务器上shadowsocks的配置，此时shadowsocks会在本机上面开启一个socks代理，其默认端口是: 1080。&lt;/li&gt;
&lt;li&gt;打开shadowsocks，勾选代理服务器，同时勾选shadowsocks-gui的全局模式或者自动代理模式，然后在浏览器上面选择使用系统代理即可正常访问google。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-如何在mac的terminal中使用socks代理&#34;&gt;2. 如何在mac的Terminal中使用socks代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用homebrew安装proxychains4-ng&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建&lt;code&gt;~/.proxychains/proxychains.conf&lt;/code&gt;文件，文件内容如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;strict_chain
proxy_dns
remote_dns_subnet 224
tcp_read_time_out 15000
tcp_connect_time_out 8000
localnet 127.0.0.0/255.0.0.0
quiet_mode

[ProxyList]
socks5  127.0.0.1 1080
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Terminal中，使用&lt;code&gt;proxychains4 [cmd]&lt;/code&gt;就可以使用代理服务器了。如：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;~$ proxychains4 brew update&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于mac osx 10.11，由于apple新增了sip模式，需要进入到Recovery模式(&lt;strong&gt;cmmand+R&lt;/strong&gt;)，然后在terminal中执行&lt;code&gt;csrutil enable --without debug&lt;/code&gt;命令，然后重启电脑，即可正常使用proxychains4-ng。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-如何让socks代理支持http代理&#34;&gt;3. 如何让socks代理支持http代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;安装polipo：&lt;code&gt;brew install polipo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看配置参数：&lt;code&gt;polipo -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动http代理：&lt;code&gt;polipo socksParentProxy=localhost:1080&lt;/code&gt;，其默认端口是8123。&lt;/li&gt;
&lt;li&gt;此时其他应该程序就可以设置polipo的http代理：&lt;code&gt;localhost:8123&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-如何在terminal中使用http代理&#34;&gt;4. 如何在Terminal中使用Http代理？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;~/.bash_profile&lt;/code&gt;文件中添加以下代码，然后执行&lt;code&gt;source ~/.bash_profile&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias gaproxy=&#39;export http_proxy=127.0.0.1:8123 https_proxy=127.0.0.1:8123&#39;
alias noproxy=&#39;unset http_proxy https_proxy&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当使用http代理时，执行gaproxy，然后执行其他命令即可。如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~$ gaproxy
~$ curl www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不使用时，可以直接执行noproxy。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://coofee.github.io/post/about/</link>
      <pubDate>Tue, 15 Mar 2016 19:51:21 CST</pubDate>
      <author>Coofee</author>
      <guid>http://coofee.github.io/post/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
